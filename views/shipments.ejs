<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>📦 Shipment Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fa;
        }

        .header {
            background: white;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border-left: 4px solid #007bff;
        }

        .stat-card.active { border-left-color: #28a745; }
        .stat-card.delivered { border-left-color: #6c757d; }
        .stat-card.transit { border-left-color: #17a2b8; }
        .stat-card.overdue { border-left-color: #dc3545; }
        .stat-card.issues { border-left-color: #ffc107; }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .filter-bar {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .shipments-table {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .shipments-table table {
            margin: 0;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.85rem;
            font-weight: 500;
            display: inline-block;
        }

        .status-label-created { background: #e3f2fd; color: #1976d2; }
        .status-picked-up { background: #f3e5f5; color: #7b1fa2; }
        .status-in-transit { background: #e1f5fe; color: #0288d1; }
        .status-out-for-delivery { background: #fff3e0; color: #f57c00; }
        .status-delivered { background: #e8f5e9; color: #388e3c; }
        .status-exception { background: #fff3e0; color: #f57c00; }
        .status-delayed { background: #ffebee; color: #d32f2f; }
        .status-lost-damaged { background: #ffcdd2; color: #c62828; }

        .priority-urgent { color: #dc3545; font-weight: bold; }
        .priority-high { color: #fd7e14; font-weight: bold; }
        .priority-normal { color: #6c757d; }
        .priority-low { color: #6c757d; opacity: 0.7; }

        .btn-create {
            background: #28a745;
            color: white;
            padding: 10px 20px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-weight: 500;
        }

        .btn-create:hover {
            background: #218838;
            color: white;
        }

        .tracking-link {
            color: #007bff;
            text-decoration: none;
        }

        .tracking-link:hover {
            text-decoration: underline;
        }

        .issue-badge {
            background: #ffc107;
            color: #000;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.75rem;
            margin-left: 8px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: #fff;
            margin: 5% auto;
            padding: 30px;
            border-radius: 8px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #000;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .btn-sm {
            padding: 4px 8px;
            font-size: 0.85rem;
            border-radius: 4px;
            border: none;
            cursor: pointer;
        }

        .btn-view {
            background: #007bff;
            color: white;
        }

        .btn-edit {
            background: #ffc107;
            color: #000;
        }

        .btn-receive {
            background: #28a745;
            color: white;
        }

        .btn-issue {
            background: #dc3545;
            color: white;
        }

        .overdue-row {
            background-color: #fff3f3;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center">
                <h1><i class="fas fa-shipping-fast"></i> Shipment Management</h1>
                <div>
                    <button class="btn-create" onclick="openCreateModal()">
                        <i class="fas fa-plus"></i> Add New Shipment
                    </button>
                    <a href="/purchase-orders" class="btn btn-outline-secondary ms-2">
                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <!-- Statistics -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value" id="totalShipments">-</div>
                <div class="stat-label">Total Shipments</div>
            </div>
            <div class="stat-card active">
                <div class="stat-value" id="activeShipments">-</div>
                <div class="stat-label">Active</div>
            </div>
            <div class="stat-card transit">
                <div class="stat-value" id="transitShipments">-</div>
                <div class="stat-label">In Transit</div>
            </div>
            <div class="stat-card delivered">
                <div class="stat-value" id="deliveredShipments">-</div>
                <div class="stat-label">Delivered</div>
            </div>
            <div class="stat-card overdue">
                <div class="stat-value" id="overdueShipments">-</div>
                <div class="stat-label">Overdue</div>
            </div>
            <div class="stat-card issues">
                <div class="stat-value" id="issueShipments">-</div>
                <div class="stat-label">With Issues</div>
            </div>
        </div>

        <!-- Filters -->
        <div class="filter-bar">
            <div class="row g-3">
                <div class="col-md-3">
                    <input type="text" id="filterVendor" class="form-control" placeholder="Filter by Vendor...">
                </div>
                <div class="col-md-2">
                    <input type="text" id="filterPO" class="form-control" placeholder="PO Number...">
                </div>
                <div class="col-md-2">
                    <select id="filterStatus" class="form-control">
                        <option value="">All Statuses</option>
                        <option value="Label Created">Label Created</option>
                        <option value="Picked Up">Picked Up</option>
                        <option value="In Transit">In Transit</option>
                        <option value="Out for Delivery">Out for Delivery</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Exception">Exception</option>
                        <option value="Delayed">Delayed</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select id="filterCarrier" class="form-control">
                        <option value="">All Carriers</option>
                        <option value="FedEx">FedEx</option>
                        <option value="UPS">UPS</option>
                        <option value="USPS">USPS</option>
                        <option value="DHL">DHL</option>
                        <option value="OnTrac">OnTrac</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <div class="d-flex gap-2">
                        <button class="btn btn-primary" onclick="applyFilters()">
                            <i class="fas fa-filter"></i> Apply
                        </button>
                        <button class="btn btn-secondary" onclick="clearFilters()">
                            <i class="fas fa-times"></i> Clear
                        </button>
                        <button class="btn btn-info" onclick="refreshShipments()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Shipments Table -->
        <div class="shipments-table">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Shipment #</th>
                        <th>Tracking Number</th>
                        <th>Carrier</th>
                        <th>PO Number</th>
                        <th>Vendor</th>
                        <th>Status</th>
                        <th>Est. Delivery</th>
                        <th>Priority</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="shipmentsTableBody">
                    <tr>
                        <td colspan="9" class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Create Shipment Modal -->
    <div id="createModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeCreateModal()">&times;</span>
            <h2><i class="fas fa-plus-circle"></i> Add New Shipment</h2>
            <form id="createShipmentForm" onsubmit="createShipment(event)">
                <div class="form-group">
                    <label for="trackingNumber">Tracking Number *</label>
                    <input type="text" id="trackingNumber" required>
                </div>
                <div class="form-group">
                    <label for="carrier">Carrier *</label>
                    <select id="carrier" required>
                        <option value="Auto">Auto-Detect</option>
                        <option value="FedEx">FedEx</option>
                        <option value="UPS">UPS</option>
                        <option value="USPS">USPS</option>
                        <option value="DHL">DHL</option>
                        <option value="OnTrac">OnTrac</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="poNumber">PO Number *</label>
                    <input type="text" id="poNumber" required placeholder="PO10001">
                </div>
                <div class="form-group">
                    <label for="vendorName">Vendor Name</label>
                    <input type="text" id="vendorName" placeholder="Will auto-fill from PO">
                </div>
                <div class="form-group">
                    <label for="shipDate">Ship Date</label>
                    <input type="date" id="shipDate">
                </div>
                <div class="form-group">
                    <label for="estimatedDelivery">Estimated Delivery</label>
                    <input type="date" id="estimatedDelivery">
                </div>
                <div class="form-group">
                    <label for="priority">Priority</label>
                    <select id="priority">
                        <option value="Low">Low</option>
                        <option value="Normal" selected>Normal</option>
                        <option value="High">High</option>
                        <option value="Urgent">Urgent</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="notes">Notes</label>
                    <textarea id="notes" rows="3"></textarea>
                </div>
                <div class="d-flex gap-2 justify-content-end">
                    <button type="button" class="btn btn-secondary" onclick="closeCreateModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Shipment</button>
                </div>
            </form>
        </div>
    </div>

    <!-- View Shipment Modal -->
    <div id="viewModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeViewModal()">&times;</span>
            <div id="viewModalContent">
                <!-- Dynamic content loaded here -->
            </div>
        </div>
    </div>

    <script>
        let allShipments = [];

        // Load initial data
        document.addEventListener('DOMContentLoaded', function() {
            loadStats();
            loadShipments();
        });

        // Load statistics
        async function loadStats() {
            try {
                const response = await fetch('/shipments/stats/summary');
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('totalShipments').textContent = data.stats.total;
                    document.getElementById('activeShipments').textContent = data.stats.active;
                    document.getElementById('transitShipments').textContent = data.stats.inTransit;
                    document.getElementById('deliveredShipments').textContent = data.stats.delivered;
                    document.getElementById('overdueShipments').textContent = data.stats.overdue;
                    document.getElementById('issueShipments').textContent = data.stats.withIssues;
                }
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        // Load shipments
        async function loadShipments() {
            try {
                const response = await fetch('/shipments');
                const data = await response.json();
                
                if (data.success) {
                    allShipments = data.shipments;
                    renderShipments(allShipments);
                }
            } catch (error) {
                console.error('Error loading shipments:', error);
                document.getElementById('shipmentsTableBody').innerHTML = 
                    '<tr><td colspan="9" class="text-center text-danger">Error loading shipments</td></tr>';
            }
        }

        // Render shipments table
        function renderShipments(shipments) {
            const tbody = document.getElementById('shipmentsTableBody');
            
            if (shipments.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" class="text-center">No shipments found</td></tr>';
                return;
            }

            tbody.innerHTML = shipments.map(shipment => {
                const isOverdue = shipment.estimatedDelivery && 
                                 new Date(shipment.estimatedDelivery) < new Date() && 
                                 shipment.status !== 'Delivered';
                
                const statusClass = shipment.status.toLowerCase().replace(/\s+/g, '-');
                const priorityClass = shipment.priority.toLowerCase();
                
                return `
                    <tr class="${isOverdue ? 'overdue-row' : ''}">
                        <td>
                            <strong>${shipment.shipmentNumber}</strong>
                            ${shipment.hasIssues ? '<span class="issue-badge">⚠️ Issue</span>' : ''}
                        </td>
                        <td>
                            ${shipment.trackingURL ? 
                                `<a href="${shipment.trackingURL}" target="_blank" class="tracking-link">
                                    ${shipment.trackingNumber}
                                    <i class="fas fa-external-link-alt"></i>
                                </a>` : 
                                shipment.trackingNumber
                            }
                        </td>
                        <td>${shipment.carrier}</td>
                        <td>
                            <a href="/purchase-orders?search=${shipment.poNumber}">
                                ${shipment.poNumber}
                            </a>
                        </td>
                        <td>${shipment.vendorName}</td>
                        <td>
                            <span class="status-badge status-${statusClass}">
                                ${shipment.status}
                            </span>
                        </td>
                        <td>
                            ${shipment.estimatedDelivery ? 
                                new Date(shipment.estimatedDelivery).toLocaleDateString() : 
                                '-'
                            }
                            ${isOverdue ? '<span class="text-danger"> ⏰ OVERDUE</span>' : ''}
                        </td>
                        <td>
                            <span class="priority-${priorityClass}">${shipment.priority}</span>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn-sm btn-view" onclick="viewShipment('${shipment._id}')" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn-sm btn-edit" onclick="updateStatus('${shipment._id}')" title="Update Status">
                                    <i class="fas fa-edit"></i>
                                </button>
                                ${shipment.status !== 'Delivered' ? 
                                    `<button class="btn-sm btn-receive" onclick="receiveShipment('${shipment._id}')" title="Mark Received">
                                        <i class="fas fa-check"></i>
                                    </button>` : 
                                    ''
                                }
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Apply filters
        function applyFilters() {
            const vendor = document.getElementById('filterVendor').value.toLowerCase();
            const po = document.getElementById('filterPO').value.toLowerCase();
            const status = document.getElementById('filterStatus').value;
            const carrier = document.getElementById('filterCarrier').value;

            const filtered = allShipments.filter(shipment => {
                if (vendor && !shipment.vendorName.toLowerCase().includes(vendor)) return false;
                if (po && !shipment.poNumber.toLowerCase().includes(po)) return false;
                if (status && shipment.status !== status) return false;
                if (carrier && shipment.carrier !== carrier) return false;
                return true;
            });

            renderShipments(filtered);
        }

        // Clear filters
        function clearFilters() {
            document.getElementById('filterVendor').value = '';
            document.getElementById('filterPO').value = '';
            document.getElementById('filterStatus').value = '';
            document.getElementById('filterCarrier').value = '';
            renderShipments(allShipments);
        }

        // Refresh data
        function refreshShipments() {
            loadStats();
            loadShipments();
        }

        // Modal functions
        function openCreateModal() {
            document.getElementById('createModal').style.display = 'block';
        }

        function closeCreateModal() {
            document.getElementById('createModal').style.display = 'none';
            document.getElementById('createShipmentForm').reset();
        }

        function closeViewModal() {
            document.getElementById('viewModal').style.display = 'none';
        }

        // Create shipment
        async function createShipment(event) {
            event.preventDefault();

            const shipmentData = {
                trackingNumber: document.getElementById('trackingNumber').value,
                carrier: document.getElementById('carrier').value,
                poNumber: document.getElementById('poNumber').value,
                vendorName: document.getElementById('vendorName').value,
                shipDate: document.getElementById('shipDate').value,
                estimatedDelivery: document.getElementById('estimatedDelivery').value,
                priority: document.getElementById('priority').value,
                notes: document.getElementById('notes').value
            };

            try {
                const response = await fetch('/shipments', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(shipmentData)
                });

                const data = await response.json();

                if (data.success) {
                    alert('✅ Shipment created successfully!');
                    closeCreateModal();
                    refreshShipments();
                } else {
                    alert('❌ Error: ' + (data.error || 'Failed to create shipment'));
                }
            } catch (error) {
                console.error('Error creating shipment:', error);
                alert('❌ Error creating shipment');
            }
        }

        // View shipment details
        async function viewShipment(id) {
            try {
                const response = await fetch(`/shipments/${id}`);
                const data = await response.json();

                if (data.success) {
                    const shipment = data.shipment;
                    const content = `
                        <h2>📦 Shipment Details</h2>
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Shipment Number:</strong> ${shipment.shipmentNumber}</p>
                                <p><strong>Tracking Number:</strong> 
                                    ${shipment.trackingURL ? 
                                        `<a href="${shipment.trackingURL}" target="_blank">${shipment.trackingNumber}</a>` : 
                                        shipment.trackingNumber
                                    }
                                </p>
                                <p><strong>Carrier:</strong> ${shipment.carrier}</p>
                                <p><strong>PO Number:</strong> ${shipment.poNumber}</p>
                                <p><strong>Vendor:</strong> ${shipment.vendorName}</p>
                                <p><strong>Status:</strong> <span class="status-badge">${shipment.status}</span></p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Ship Date:</strong> ${shipment.shipDate ? new Date(shipment.shipDate).toLocaleDateString() : '-'}</p>
                                <p><strong>Est. Delivery:</strong> ${shipment.estimatedDelivery ? new Date(shipment.estimatedDelivery).toLocaleDateString() : '-'}</p>
                                <p><strong>Actual Delivery:</strong> ${shipment.actualDelivery ? new Date(shipment.actualDelivery).toLocaleDateString() : '-'}</p>
                                <p><strong>Priority:</strong> ${shipment.priority}</p>
                                <p><strong>Last Location:</strong> ${shipment.lastLocation || '-'}</p>
                            </div>
                        </div>
                        ${shipment.notes ? `<p><strong>Notes:</strong> ${shipment.notes}</p>` : ''}
                        ${shipment.trackingHistory && shipment.trackingHistory.length > 0 ? `
                            <h4>Tracking History</h4>
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Date/Time</th>
                                        <th>Status</th>
                                        <th>Location</th>
                                        <th>Description</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${shipment.trackingHistory.map(event => `
                                        <tr>
                                            <td>${new Date(event.timestamp).toLocaleString()}</td>
                                            <td>${event.status}</td>
                                            <td>${event.location || '-'}</td>
                                            <td>${event.description || '-'}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        ` : ''}
                    `;

                    document.getElementById('viewModalContent').innerHTML = content;
                    document.getElementById('viewModal').style.display = 'block';
                }
            } catch (error) {
                console.error('Error loading shipment details:', error);
                alert('Error loading shipment details');
            }
        }

        // Update status
        function updateStatus(id) {
            const status = prompt('Enter new status:\n- Label Created\n- Picked Up\n- In Transit\n- Out for Delivery\n- Delivered\n- Exception\n- Delayed');
            if (!status) return;

            const location = prompt('Location (optional):');
            const description = prompt('Description (optional):');

            fetch(`/shipments/${id}/tracking`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status, location, description })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('✅ Status updated!');
                    refreshShipments();
                } else {
                    alert('❌ Error updating status');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('❌ Error updating status');
            });
        }

        // Receive shipment
        function receiveShipment(id) {
            const receivedBy = prompt('Received by (name):');
            if (!receivedBy) return;

            const notes = prompt('Receiving notes (optional):');

            fetch(`/shipments/${id}/receive`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ receivedBy, receivingNotes: notes })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('✅ Shipment marked as received!');
                    refreshShipments();
                } else {
                    alert('❌ Error: ' + (data.error || 'Failed to receive shipment'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('❌ Error receiving shipment');
            });
        }

        // Close modals when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }
    </script>
</body>
</html>
