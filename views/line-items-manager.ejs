<!DOCTYPE html>
<html>

<head>
    <title>Line Items Manager</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
            border-bottom: 1px solid #dee2e6;
        }

        .header h1 {
            margin: 0;
            color: #333;
        }

        .nav-links {
            display: flex;
            gap: 15px;
        }

        .nav-links a {
            padding: 8px 16px;
            text-decoration: none;
            background: #6c757d;
            color: white;
            border-radius: 4px;
            font-size: 14px;
        }

        .nav-links a:hover {
            background: #5a6268;
        }

        /* Stats Section */
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #007bff;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #6c757d;
            font-size: 0.9em;
        }

        /* Filters Section */
        .filters {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .filters h3 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
        }

        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            font-size: 12px;
            color: #6c757d;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .filter-group input,
        .filter-group select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .filter-actions {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .btn-primary {
            background: #007bff;
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn:hover {
            opacity: 0.9;
        }

        /* Results Section */
        .results {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .results-header {
            background: #f8f9fa;
            padding: 15px 20px;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .results-header h3 {
            margin: 0;
        }

        .pagination-info {
            font-size: 14px;
            color: #6c757d;
        }

        /* Table Styles */
        .items-table {
            width: 100%;
            border-collapse: collapse;
        }

        .items-table th,
        .items-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .items-table th {
            background: #f8f9fa;
            font-weight: bold;
            color: #495057;
            cursor: pointer;
            user-select: none;
        }

        .items-table th:hover {
            background: #e9ecef;
        }

        .items-table tr:hover {
            background: #f8f9fa;
        }

        .item-row {
            font-size: 14px;
        }

        .po-link {
            color: #007bff;
            text-decoration: none;
            font-family: monospace;
            font-size: 16px;
            font-weight: bold;
        }

        .po-link:hover {
            text-decoration: underline;
            color: #0056b3;
        }

        .po-text {
            font-family: monospace;
            font-size: 16px;
            font-weight: bold;
            color: #333;
        }

        .item-memo {
            max-width: 300px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .sku-input {
            border: 1px solid #ddd;
            padding: 4px 6px;
            border-radius: 3px;
            font-size: 12px;
            width: 100px;
        }

        .status-select {
            border: 1px solid #ddd;
            padding: 4px 6px;
            border-radius: 3px;
            font-size: 12px;
            min-width: 120px;
        }

        .notes-input {
            border: 1px solid #ddd;
            padding: 4px 6px;
            border-radius: 3px;
            font-size: 12px;
            width: 150px;
        }

        .received-badge {
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: bold;
        }

        .received-badge.yes {
            background: #d4edda;
            color: #155724;
        }

        .received-badge.no {
            background: #f8d7da;
            color: #721c24;
        }

        .status-badge {
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: bold;
            display: inline-block;
        }

        .status-badge.in-stock {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.backordered {
            background: #fff3cd;
            color: #856404;
        }

        .status-badge.find-vendor {
            background: #f8d7da;
            color: #721c24;
        }

        .status-badge.substitute {
            background: #cce5ff;
            color: #004085;
        }

        .status-badge.discontinued {
            background: #e2e3e5;
            color: #383d41;
        }

        .status-badge.delayed {
            background: #ffeaa7;
            color: #6c5ce7;
        }

        .status-badge.on-order {
            background: #d1ecf1;
            color: #0c5460;
        }

        .status-badge.cancelled {
            background: #f5c6cb;
            color: #721c24;
        }

        .status-badge.special {
            background: #e7e3ff;
            color: #6f42c1;
        }

        .status-badge.not-my-concern {
            background: #f8d7da;
            color: #721c24;
            font-weight: bold;
        }

        .status-badge.pending-bill {
            background: #fff3cd;
            color: #856404;
            font-weight: bold;
        }

        .po-status-column {
            min-width: 120px;
        }

        .ns-status-column {
            min-width: 120px;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }

        .no-results {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }

        .pagination {
            padding: 20px;
            text-align: center;
            border-top: 1px solid #eee;
        }

        .pagination button {
            margin: 0 5px;
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 4px;
            cursor: pointer;
        }

        .pagination button:hover {
            background: #f8f9fa;
        }

        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Tab Styles */
        #lineItemViewTabs {
            display: flex !important;
            visibility: visible !important;
            border-bottom: 1px solid #dee2e6;
            margin: 0;
            padding: 0 20px;
            background: #f8f9fa;
        }

        #lineItemViewTabs .nav-link {
            border: none;
            border-radius: 0;
            color: #6c757d;
            font-weight: 500;
            padding: 15px 25px;
            margin-right: 10px;
            transition: all 0.3s ease;
        }

        #lineItemViewTabs .nav-link:hover {
            border-color: transparent;
            color: #495057;
            background-color: rgba(0, 123, 255, 0.1);
        }

        #lineItemViewTabs .nav-link.active {
            color: #007bff;
            background-color: white;
            border-bottom: 3px solid #007bff;
        }

        .tab-content {
            padding: 0;
        }

        .tab-pane.show.active {
            display: block !important;
            opacity: 1;
        }

        /* Card View Styles */
        .line-item-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 15px;
            background: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: box-shadow 0.3s ease;
        }

        .line-item-card:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .card-header {
            padding: 15px 20px;
            background: #f8f9fa;
            border-bottom: 1px solid #e0e0e0;
            border-radius: 8px 8px 0 0;
        }

        .card-title {
            font-size: 16px;
            font-weight: bold;
            margin: 0 0 5px 0;
            color: #333;
        }

        .card-subtitle {
            font-size: 14px;
            color: #6c757d;
            margin: 0;
        }

        .card-body {
            padding: 20px;
        }

        .card-field {
            margin-bottom: 12px;
            display: flex;
            align-items: flex-start;
        }

        .card-field-label {
            font-weight: bold;
            color: #495057;
            min-width: 100px;
            margin-right: 10px;
            font-size: 14px;
        }

        .card-field-value {
            flex: 1;
            color: #333;
            font-size: 14px;
        }

        .card-memo {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            font-style: italic;
            margin-top: 5px;
        }

        .card-actions {
            padding: 15px 20px;
            background: #f8f9fa;
            border-top: 1px solid #e0e0e0;
            border-radius: 0 0 8px 8px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .card-input {
            border: 1px solid #ddd;
            padding: 6px 10px;
            border-radius: 4px;
            font-size: 13px;
            flex: 1;
            min-width: 120px;
        }

        .card-select {
            border: 1px solid #ddd;
            padding: 6px 10px;
            border-radius: 4px;
            font-size: 13px;
            flex: 1;
            min-width: 140px;
        }

        #cardContainer {
            padding: 20px;
        }

        .card-row {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 20px;
        }

        /* Navigation Styles */
        .navigation-container {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .nav-section {
            position: relative;
        }

        .nav-accordion-btn {
            background: linear-gradient(135deg, #6f42c1, #e83e8c);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            white-space: nowrap;
        }

        .nav-accordion-btn:hover {
            background: linear-gradient(135deg, #5a32a3, #dc2f7a);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .accordion-icon {
            transition: transform 0.3s ease;
            font-size: 12px;
        }

        .nav-accordion-btn.active .accordion-icon {
            transform: rotate(180deg);
        }

        .nav-accordion-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            min-width: 200px;
            z-index: 1000;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

        .nav-accordion-content.show {
            max-height: 500px;
            padding: 8px 0;
        }

        .nav-accordion-item {
            display: block;
            padding: 8px 15px;
            color: #333;
            text-decoration: none;
            transition: background-color 0.2s ease;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
        }

        .nav-accordion-item:hover {
            background-color: #f8f9fa;
            color: #6f42c1;
            text-decoration: none;
        }

        /* User Section */
        .user-section {
            position: relative;
            margin-left: auto;
        }

        .user-dropdown {
            background: linear-gradient(135deg, #17a2b8, #6610f2);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .user-dropdown:hover {
            background: linear-gradient(135deg, #138496, #520dc2);
            transform: translateY(-1px);
        }

        .user-dropdown-content {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            min-width: 180px;
            z-index: 1000;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

        .user-dropdown-content.show {
            max-height: 300px;
            padding: 8px 0;
        }

        .user-dropdown-item {
            display: block;
            padding: 8px 15px;
            color: #333;
            text-decoration: none;
            transition: background-color 0.2s ease;
        }

        .user-dropdown-item:hover {
            background-color: #f8f9fa;
            color: #17a2b8;
            text-decoration: none;
        }

        /* P.O.D. Button Styles */
        .pod-button {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            white-space: nowrap;
        }

        .pod-button:hover {
            background: linear-gradient(135deg, #218838, #1ea583);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            color: white;
            text-decoration: none;
        }

        .pod-button .arrow {
            font-size: 12px;
            transition: transform 0.3s ease;
        }

        .pod-button:hover .arrow {
            transform: translateX(-2px);
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Line Items Manager</h1>
            
            <!-- P.O.D. Button -->
            <a href="/" class="pod-button">
                <span class="arrow">←</span>
                <span>P.O.D.</span>
            </a>
            
            <div class="d-flex align-items-center justify-content-between flex-grow-1">
                <!-- Navigation Container -->
                <div class="navigation-container">
                    <!-- Dashboards Accordion -->
                    <div class="nav-section">
                        <button class="nav-accordion-btn" onclick="toggleAccordion('managersAccordion')">
                            📊 Dashboards <span class="accordion-icon">▼</span>
                        </button>
                        <div id="managersAccordion" class="nav-accordion-content">
                            <a href="/" class="nav-accordion-item">🏠 PO Dashboard</a>
                            <a href="/receiving-dashboard" class="nav-accordion-item">📦 Receiving Dashboard</a>
                            <a href="/tasks-dashboard" class="nav-accordion-item">📋 Tasks Dashboard</a>
                            <a href="/dropship-dashboard" class="nav-accordion-item">🚢 Dropship Dashboard</a>
                        </div>
                    </div>
                    
                    <!-- Options Accordion -->
                    <div class="nav-section">
                        <button class="nav-accordion-btn" onclick="toggleAccordion('optionsAccordion')">
                            ⚙️ Options <span class="accordion-icon">▼</span>
                        </button>
                        <div id="optionsAccordion" class="nav-accordion-content">
                            <a href="/purchase-orders/line-items-manager" class="nav-accordion-item">📄 Line Items Manager</a>
                            <a href="/purchase-orders/notes-manager" class="nav-accordion-item">📝 Notes Manager</a>
                            <a href="/organic-vendors-dashboard" class="nav-accordion-item">🌱 Organic Vendors</a>
                            <a href="/purchase-orders/trouble-seed" class="nav-accordion-item">⚠️ Trouble Seed</a>
                            <a href="/purchase-orders/orphaned-line-items" class="nav-accordion-item">👻 Orphaned Items</a>
                        </div>
                    </div>

                    <!-- Import Accordion -->
                    <div class="nav-section">
                        <button class="nav-accordion-btn" onclick="toggleAccordion('importAccordion')">
                            📥 Import <span class="accordion-icon">▼</span>
                        </button>
                        <div id="importAccordion" class="nav-accordion-content">
                            <a href="/purchase-orders/upload" class="nav-accordion-item">📄 Upload CSV</a>
                            <a href="/purchase-orders/tracking-dashboard" class="nav-accordion-item">📦 Tracking Dashboard</a>
                        </div>
                    </div>
                </div>

                <!-- User Info Section -->
                <% if (typeof user !== 'undefined' && user) { %>
                <div class="user-section">
                    <button class="user-dropdown" onclick="toggleAccordion('userDropdown')">
                        <i class="fas fa-user"></i>
                        <%= user.username %>
                        <span class="accordion-icon">▼</span>
                    </button>
                    <div id="userDropdown" class="user-dropdown-content">
                        <div class="user-dropdown-item">
                            <strong>Role:</strong> <%= user.role %>
                        </div>
                        <% if (user.role === 'admin' || user.role === 'manager') { %>
                        <a href="/admin/users" class="user-dropdown-item">
                            <i class="fas fa-users"></i> Manage Users
                        </a>
                        <% } %>
                        <a href="/logout" class="user-dropdown-item">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </a>
                    </div>
                </div>
                <% } %>
            </div>
        </div>

        <!-- Stats Section -->
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number">
                    <%= totalLineItems %>
                </div>
                <div class="stat-label">Total Line Items</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">
                    <%= receivedItems %>
                </div>
                <div class="stat-label">Items Received</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">
                    <%= itemsWithSKU %>
                </div>
                <div class="stat-label">Items with SKU</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">
                    <%= itemsWithStatus %>
                </div>
                <div class="stat-label">Items with Status</div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="filters">
            <h3>Filters</h3>
            <div class="filter-grid">
                <div class="filter-group">
                    <label>Search</label>
                    <input type="text" id="searchFilter" placeholder="Search memo, SKU, PO number, notes...">
                </div>
                <div class="filter-group">
                    <label>PO Number</label>
                    <select id="poNumberFilter">
                        <option value="">All PO Numbers</option>
                        <% uniquePONumbers.forEach(poNumber=> { %>
                            <option value="<%= poNumber %>">
                                <%= poNumber %>
                            </option>
                            <% }); %>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Vendor</label>
                    <select id="vendorFilter">
                        <option value="">All Vendors</option>
                        <% uniqueVendors.forEach(vendor=> { %>
                            <option value="<%= vendor %>">
                                <%= vendor %>
                            </option>
                            <% }); %>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Item Status</label>
                    <select id="statusFilter">
                        <option value="">All Statuses</option>
                        <!-- Options will be loaded dynamically -->
                    </select>
                </div>
                <div class="filter-group">
                    <label>SKU</label>
                    <select id="skuFilter">
                        <option value="">All SKUs</option>
                        <% uniqueSKUs.forEach(sku=> { %>
                            <option value="<%= sku %>">
                                <%= sku %>
                            </option>
                            <% }); %>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Received Status</label>
                    <select id="receivedFilter">
                        <option value="">All Items</option>
                        <option value="true">Received Only</option>
                        <option value="false">Not Received Only</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Hide Filters</label>
                    <div style="display: flex; flex-direction: column; gap: 5px;">
                        <label style="font-size: 11px; display: flex; align-items: center; gap: 5px;">
                            <input type="checkbox" id="hideNotMyConcern" checked>
                            Hide "Not my concern" POs
                        </label>
                        <label style="font-size: 11px; display: flex; align-items: center; gap: 5px;">
                            <input type="checkbox" id="hidePendingBill" checked>
                            Hide "Pending Bill" NS Status POs
                        </label>
                    </div>
                </div>
            </div>
            <div class="filter-actions">
                <button class="btn btn-primary" onclick="applyFilters()">Apply Filters</button>
                <button class="btn btn-secondary" onclick="clearFilters()">Clear Filters</button>
                <span id="loading" class="loading" style="display: none;">Loading...</span>
            </div>
        </div>

        <!-- Results Section -->
        <div class="results">
            <div class="results-header">
                <h3>Line Items</h3>
                <div class="pagination-info" id="paginationInfo">Loading...</div>
            </div>

            <!-- View Tabs -->
            <ul class="nav nav-tabs mt-3" id="lineItemViewTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="table-tab" data-bs-toggle="tab" data-bs-target="#table-view" 
                            type="button" role="tab" aria-controls="table-view" aria-selected="true" onclick="showView('table')">
                        <i class="fas fa-table me-2"></i>Table View
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="card-tab" data-bs-toggle="tab" data-bs-target="#card-view" 
                            type="button" role="tab" aria-controls="card-view" aria-selected="false" onclick="showView('card')">
                        <i class="fas fa-th-large me-2"></i>Card View
                    </button>
                </li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-content" id="lineItemTabContent">
                <!-- Table View -->
                <div class="tab-pane fade show active" id="table-view" role="tabpanel" aria-labelledby="table-tab">
                    <div id="tableContainer">
                        <div class="loading">Loading line items...</div>
                    </div>
                </div>

                <!-- Card View -->
                <div class="tab-pane fade" id="card-view" role="tabpanel" aria-labelledby="card-tab">
                    <div id="cardContainer" class="row">
                        <div class="col-12 text-center">
                            <div class="loading">Loading line items...</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pagination" id="pagination" style="display: none;">
                <button id="prevBtn" onclick="previousPage()">← Previous</button>
                <span id="pageInfo"></span>
                <button id="nextBtn" onclick="nextPage()">Next →</button>
            </div>
        </div>
    </div>

    <script>
        let currentPage = 0;
        let itemsPerPage = 50;
        let totalItems = 0;
        let currentFilters = {};
        let globalLineItemStatusOptions = [];
        let currentLineItems = [];

        // Tab switching functionality
        function showView(viewType) {
            const tableView = document.getElementById('table-view');
            const cardView = document.getElementById('card-view');
            const tableTab = document.getElementById('table-tab');
            const cardTab = document.getElementById('card-tab');

            if (viewType === 'table') {
                tableView.classList.add('show', 'active');
                cardView.classList.remove('show', 'active');
                tableTab.classList.add('active');
                cardTab.classList.remove('active');
            } else if (viewType === 'card') {
                cardView.classList.add('show', 'active');
                tableView.classList.remove('show', 'active');
                cardTab.classList.add('active');
                tableTab.classList.remove('active');
                
                // Render card view with current line items
                if (currentLineItems && currentLineItems.length > 0) {
                    renderCardView(currentLineItems);
                }
            }
        }

        // Render card view
        function renderCardView(lineItems) {
            const cardContainer = document.getElementById('cardContainer');
            
            if (!lineItems || lineItems.length === 0) {
                cardContainer.innerHTML = '<div class="col-12 text-center"><div class="no-results">No line items found</div></div>';
                return;
            }

            const cardsHtml = lineItems.map(item => {
                const priorityDisplay = String(item.priority || '').toLowerCase();
                const priorityClass = priorityDisplay === 'high' ? 'badge-danger' : 
                                    priorityDisplay === 'medium' ? 'badge-warning' : 'badge-secondary';
                
                return `
                    <div class="line-item-card">
                        <div class="card-header">
                            <div class="card-title">
                                ${item.poNumber ? `<a href="/purchase-orders/${item.poNumber}" class="po-link">${item.poNumber}</a>` : 
                                  `<span class="po-text">${item.poNumber || 'N/A'}</span>`}
                            </div>
                            <div class="card-subtitle">
                                ${escapeHtml(item.vendor || 'Unknown Vendor')} • 
                                <span class="badge ${priorityClass}">${priorityDisplay || 'none'}</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="card-field">
                                <div class="card-field-label">Quantity:</div>
                                <div class="card-field-value">${item.quantity || 'N/A'}</div>
                            </div>
                            <div class="card-field">
                                <div class="card-field-label">Rate:</div>
                                <div class="card-field-value">$${item.rate || '0.00'}</div>
                            </div>
                            <div class="card-field">
                                <div class="card-field-label">Amount:</div>
                                <div class="card-field-value">$${item.amount || '0.00'}</div>
                            </div>
                            <div class="card-field">
                                <div class="card-field-label">Received:</div>
                                <div class="card-field-value">
                                    <span class="received-badge ${item.received ? 'yes' : 'no'}">
                                        ${item.received ? 'Yes' : 'No'}
                                    </span>
                                </div>
                            </div>
                            ${item.memo ? `
                                <div class="card-field">
                                    <div class="card-field-label">Memo:</div>
                                    <div class="card-field-value">
                                        <div class="card-memo">${escapeHtml(item.memo)}</div>
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                        <div class="card-actions">
                            <input type="text" 
                                   class="card-input sku-input" 
                                   placeholder="SKU" 
                                   value="${escapeHtml(item.sku || '')}"
                                   onchange="updateLineItemField('${item._id}', 'sku', this.value)">
                            <select class="card-select status-select" 
                                    onchange="updateLineItemField('${item._id}', 'status', this.value)">
                                <option value="">Select Status</option>
                                ${globalLineItemStatusOptions.map(status => 
                                    `<option value="${escapeHtml(status)}" ${item.status === status ? 'selected' : ''}>${escapeHtml(status)}</option>`
                                ).join('')}
                            </select>
                            <input type="text" 
                                   class="card-input notes-input" 
                                   placeholder="Notes" 
                                   value="${escapeHtml(item.notes || '')}"
                                   onchange="updateLineItemField('${item._id}', 'notes', this.value)">
                        </div>
                    </div>
                `;
            }).join('');

            cardContainer.innerHTML = `<div class="card-row">${cardsHtml}</div>`;
        }

        // Escape HTML to prevent XSS
        function escapeHtml(text) {
            if (text === null || text === undefined) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Load line item status options
        async function loadLineItemStatusOptions() {
            try {
                const response = await fetch('/purchase-orders/line-items/status-options');
                globalLineItemStatusOptions = await response.json();
                populateStatusFilter();
            } catch (error) {
                console.error('Error loading status options:', error);
                globalLineItemStatusOptions = ['', 'In Stock', 'Backordered', 'Find Different Vendor', 'Substitute Product', 'Discontinued', 'Delivery Delay', 'On Order', 'Cancelled', 'Special Order'];
                populateStatusFilter();
            }
        }

        // Populate the status filter dropdown
        function populateStatusFilter() {
            const statusFilter = document.getElementById('statusFilter');
            statusFilter.innerHTML = '<option value="">All Statuses</option>';

            globalLineItemStatusOptions.slice(1).forEach(status => { // Skip empty string
                if (status) {
                    const option = document.createElement('option');
                    option.value = status;
                    option.textContent = status;
                    statusFilter.appendChild(option);
                }
            });
        }

        // Generate status options for table dropdowns
        function generateStatusDropdownOptions(currentStatus) {
            return globalLineItemStatusOptions.map(status =>
                `<option value="${status}" ${currentStatus === status ? 'selected' : ''}>${status || 'Select Status'}</option>`
            ).join('');
        }

        function getStatusBadgeClass(status) {
            const classMap = {
                'In Stock': 'in-stock',
                'Backordered': 'backordered',
                'Find Different Vendor': 'find-vendor',
                'Substitute Product': 'substitute',
                'Discontinued': 'discontinued',
                'Delivery Delay': 'delayed',
                'On Order': 'on-order',
                'Cancelled': 'cancelled',
                'Special Order': 'special'
            };
            return classMap[status] || '';
        }

        async function loadLineItems() {
            const loadingElement = document.getElementById('loading');
            const tableContainer = document.getElementById('tableContainer');

            loadingElement.style.display = 'inline';

            try {
                const params = new URLSearchParams({
                    limit: itemsPerPage,
                    skip: currentPage * itemsPerPage,
                    ...currentFilters
                });

                console.log('Making request to:', `/purchase-orders/line-items-api?${params}`);
                const response = await fetch(`/purchase-orders/line-items-api?${params}`);

                console.log('Response status:', response.status);
                console.log('Response headers:', [...response.headers.entries()]);

                const data = await response.json();
                console.log('Response data:', data);

                if (response.ok) {
                    totalItems = data.totalCount;
                    renderTable(data.lineItems);
                    updatePaginationInfo();
                } else {
                    console.error('Server error:', data);
                    tableContainer.innerHTML = `<div class="no-results">Error loading line items: ${data.error || 'Unknown error'}</div>`;
                }
            } catch (error) {
                console.error('Network/parsing error:', error);
                tableContainer.innerHTML = `<div class="no-results">Error loading line items: ${error.message}</div>`;
            } finally {
                loadingElement.style.display = 'none';
            }
        }

        function renderTable(lineItems) {
            // Store current line items for card view
            currentLineItems = lineItems;
            
            const tableContainer = document.getElementById('tableContainer');

            if (lineItems.length === 0) {
                tableContainer.innerHTML = '<div class="no-results">No line items found</div>';
                return;
            }

            const tableHtml = `
                <table class="items-table">
                    <thead>
                        <tr>
                            <th>PO Number</th>
                            <th>Vendor</th>
                            <th>PO Status</th>
                            <th>NS Status</th>
                            <th>Item Description</th>
                            <th>SKU</th>
                            <th>Status</th>
                            <th>Received</th>
                            <th>ETA</th>
                            <th>Notes</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${lineItems.map(item => `
                            <tr class="item-row">
                                <td>
                                    ${item.poUrl && item.poUrl.trim() ?
                    `<a href="${escapeHtml(item.poUrl)}" target="_blank" class="po-link" title="Open ${item.poNumber} link">${item.poNumber}</a>` :
                    `<span class="po-text">${item.poNumber}</span>`
                }
                                </td>
                                <td>${escapeHtml(item.vendor || 'N/A')}</td>
                                <td class="po-status-column">
                                    <span class="status-badge ${item.poStatus === 'Not my concern' ? 'not-my-concern' : item.poStatus ? 'in-stock' : ''}">
                                        ${escapeHtml(item.poStatus || 'No Status')}
                                    </span>
                                </td>
                                <td class="ns-status-column">
                                    <span class="status-badge ${item.poNsStatus === 'Pending Bill' ? 'pending-bill' : item.poNsStatus ? 'on-order' : ''}">
                                        ${escapeHtml(item.poNsStatus || 'No NS Status')}
                                    </span>
                                </td>
                                <td class="item-memo" title="${escapeHtml(item.memo)}">${escapeHtml(item.memo)}</td>
                                <td>
                                    <input type="text" class="sku-input" 
                                           value="${escapeHtml(item.sku || '')}"
                                           onchange="updateSKU('${item._id}', this.value)"
                                           placeholder="Enter SKU">
                                </td>
                                <td>
                                    <select class="status-select" onchange="updateItemStatus('${item._id}', this.value)">
                                        ${generateStatusDropdownOptions(item.itemStatus)}
                                    </select>
                                    ${item.itemStatus ? `<br><span class="status-badge ${getStatusBadgeClass(item.itemStatus)}">${item.itemStatus}</span>` : ''}
                                </td>
                                <td>
                                    <span class="received-badge ${item.received ? 'yes' : 'no'}">
                                        ${item.received ? 'Yes' : 'No'}
                                    </span>
                                    ${item.received && item.receivedDate ? `<br><small>${new Date(item.receivedDate).toLocaleDateString()}</small>` : ''}
                                </td>
                                <td>
                                    <input type="date" 
                                           value="${item.eta ? new Date(item.eta).toISOString().split('T')[0] : ''}"
                                           onchange="updateETA('${item._id}', this.value)">
                                </td>
                                <td>
                                    <input type="text" class="notes-input" 
                                           value="${escapeHtml(item.notes || '')}"
                                           onchange="updateItemNotes('${item._id}', this.value)"
                                           placeholder="Add notes...">
                                </td>
                                <td>${item.date ? new Date(item.date).toLocaleDateString() : 'N/A'}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;

            tableContainer.innerHTML = tableHtml;
        }

        function updatePaginationInfo() {
            const paginationInfo = document.getElementById('paginationInfo');
            const pagination = document.getElementById('pagination');
            const pageInfo = document.getElementById('pageInfo');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');

            const startItem = currentPage * itemsPerPage + 1;
            const endItem = Math.min((currentPage + 1) * itemsPerPage, totalItems);

            paginationInfo.textContent = `Showing ${startItem}-${endItem} of ${totalItems} items`;
            pageInfo.textContent = `Page ${currentPage + 1} of ${Math.ceil(totalItems / itemsPerPage)}`;

            prevBtn.disabled = currentPage === 0;
            nextBtn.disabled = endItem >= totalItems;

            pagination.style.display = totalItems > itemsPerPage ? 'block' : 'none';
        }

        function applyFilters() {
            currentFilters = {
                search: document.getElementById('searchFilter').value,
                poNumber: document.getElementById('poNumberFilter').value,
                vendor: document.getElementById('vendorFilter').value,
                itemStatus: document.getElementById('statusFilter').value,
                sku: document.getElementById('skuFilter').value,
                received: document.getElementById('receivedFilter').value,
                hideNotMyConcern: document.getElementById('hideNotMyConcern').checked ? 'true' : 'false',
                hidePendingBill: document.getElementById('hidePendingBill').checked ? 'true' : 'false'
            };

            // Remove empty filters (but keep hide filters even if false)
            Object.keys(currentFilters).forEach(key => {
                if (!currentFilters[key] && !key.startsWith('hide')) {
                    delete currentFilters[key];
                }
            });

            currentPage = 0; // Reset to first page
            loadLineItems();
        }

        function clearFilters() {
            document.getElementById('searchFilter').value = '';
            document.getElementById('poNumberFilter').value = '';
            document.getElementById('vendorFilter').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('skuFilter').value = '';
            document.getElementById('receivedFilter').value = '';
            document.getElementById('hideNotMyConcern').checked = true;
            document.getElementById('hidePendingBill').checked = true;

            currentFilters = {};
            currentPage = 0;
            loadLineItems();
        }

        function previousPage() {
            if (currentPage > 0) {
                currentPage--;
                loadLineItems();
            }
        }

        function nextPage() {
            if ((currentPage + 1) * itemsPerPage < totalItems) {
                currentPage++;
                loadLineItems();
            }
        }

        async function updateSKU(lineItemId, sku) {
            try {
                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/sku`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sku: sku || '' })
                });

                if (!response.ok) {
                    const error = await response.json();
                    alert('Error updating SKU: ' + error.error);
                    loadLineItems(); // Reload to revert changes
                }
            } catch (error) {
                console.error('Error updating SKU:', error);
                alert('Error updating SKU');
                loadLineItems();
            }
        }

        async function updateItemStatus(lineItemId, itemStatus) {
            try {
                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/item-status`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ itemStatus: itemStatus || '' })
                });

                if (response.ok) {
                    // Reload the current view to show the status badge
                    loadLineItems();
                } else {
                    const error = await response.json();
                    alert('Error updating item status: ' + error.error);
                    loadLineItems();
                }
            } catch (error) {
                console.error('Error updating item status:', error);
                alert('Error updating item status');
                loadLineItems();
            }
        }

        async function updateETA(lineItemId, eta) {
            try {
                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/eta`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ eta: eta || null })
                });

                if (!response.ok) {
                    const error = await response.json();
                    alert('Error updating ETA: ' + error.error);
                    loadLineItems();
                }
            } catch (error) {
                console.error('Error updating ETA:', error);
                alert('Error updating ETA');
                loadLineItems();
            }
        }

        async function updateItemNotes(lineItemId, notes) {
            try {
                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/notes`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ notes: notes || '' })
                });

                if (!response.ok) {
                    const error = await response.json();
                    alert('Error updating notes: ' + error.error);
                    loadLineItems();
                }
            } catch (error) {
                console.error('Error updating notes:', error);
                alert('Error updating notes');
                loadLineItems();
            }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Add event listeners for filter inputs
        document.getElementById('searchFilter').addEventListener('input', () => {
            clearTimeout(window.searchTimeout);
            window.searchTimeout = setTimeout(applyFilters, 500);
        });

        // Add event listeners for hide filter checkboxes
        document.getElementById('hideNotMyConcern').addEventListener('change', applyFilters);
        document.getElementById('hidePendingBill').addEventListener('change', applyFilters);

        // Load initial data
        document.addEventListener('DOMContentLoaded', () => {
            // Load status options first
            loadLineItemStatusOptions();

            // Set initial filters to match the default checkbox states
            currentFilters = {
                hideNotMyConcern: 'true',
                hidePendingBill: 'true'
            };
            loadLineItems();
        });

        // Navigation accordion functionality
        function toggleAccordion(accordionId) {
            const accordion = document.getElementById(accordionId);
            const button = accordion.previousElementSibling;
            
            // Close all other accordions
            document.querySelectorAll('.nav-accordion-content, .user-dropdown-content').forEach(content => {
                if (content.id !== accordionId) {
                    content.classList.remove('show');
                    const otherButton = content.previousElementSibling;
                    if (otherButton) otherButton.classList.remove('active');
                }
            });
            
            // Toggle current accordion
            accordion.classList.toggle('show');
            button.classList.toggle('active');
        }

        // Close accordions when clicking outside
        document.addEventListener('click', function(event) {
            const isAccordionButton = event.target.closest('.nav-accordion-btn, .user-dropdown');
            if (!isAccordionButton) {
                document.querySelectorAll('.nav-accordion-content, .user-dropdown-content').forEach(content => {
                    content.classList.remove('show');
                    const button = content.previousElementSibling;
                    if (button) button.classList.remove('active');
                });
            }
        });
    </script>
    
    <!-- Bootstrap JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>