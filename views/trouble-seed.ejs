<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Trouble Seed Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f8f9fa;
        }

        /* Navigation Styles */
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            position: sticky;
            top: 0;
            background: white;
            z-index: 1000;
            padding: 15px 0;
            border-bottom: 1px solid #dee2e6;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            flex-wrap: wrap;
            gap: 15px;
        }

        .header h1 {
            margin: 0;
            flex-shrink: 0;
            color: #007bff;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* P.O.D. Button Styles */
        .pod-button {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            white-space: nowrap;
        }

        .pod-button:hover {
            background: linear-gradient(135deg, #218838, #1ea583);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            color: white;
            text-decoration: none;
        }

        .pod-button .arrow {
            font-size: 12px;
            transition: transform 0.3s ease;
        }

        .pod-button:hover .arrow {
            transform: translateX(-2px);
        }

        /* Dashboard Content Styles */

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            border-left: 4px solid #dc3545;
            transition: transform 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
        }

        .stat-card.no-eta {
            border-left-color: #6c757d;
        }

        .stat-card.approaching-soon {
            border-left-color: #ff6b35;
        }

        .stat-card.approaching {
            border-left-color: #ffc107;
        }

        .stat-card.overdue {
            border-left-color: #dc3545;
        }

        .stat-card.needs-followup {
            border-left-color: #9c27b0;
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: #333;
            line-height: 1;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #666;
            margin-top: 5px;
        }

        .filters-section {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        .category-tabs {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        .category-tab {
            padding: 10px 20px;
            border: 2px solid #dee2e6;
            border-radius: 25px;
            background: white;
            color: #666;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            position: relative;
        }

        .category-tab:hover {
            border-color: #dc3545;
            color: #dc3545;
            text-decoration: none;
        }

        .category-tab.active {
            background: #dc3545;
            border-color: #dc3545;
            color: white;
        }

        .tab-badge {
            background: rgba(255, 255, 255, 0.2);
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.8rem;
            margin-left: 8px;
        }

        .tab-badge.active {
            background: rgba(255, 255, 255, 0.3);
        }

        .po-section {
            background: white;
            border-radius: 12px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            overflow: hidden;
        }

        .po-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .po-info h3 {
            margin: 0;
            color: #333;
            font-size: 1.3rem;
        }

        .vendor-info {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 5px;
        }

        .vendor-contact-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.8rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .items-list {
            padding: 0;
            margin: 0;
        }

        .item-row {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #f1f3f4;
            transition: background-color 0.2s ease;
        }

        .item-row:hover {
            background: #f8f9fa;
        }

        .item-row:last-child {
            border-bottom: none;
        }

        .item-info {
            flex: 1;
        }

        .item-memo {
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .item-details {
            font-size: 0.9rem;
            color: #666;
        }

        .eta-info {
            text-align: right;
            min-width: 150px;
        }

        .eta-date {
            font-weight: 600;
            margin-bottom: 2px;
        }

        .eta-status {
            font-size: 0.8rem;
            padding: 2px 8px;
            border-radius: 10px;
            font-weight: 500;
        }

        .eta-status.no-eta {
            background: #6c757d;
            color: white;
        }

        .eta-status.approaching-soon {
            background: #ff6b35;
            color: white;
        }

        .eta-status.approaching {
            background: #ffc107;
            color: #333;
        }

        .eta-status.overdue {
            background: #dc3545;
            color: white;
        }

        .eta-status.future {
            background: #28a745;
            color: white;
        }

        .item-actions {
            display: flex;
            gap: 5px;
            margin-left: 15px;
        }

        .action-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-update-eta {
            background: #007bff;
            color: white;
        }

        .btn-contact-vendor {
            background: #28a745;
            color: white;
        }

        .btn-mark-received {
            background: #6f42c1;
            color: white;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.3;
        }

        .back-nav {
            margin-bottom: 20px;
        }

        .back-nav a {
            color: #666;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-weight: 500;
            transition: color 0.2s ease;
        }

        .back-nav a:hover {
            color: #dc3545;
        }

        @media (max-width: 768px) {
            .category-tabs {
                flex-direction: column;
            }

            .category-tab {
                text-align: center;
            }

            .po-header {
                flex-direction: column;
                align-items: stretch;
            }

            .item-row {
                flex-direction: column;
                align-items: stretch;
                gap: 10px;
            }

            .eta-info {
                text-align: left;
            }

            .item-actions {
                margin-left: 0;
                justify-content: flex-start;
            }
        }

        /* Email Generator Styles */
        .email-generator {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            margin-bottom: 30px;
            overflow: hidden;
        }

        .email-generator-header {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 20px;
            border-bottom: 1px solid #dee2e6;
        }

        .email-generator-header h4 {
            margin: 0;
            font-size: 1.3rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .email-content {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.6;
            white-space: pre-wrap;
            margin: 20px;
            min-height: 200px;
            max-height: 400px;
            overflow-y: auto;
            word-wrap: break-word;
        }

        .email-actions {
            padding: 20px;
            border-top: 1px solid #f1f3f4;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .email-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease;
        }

        .email-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .btn-copy {
            background: #28a745;
            color: white;
        }

        .btn-copy:hover {
            background: #218838;
        }

        .btn-clear {
            background: #6c757d;
            color: white;
        }

        .btn-clear:hover {
            background: #5a6268;
        }

        .btn-generate-all {
            background: #007bff;
            color: white;
        }

        .btn-generate-all:hover {
            background: #0056b3;
        }

        .btn-copy.copied {
            background: #20c997;
            color: white;
        }

        .po-selector-info {
            padding: 20px;
            color: #6c757d;
            font-style: italic;
            text-align: center;
        }

        /* Navigation Styles from Receiving Dashboard */
        .header {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
            padding: 15px 0;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .header h1 {
            margin: 0;
            font-size: 2.2rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 15px;
            flex-shrink: 0;
        }

        /* P.O.D. Button Styles */
        .pod-button {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            white-space: nowrap;
        }

        .pod-button:hover {
            background: linear-gradient(135deg, #218838, #1ea583);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            color: white;
            text-decoration: none;
        }

        .pod-button .arrow {
            font-size: 12px;
            transition: transform 0.3s ease;
        }

        .pod-button:hover .arrow {
            transform: translateX(-2px);
        }

        .navigation-container {
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }

        .nav-section {
            position: relative;
        }

        .nav-accordion-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            min-width: 120px;
            justify-content: space-between;
        }

        .nav-accordion-btn:hover {
            background: #218838;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .nav-accordion-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            min-width: 220px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-radius: 6px;
            border: 1px solid #dee2e6;
            z-index: 1001;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            margin-top: 5px;
        }

        .nav-accordion-content.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .nav-accordion-item {
            display: block;
            padding: 12px 16px;
            color: #495057;
            text-decoration: none;
            border-bottom: 1px solid #f1f3f4;
            transition: all 0.2s ease;
        }

        .nav-accordion-item:hover {
            background: #f8f9fa;
            color: #007bff;
            text-decoration: none;
            padding-left: 20px;
        }

        .nav-accordion-item:last-child {
            border-bottom: none;
        }

        .nav-accordion-item.active {
            background: #fff3cd;
            color: #856404;
            font-weight: 600;
        }

        .nav-accordion-divider {
            height: 1px;
            background: #dee2e6;
            margin: 4px 0;
        }

        .nav-imports-btn {
            background: #17a2b8;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            min-width: 120px;
            justify-content: space-between;
        }

        .nav-imports-btn:hover {
            background: #138496;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .nav-dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            min-width: 220px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-radius: 6px;
            border: 1px solid #dee2e6;
            z-index: 1001;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            margin-top: 5px;
        }

        .nav-dropdown-content.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .nav-dropdown-item {
            display: block;
            padding: 12px 16px;
            color: #495057;
            text-decoration: none;
            border-bottom: 1px solid #f1f3f4;
            transition: all 0.2s ease;
            background: none;
            border: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
        }

        .nav-dropdown-item:hover {
            background: #f8f9fa;
            color: #007bff;
            text-decoration: none;
            padding-left: 20px;
        }

        .refresh-btn {
            background: #20c997;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .refresh-btn:hover {
            background: #1ea085;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #007bff;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 14px;
            flex-shrink: 0;
            position: relative;
        }

        .user-status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #28a745;
            position: absolute;
            bottom: -1px;
            right: -1px;
            border: 2px solid white;
        }

        .nav-accordion-divider {
            height: 1px;
            background: #f1f3f4;
            margin: 5px 0;
        }

        /* Email Template Management Styles */
        .template-controls {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .template-selector {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .template-selector label {
            font-weight: 600;
            color: #495057;
            margin: 0;
        }

        .template-dropdown {
            flex: 1;
            min-width: 200px;
            padding: 8px 12px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            background: white;
            font-size: 14px;
        }

        .template-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn-template {
            padding: 6px 12px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            background: white;
            color: #495057;
            font-size: 13px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
            transition: all 0.2s ease;
        }

        .btn-template:hover {
            background: #e9ecef;
            color: #495057;
            text-decoration: none;
        }

        .btn-template.primary {
            background: #007bff;
            color: white;
            border-color: #007bff;
        }

        .btn-template.primary:hover {
            background: #0056b3;
            border-color: #0056b3;
            color: white;
        }

        .btn-template.success {
            background: #28a745;
            color: white;
            border-color: #28a745;
        }

        .btn-template.success:hover {
            background: #218838;
            border-color: #218838;
            color: white;
        }

        .template-editor {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            overflow: hidden;
            background: white;
        }

        .editor-tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
        }

        .editor-tab {
            padding: 10px 20px;
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            border-bottom: 3px solid transparent;
            transition: all 0.2s ease;
        }

        .editor-tab.active {
            color: #007bff;
            border-bottom-color: #007bff;
            background: white;
        }

        .editor-tab:hover:not(.active) {
            color: #495057;
            background: #e9ecef;
        }

        .editor-content {
            padding: 0;
        }

        .tab-pane {
            display: none;
            padding: 20px;
        }

        .tab-pane.active {
            display: block;
        }

        .template-form {
            display: grid;
            gap: 15px;
        }

        .form-group-template {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .form-group-template label {
            font-weight: 600;
            color: #495057;
            font-size: 14px;
        }

        .form-control-template {
            padding: 10px 12px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .form-control-template:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .template-textarea {
            min-height: 300px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 13px;
            line-height: 1.5;
            resize: vertical;
        }

        .preview-content {
            background: #fff;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            padding: 20px;
            min-height: 300px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
        }

        .preview-content h1, .preview-content h2, .preview-content h3 {
            margin-top: 0;
            color: #333;
        }

        .preview-content p {
            margin: 10px 0;
        }

        .preview-content ul, .preview-content ol {
            margin: 10px 0;
            padding-left: 20px;
        }

        .variables-help {
            background: #f8f9fa;
            border-left: 4px solid #007bff;
            padding: 20px;
            border-radius: 0 6px 6px 0;
        }

        .variables-help h4 {
            margin-top: 0;
            color: #007bff;
            font-size: 16px;
        }

        .variable-list {
            display: grid;
            gap: 15px;
            margin-top: 15px;
        }

        .variable-item {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            padding: 12px;
        }

        .variable-name {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            color: #e83e8c;
            font-weight: 600;
            font-size: 13px;
        }

        .variable-description {
            color: #6c757d;
            font-size: 13px;
            margin-top: 5px;
        }

        .variable-example {
            background: #f8f9fa;
            border-radius: 4px;
            padding: 8px;
            margin-top: 8px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 12px;
            color: #495057;
        }

        .template-status {
            padding: 10px 15px;
            border-radius: 6px;
            margin-bottom: 15px;
            font-size: 14px;
            display: none;
        }

        .template-status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
            display: block;
        }

        .template-status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            display: block;
        }

        .template-metadata {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        @media (max-width: 768px) {
            .template-selector {
                flex-direction: column;
                align-items: stretch;
            }

            .template-actions {
                justify-content: center;
            }

            .template-metadata {
                grid-template-columns: 1fr;
            }

            .editor-tabs {
                flex-wrap: wrap;
            }

            .editor-tab {
                flex: 1;
                min-width: 100px;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>
                <i class="fas fa-exclamation-triangle"></i>
                Enhanced Trouble Seed Dashboard
            </h1>
            
            <!-- P.O.D. Button -->
            <a href="/purchase-orders" class="pod-button">
                <span class="arrow">←</span>
                <span>P.O.D.</span>
            </a>
            
            <div class="d-flex align-items-center justify-content-between flex-grow-1">
                <%- include('partials/navigation', { currentPage: 'trouble-seed' }) %>
            </div>
        </div>
        
        <!-- Dashboard Description -->
        <div class="mb-4">
            <p class="mb-0">Track and manage problematic seeds with advanced filtering and vendor communication</p>
        </div>

    <div class="container-fluid">
        <!-- Statistics Section -->
        <div class="stats-grid">
            <div class="stat-card no-eta">
                <div class="stat-number"><%= stats.noEtaCount %></div>
                <div class="stat-label">No ETA Provided</div>
            </div>
            <div class="stat-card approaching-soon">
                <div class="stat-number"><%= stats.approachingSoonCount %></div>
                <div class="stat-label">ETA Within 7 Days</div>
            </div>
            <div class="stat-card approaching">
                <div class="stat-number"><%= stats.approachingCount %></div>
                <div class="stat-label">ETA 8-14 Days</div>
            </div>
            <div class="stat-card overdue">
                <div class="stat-number"><%= stats.overdueCount %></div>
                <div class="stat-label">Overdue Items</div>
            </div>
            <div class="stat-card needs-followup">
                <div class="stat-number"><%= stats.needsFollowupCount %></div>
                <div class="stat-label">Need Vendor Follow-up</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalPOs %></div>
                <div class="stat-label">Affected POs</div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="filters-section">
            <h4><i class="fas fa-filter"></i> Filter Options</h4>
            
            <!-- Category Tabs -->
            <div class="category-tabs">
                <a href="?category=all&vendor=<%= currentFilters.vendor %>&sortBy=<%= currentFilters.sortBy %>" 
                   class="category-tab <%= currentFilters.category === 'all' ? 'active' : '' %>">
                    All Items
                    <span class="tab-badge <%= currentFilters.category === 'all' ? 'active' : '' %>"><%= stats.totalItems %></span>
                </a>
                <a href="?category=noEta&vendor=<%= currentFilters.vendor %>&sortBy=<%= currentFilters.sortBy %>" 
                   class="category-tab <%= currentFilters.category === 'noEta' ? 'active' : '' %>">
                    No ETA
                    <span class="tab-badge <%= currentFilters.category === 'noEta' ? 'active' : '' %>"><%= stats.noEtaCount %></span>
                </a>
                <a href="?category=approachingSoon&vendor=<%= currentFilters.vendor %>&sortBy=<%= currentFilters.sortBy %>" 
                   class="category-tab <%= currentFilters.category === 'approachingSoon' ? 'active' : '' %>">
                    Approaching Soon
                    <span class="tab-badge <%= currentFilters.category === 'approachingSoon' ? 'active' : '' %>"><%= stats.approachingSoonCount %></span>
                </a>
                <a href="?category=approaching&vendor=<%= currentFilters.vendor %>&sortBy=<%= currentFilters.sortBy %>" 
                   class="category-tab <%= currentFilters.category === 'approaching' ? 'active' : '' %>">
                    Approaching
                    <span class="tab-badge <%= currentFilters.category === 'approaching' ? 'active' : '' %>"><%= stats.approachingCount %></span>
                </a>
                <a href="?category=overdue&vendor=<%= currentFilters.vendor %>&sortBy=<%= currentFilters.sortBy %>" 
                   class="category-tab <%= currentFilters.category === 'overdue' ? 'active' : '' %>">
                    Overdue
                    <span class="tab-badge <%= currentFilters.category === 'overdue' ? 'active' : '' %>"><%= stats.overdueCount %></span>
                </a>
                <a href="?category=needsFollowup&vendor=<%= currentFilters.vendor %>&sortBy=<%= currentFilters.sortBy %>" 
                   class="category-tab <%= currentFilters.category === 'needsFollowup' ? 'active' : '' %>">
                    Needs Follow-up
                    <span class="tab-badge <%= currentFilters.category === 'needsFollowup' ? 'active' : '' %>"><%= stats.needsFollowupCount %></span>
                </a>
            </div>

            <!-- Additional Filters -->
            <div class="row">
                <div class="col-md-4">
                    <label class="form-label">Filter by Vendor:</label>
                    <select class="form-select" onchange="updateFilter('vendor', this.value)">
                        <option value="all" <%= currentFilters.vendor === 'all' ? 'selected' : '' %>>All Vendors</option>
                        <% uniqueVendors.forEach(vendor => { %>
                            <option value="<%= vendor %>" <%= currentFilters.vendor === vendor ? 'selected' : '' %>><%= vendor %></option>
                        <% }); %>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Sort by:</label>
                    <select class="form-select" onchange="updateFilter('sortBy', this.value)">
                        <option value="poNumber" <%= currentFilters.sortBy === 'poNumber' ? 'selected' : '' %>>PO Number</option>
                        <option value="vendor" <%= currentFilters.sortBy === 'vendor' ? 'selected' : '' %>>Vendor</option>
                        <option value="eta" <%= currentFilters.sortBy === 'eta' ? 'selected' : '' %>>ETA Date</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">&nbsp;</label>
                    <div>
                        <button class="btn btn-success" onclick="exportData()">
                            <i class="fas fa-download"></i> Export Data
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Email Generator Section -->
        <div class="email-generator">
            <div class="email-generator-header">
                <h4>
                    <i class="fas fa-envelope"></i>
                    Enhanced Email Content Generator
                </h4>
                <div class="template-controls">
                    <label for="templateSelect">Email Template:</label>
                    <select id="templateSelect" onchange="handleTemplateChange()">
                        <option value="">Loading templates...</option>
                    </select>
                    <button class="template-btn" onclick="openTemplateManager()" title="Manage Templates">
                        <i class="fas fa-cog"></i>
                    </button>
                    <button class="template-btn" onclick="createNewTemplate()" title="Create New Template">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </div>
            
            <!-- Template Preview/Edit Section -->
            <div class="template-editor" id="templateEditor" style="display: none;">
                <div class="editor-tabs">
                    <button class="tab-btn active" onclick="switchTab('preview')">Preview</button>
                    <button class="tab-btn" onclick="switchTab('edit')">Edit Template</button>
                    <button class="tab-btn" onclick="switchTab('variables')">Variables</button>
                </div>
                
                <div class="tab-content">
                    <div id="previewTab" class="tab-pane active">
                        <div class="template-preview">
                            <div class="preview-subject">
                                <label>Subject:</label>
                                <div id="subjectPreview"></div>
                            </div>
                            <div class="preview-body">
                                <label>Email Body:</label>
                                <div id="bodyPreview"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div id="editTab" class="tab-pane">
                        <div class="template-form">
                            <div class="form-group">
                                <label for="templateName">Template Name:</label>
                                <input type="text" id="templateName" placeholder="Enter template name">
                            </div>
                            <div class="form-group">
                                <label for="templateSubject">Subject:</label>
                                <input type="text" id="templateSubject" placeholder="Enter email subject with variables like {{poNumber}}">
                            </div>
                            <div class="form-group">
                                <label for="templateBody">Email Body:</label>
                                <textarea id="templateBody" rows="10" placeholder="Enter email body with variables and conditional logic"></textarea>
                            </div>
                            <div class="form-actions">
                                <button class="template-btn save" onclick="saveTemplate()">
                                    <i class="fas fa-save"></i> Save Template
                                </button>
                                <button class="template-btn cancel" onclick="cancelEdit()">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div id="variablesTab" class="tab-pane">
                        <div class="variables-help">
                            <h5>Available Variables:</h5>
                            <div class="variable-list">
                                <div class="variable-item"><code>{{poNumber}}</code> - Purchase Order Number</div>
                                <div class="variable-item"><code>{{vendor}}</code> - Vendor Name</div>
                                <div class="variable-item"><code>{{totalItems}}</code> - Total Outstanding Items</div>
                                <div class="variable-item"><code>{{currentDate}}</code> - Current Date</div>
                                <div class="variable-item"><code>{{currentTime}}</code> - Current Time</div>
                                <div class="variable-item"><code>{{senderName}}</code> - Your Name</div>
                                <div class="variable-item"><code>{{senderTitle}}</code> - Your Title</div>
                                <div class="variable-item"><code>{{senderContact}}</code> - Your Contact Info</div>
                            </div>
                            <h5>Conditional Logic:</h5>
                            <div class="logic-examples">
                                <div class="logic-item">
                                    <code>{{#if noEtaItems}}...{{/if}}</code> - Show only if items without ETA exist
                                </div>
                                <div class="logic-item">
                                    <code>{{#each noEtaItems}}{{memo}}{{/each}}</code> - Loop through items
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="email-content" id="emailContent">
                Select a PO below to generate email content for vendor communication...
            </div>
            <div class="email-actions">
                <button class="email-btn btn-copy" onclick="copyToClipboard()" id="copyBtn" disabled>
                    <i class="fas fa-copy"></i> Copy to Clipboard
                </button>
                <button class="email-btn btn-clear" onclick="clearEmailSelection()">
                    <i class="fas fa-undo"></i> Clear Selection
                </button>
                <button class="email-btn btn-generate-all" onclick="generateAllPOsEmail()">
                    <i class="fas fa-envelope-bulk"></i> Generate Summary for All POs
                </button>
                <button class="email-btn btn-edit-content" onclick="editGeneratedEmail()" id="editBtn" disabled>
                    <i class="fas fa-edit"></i> Edit Content
                </button>
            </div>
        </div>

        <!-- Results Section -->
        <% if (troubleByPO.length === 0) { %>
            <div class="empty-state">
                <i class="fas fa-seedling"></i>
                <h3>No Trouble Seeds Found</h3>
                <p>All items in this category are on track! 🎉</p>
            </div>
        <% } else { %>
            <% troubleByPO.forEach(po => { %>
                <div class="po-section">
                    <div class="po-header">
                        <div class="po-info">
                            <h3>
                                <% if (po.poUrl) { %>
                                    <a href="<%= po.poUrl %>" target="_blank" style="color: inherit; text-decoration: none;">
                                        PO #<%= po.poNumber %> <i class="fas fa-external-link-alt" style="font-size: 0.8rem;"></i>
                                    </a>
                                <% } else { %>
                                    PO #<%= po.poNumber %>
                                <% } %>
                            </h3>
                            <div class="vendor-info">
                                <strong><%= po.vendor %></strong>
                                <% if (po.vendorData && (po.vendorData.mainEmail || po.vendorData.mainPhone)) { %>
                                    <% if (po.vendorData.mainEmail) { %>
                                        <a href="mailto:<%= po.vendorData.mainEmail %>" class="vendor-contact-btn">
                                            <i class="fas fa-envelope"></i> Email
                                        </a>
                                    <% } %>
                                    <% if (po.vendorData.mainPhone) { %>
                                        <a href="tel:<%= po.vendorData.mainPhone %>" class="vendor-contact-btn">
                                            <i class="fas fa-phone"></i> Call
                                        </a>
                                    <% } %>
                                <% } %>
                                <% if (po.poDate) { %>
                                    <span class="text-muted">• PO Date: <%= new Date(po.poDate).toLocaleDateString() %></span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    
                    <div class="items-list">
                        <% po.items.forEach(item => { %>
                            <div class="item-row">
                                <div class="item-info">
                                    <div class="item-memo"><%= item.memo %></div>
                                    <div class="item-details">
                                        <% if (item.sku) { %>SKU: <%= item.sku %> • <% } %>
                                        Status: <%= item.itemStatus || 'Pending' %>
                                        <% if (item.notes) { %>• Notes: <%= item.notes %><% } %>
                                    </div>
                                </div>
                                
                                <div class="eta-info">
                                    <% if (item.eta) { %>
                                        <div class="eta-date">
                                            <%= new Date(item.eta).toLocaleDateString() %>
                                            <% if (item.daysFromToday !== null) { %>
                                                <% const days = Math.round(item.daysFromToday); %>
                                                <% if (days < 0) { %>
                                                    (<%= Math.abs(days) %> days overdue)
                                                <% } else if (days === 0) { %>
                                                    (Today!)
                                                <% } else { %>
                                                    (<%= days %> days)
                                                <% } %>
                                            <% } %>
                                        </div>
                                    <% } else { %>
                                        <div class="eta-date text-muted">No ETA</div>
                                    <% } %>
                                    <div class="eta-status <%= item.etaStatus %>">
                                        <% if (item.etaStatus === 'no-eta') { %>No ETA
                                        <% } else if (item.etaStatus === 'approaching-soon') { %>Soon
                                        <% } else if (item.etaStatus === 'approaching') { %>Approaching
                                        <% } else if (item.etaStatus === 'overdue') { %>Overdue
                                        <% } else { %>Future
                                        <% } %>
                                    </div>
                                </div>
                                
                                <div class="item-actions">
                                    <button class="action-btn btn-update-eta" onclick="updateETA('<%= item._id %>')">
                                        <i class="fas fa-calendar-alt"></i> Update ETA
                                    </button>
                                    <% if (po.vendorData && (po.vendorData.mainEmail || po.vendorData.mainPhone)) { %>
                                        <button class="action-btn btn-contact-vendor" onclick="contactVendor('<%= po.vendor %>', '<%= item.memo %>')">
                                            <i class="fas fa-phone"></i> Contact
                                        </button>
                                    <% } %>
                                    <button class="action-btn btn-mark-received" onclick="markReceived('<%= item._id %>')">
                                        <i class="fas fa-check"></i> Received
                                    </button>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            <% }); %>
        <% } %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function updateFilter(filterType, value) {
            const params = new URLSearchParams(window.location.search);
            params.set(filterType, value);
            window.location.href = '?' + params.toString();
        }

        function updateETA(itemId) {
            const newETA = prompt('Enter new ETA (YYYY-MM-DD format):');
            if (newETA) {
                fetch(`/purchase-orders/line-items/${itemId}/eta`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ eta: newETA })
                }).then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to update ETA');
                    }
                }).catch(error => {
                    console.error('Error:', error);
                    alert('Failed to update ETA');
                });
            }
        }

        function contactVendor(vendor, item) {
            const message = `Inquiry about ${item} - Please provide updated ETA`;
            alert(`Contact feature will be implemented to reach out to ${vendor} about: ${item}`);
        }

        function markReceived(itemId) {
            if (confirm('Mark this item as received?')) {
                fetch(`/purchase-orders/line-items/${itemId}/receive`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ received: true, receivedDate: new Date() })
                }).then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to mark item as received');
                    }
                }).catch(error => {
                    console.error('Error:', error);
                    alert('Failed to mark item as received');
                });
            }
        }

        function exportData() {
            alert('Export functionality will be implemented');
        }
        
        // Navigation JavaScript Functions
        function toggleAccordion(accordionId) {
            const accordion = document.getElementById(accordionId);
            const button = accordion.previousElementSibling;
            const icon = button.querySelector('.accordion-icon');
            
            if (accordion.style.display === 'block') {
                accordion.style.display = 'none';
                icon.textContent = '▼';
            } else {
                // Close all other accordions
                document.querySelectorAll('.nav-accordion-content').forEach(acc => {
                    acc.style.display = 'none';
                    const btn = acc.previousElementSibling;
                    if (btn) {
                        const icn = btn.querySelector('.accordion-icon');
                        if (icn) icn.textContent = '▼';
                    }
                });
                
                accordion.style.display = 'block';
                icon.textContent = '▲';
            }
        }

        function toggleImportsDropdown() {
            const dropdown = document.getElementById('importsDropdown');
            const icon = document.querySelector('.nav-imports-btn .dropdown-icon');
            
            if (dropdown.style.display === 'block') {
                dropdown.style.display = 'none';
                icon.textContent = '▼';
            } else {
                dropdown.style.display = 'block';
                icon.textContent = '▲';
            }
        }

        function openNetSuiteImportModal() {
            // Placeholder for NetSuite import functionality
            alert('NetSuite PO Form import functionality would be implemented here');
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            if (!event.target.closest('.nav-section')) {
                document.querySelectorAll('.nav-accordion-content, .nav-dropdown-content').forEach(dropdown => {
                    dropdown.style.display = 'none';
                });
                document.querySelectorAll('.accordion-icon, .dropdown-icon').forEach(icon => {
                    icon.textContent = '▼';
                });
            }
        });

        function closeAllDropdowns() {
            document.querySelectorAll('.nav-accordion-content, .nav-dropdown-content').forEach(dropdown => {
                dropdown.style.display = 'none';
            });
            document.querySelectorAll('.accordion-icon, .dropdown-icon').forEach(icon => {
                icon.textContent = '▼';
            });
        }

        // Email Generator Functions
        let selectedPOForEmail = null;
        const troubleData = <%- JSON.stringify(troubleByPO) %>;

        function selectPOForEmail(poNumber, element) {
            console.log('selectPOForEmail called with:', poNumber);
            selectedPOForEmail = troubleData.find(po => po.poNumber === poNumber);
            console.log('Found selectedPOForEmail:', selectedPOForEmail);

            if (!selectedPOForEmail) {
                console.log('No PO found for:', poNumber);
                return;
            }

            // Update UI - highlight selected PO
            document.querySelectorAll('.po-section').forEach(section => {
                section.style.border = '';
                section.style.boxShadow = '';
            });
            element.style.border = '2px solid #007bff';
            element.style.boxShadow = '0 4px 12px rgba(0, 123, 255, 0.15)';

            // Generate email content
            generateEmailContent(selectedPOForEmail);

            // Enable copy button
            document.getElementById('copyBtn').disabled = false;
        }

        function generateEmailContent(po) {
            // Count different types of items
            const noEtaItems = po.items.filter(item => item.etaStatus === 'no-eta');
            const overdueItems = po.items.filter(item => item.etaStatus === 'overdue');
            const needsFollowupItems = po.items.filter(item => item.etaStatus === 'needs-followup');

            const emailContent = `Subject: UPDATE NEEDED - Purchase Order ${po.poNumber} - Outstanding Items

Dear ${po.vendor},

I hope this email finds you well. I am writing to request an update on Purchase Order ${po.poNumber}, which currently shows as "Partially Received" in our system.

We have identified several items that require immediate attention:

${noEtaItems.length > 0 ? `DELIVERY DELAYS (No ETA Provided):
${noEtaItems.map(item => `• ${item.memo}${item.sku ? ` (SKU: ${item.sku})` : ''}`).join('\n')}

We urgently need estimated delivery dates for these items to update our customers and plan accordingly.

` : ''}${overdueItems.length > 0 ? `OVERDUE ITEMS:
${overdueItems.map(item => `• ${item.memo}${item.sku ? ` (SKU: ${item.sku})` : ''} - Expected: ${item.eta ? new Date(item.eta).toLocaleDateString() : 'N/A'}`).join('\n')}

These items are past their expected delivery dates. Please provide immediate updates.

` : ''}${needsFollowupItems.length > 0 ? `ITEMS REQUIRING FOLLOW-UP:
${needsFollowupItems.map(item => `• ${item.memo}${item.sku ? ` (SKU: ${item.sku})` : ''}`).join('\n')}

These items need your immediate attention and response.

` : ''}Could you please provide:
1. Updated delivery dates for delayed items
2. Status updates for overdue items
3. Alternative products for any discontinued items
4. Any other issues preventing completion of this order

This information is critical for our operations and customer commitments. Please respond within 24-48 hours.

Thank you for your prompt attention to this matter.

Best regards,
[Your Name]
[Your Title]
[Your Contact Information]

---
Purchase Order: ${po.poNumber}
Total Outstanding Items: ${po.items.length}
Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`;

            document.getElementById('emailContent').textContent = emailContent;
        }

        function generateAllPOsEmail() {
            if (troubleData.length === 0) {
                alert('No POs with trouble items found!');
                return;
            }

            const totalNoEtaItems = troubleData.reduce((sum, po) => 
                sum + po.items.filter(item => item.etaStatus === 'no-eta').length, 0);
            const totalOverdueItems = troubleData.reduce((sum, po) => 
                sum + po.items.filter(item => item.etaStatus === 'overdue').length, 0);
            const totalNeedsFollowupItems = troubleData.reduce((sum, po) => 
                sum + po.items.filter(item => item.etaStatus === 'needs-followup').length, 0);

            const emailContent = `Subject: URGENT - Multiple Purchase Orders Requiring Updates

Dear Team,

We have identified ${troubleData.length} Purchase Orders with outstanding issues requiring immediate vendor communication:

SUMMARY:
• Total POs requiring updates: ${troubleData.length}
• Items with no ETA: ${totalNoEtaItems}
• Overdue items: ${totalOverdueItems}
• Items needing follow-up: ${totalNeedsFollowupItems}

PURCHASE ORDERS REQUIRING ACTION:

${troubleData.map(po => {
    const noEta = po.items.filter(item => item.etaStatus === 'no-eta').length;
    const overdue = po.items.filter(item => item.etaStatus === 'overdue').length;
    const followup = po.items.filter(item => item.etaStatus === 'needs-followup').length;
    
    return `PO ${po.poNumber} - ${po.vendor}
• No ETA items: ${noEta}
• Overdue items: ${overdue}
• Needs follow-up: ${followup}
• Total issues: ${po.items.length}`;
}).join('\n\n')}

RECOMMENDED ACTIONS:
1. Contact each vendor immediately for updates
2. Request ETAs for all delayed items
3. Obtain status updates for overdue items
4. Update customers on any potential delays

Please use the individual PO email templates to contact each vendor separately.

Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`;

            document.getElementById('emailContent').textContent = emailContent;
            document.getElementById('copyBtn').disabled = false;
        }

        function copyToClipboard() {
            const emailContent = document.getElementById('emailContent').textContent;
            navigator.clipboard.writeText(emailContent).then(() => {
                const btn = document.getElementById('copyBtn');
                const originalHTML = btn.innerHTML;
                btn.innerHTML = '<i class="fas fa-check"></i> Copied!';
                btn.classList.add('copied');
                setTimeout(() => {
                    btn.innerHTML = originalHTML;
                    btn.classList.remove('copied');
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy: ', err);
                alert('Failed to copy to clipboard. Please select and copy manually.');
            });
        }

        function clearEmailSelection() {
            selectedPOForEmail = null;
            document.querySelectorAll('.po-section').forEach(section => {
                section.style.border = '';
                section.style.boxShadow = '';
            });
            document.getElementById('emailContent').textContent = 'Select a PO below to generate email content for vendor communication...';
            document.getElementById('copyBtn').disabled = true;
        }

        // Make PO sections clickable for email generation
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.po-section').forEach(section => {
                const poNumber = section.querySelector('h3').textContent.match(/PO #(\w+)/);
                if (poNumber) {
                    section.style.cursor = 'pointer';
                    section.title = 'Click to generate email for this PO';
                    section.addEventListener('click', (e) => {
                        // Don't trigger if clicking on buttons or links
                        if (e.target.tagName !== 'BUTTON' && e.target.tagName !== 'A' && !e.target.closest('button') && !e.target.closest('a')) {
                            selectPOForEmail(poNumber[1], section);
                        }
                    });
                }
            });

            // Email Template Management Functions
            let currentTemplates = [];
            let selectedTemplate = null;

            // Default templates for demo purposes (when MongoDB is not available)
            const defaultTemplates = [
                {
                    _id: 'template-1',
                    name: 'Standard Follow-up',
                    category: 'follow-up',
                    subject: 'UPDATE NEEDED - Purchase Order {{poNumber}} - Outstanding Items',
                    bodyTemplate: `Dear {{vendor}},

I hope this email finds you well. I am writing to request an update on Purchase Order {{poNumber}}, which currently shows as "Partially Received" in our system.

We have identified several items that require immediate attention:

{{#if noEtaItems}}
DELIVERY DELAYS (No ETA Provided):
{{#each noEtaItems}}
• {{memo}}{{#if sku}} (SKU: {{sku}}){{/if}}
{{/each}}

We urgently need estimated delivery dates for these items to update our customers and plan accordingly.
{{/if}}

{{#if overdueItems}}
OVERDUE ITEMS:
{{#each overdueItems}}
• {{memo}}{{#if sku}} (SKU: {{sku}}){{/if}} - Expected: {{eta}}
{{/each}}

These items are past their expected delivery dates. Please provide immediate updates.
{{/if}}

{{#if needsFollowupItems}}
ITEMS REQUIRING FOLLOW-UP:
{{#each needsFollowupItems}}
• {{memo}}{{#if sku}} (SKU: {{sku}}){{/if}}
{{/each}}

These items need your immediate attention and response.
{{/if}}

Could you please provide:
1. Updated delivery dates for delayed items
2. Status updates for overdue items
3. Alternative products for any discontinued items
4. Any other issues preventing completion of this order

This information is critical for our operations and customer commitments. Please respond within 24-48 hours.

Thank you for your prompt attention to this matter.

Best regards,
[Your Name]
[Your Title]
[Your Contact Information]

---
Purchase Order: {{poNumber}}
Total Outstanding Items: {{totalItems}}
Generated: {{currentDate}}`,
                    variables: ['poNumber', 'vendor', 'noEtaItems', 'overdueItems', 'needsFollowupItems', 'totalItems', 'currentDate'],
                    isDefault: true,
                    usageCount: 0
                },
                {
                    _id: 'template-2',
                    name: 'Urgent Escalation',
                    category: 'escalation',
                    subject: 'URGENT ESCALATION - Purchase Order {{poNumber}} - Immediate Response Required',
                    bodyTemplate: `URGENT ATTENTION REQUIRED

Dear {{vendor}},

This is an ESCALATED follow-up regarding Purchase Order {{poNumber}}. We have not received adequate response to our previous communications.

CRITICAL ISSUES:
{{#if noEtaItems}}
Items WITHOUT delivery dates: {{noEtaItems.length}}
{{/if}}
{{#if overdueItems}}
OVERDUE items: {{overdueItems.length}}
{{/if}}

We require IMMEDIATE response within 24 hours or we will need to consider alternative sourcing options.

Contact: [Your Phone] | [Your Email]

{{poNumber}} - {{currentDate}}`,
                    variables: ['poNumber', 'vendor', 'noEtaItems', 'overdueItems', 'currentDate'],
                    isDefault: true,
                    usageCount: 0
                },
                {
                    _id: 'template-3',
                    name: 'Summary Report',
                    category: 'summary',
                    subject: 'Weekly Purchase Order Status Summary',
                    bodyTemplate: `Weekly Status Summary

Dear {{vendor}},

This is a summary of outstanding items across multiple purchase orders:

Total Outstanding POs: {{totalPOs}}
Total Outstanding Items: {{totalItems}}

{{#each poSummary}}
PO {{poNumber}}: {{itemCount}} items pending
{{/each}}

Please review and provide updates for all outstanding items.

Best regards,
[Your Name]`,
                    variables: ['vendor', 'totalPOs', 'totalItems', 'poSummary', 'currentDate'],
                    isDefault: true,
                    usageCount: 0
                }
            ];

            async function loadTemplates() {
                try {
                    const response = await fetch('/api/email-templates');
                    if (response.ok) {
                        currentTemplates = await response.json();
                        populateTemplateSelector();
                        showTemplateStatus('Templates loaded successfully', 'success');
                    } else {
                        console.error('Failed to load templates, using default templates');
                        currentTemplates = defaultTemplates;
                        populateTemplateSelector();
                        showTemplateStatus('Using default templates (MongoDB not connected)', 'error');
                    }
                } catch (error) {
                    console.error('Error loading templates, using default templates:', error);
                    currentTemplates = defaultTemplates;
                    populateTemplateSelector();
                    showTemplateStatus('Using default templates (MongoDB not connected)', 'error');
                }
            }

            function populateTemplateSelector() {
                const selector = document.getElementById('templateSelector');
                if (!selector) return;

                selector.innerHTML = '<option value="">Select a template...</option>';
                currentTemplates.forEach(template => {
                    const option = document.createElement('option');
                    option.value = template._id;
                    option.textContent = `${template.name} (${template.category})`;
                    selector.appendChild(option);
                });
            }

            function handleTemplateChange() {
                const selector = document.getElementById('templateSelector');
                const templateId = selector.value;
                
                if (!templateId) {
                    selectedTemplate = null;
                    clearTemplateEditor();
                    return;
                }

                selectedTemplate = currentTemplates.find(t => t._id === templateId);
                if (selectedTemplate) {
                    loadTemplateIntoEditor(selectedTemplate);
                    updatePreview();
                }
            }

            function loadTemplateIntoEditor(template) {
                document.getElementById('templateName').value = template.name;
                document.getElementById('templateCategory').value = template.category;
                document.getElementById('templateSubject').value = template.subject;
                document.getElementById('templateBody').value = template.bodyTemplate;
            }

            function clearTemplateEditor() {
                document.getElementById('templateName').value = '';
                document.getElementById('templateCategory').value = '';
                document.getElementById('templateSubject').value = '';
                document.getElementById('templateBody').value = '';
                document.getElementById('templatePreview').innerHTML = '<p>Select a template to see preview...</p>';
            }

            function updatePreview() {
                if (!selectedTemplate || !selectedPOForEmail) {
                    document.getElementById('templatePreview').innerHTML = '<p>Select a template and PO to see preview...</p>';
                    return;
                }

                const previewContent = generatePreviewContent(selectedTemplate, selectedPOForEmail);
                document.getElementById('templatePreview').innerHTML = previewContent;
            }

            function generatePreviewContent(template, poData) {
                const noEtaItems = poData.items.filter(item => item.etaStatus === 'no-eta');
                const overdueItems = poData.items.filter(item => item.etaStatus === 'overdue');
                const needsFollowupItems = poData.items.filter(item => item.etaStatus === 'needs-followup');

                const variables = {
                    poNumber: poData.poNumber,
                    vendor: poData.vendor,
                    noEtaItems: noEtaItems,
                    overdueItems: overdueItems,
                    needsFollowupItems: needsFollowupItems,
                    totalItems: poData.items.length,
                    currentDate: new Date().toLocaleDateString() + ' ' + new Date().toLocaleTimeString()
                };

                let content = `<h3>Subject: ${substituteVariables(template.subject, variables)}</h3>`;
                content += `<div style="white-space: pre-line; font-family: inherit;">${substituteVariables(template.bodyTemplate, variables)}</div>`;
                
                return content;
            }

            function substituteVariables(text, variables) {
                let result = text;
                
                // Simple variable substitution
                Object.keys(variables).forEach(key => {
                    const regex = new RegExp(`{{${key}}}`, 'g');
                    result = result.replace(regex, variables[key] || '');
                });

                // Handle conditional blocks
                result = result.replace(/{{#if (\w+)}}([\s\S]*?){{\/if}}/g, (match, condition, content) => {
                    const value = variables[condition];
                    if (value && (Array.isArray(value) ? value.length > 0 : true)) {
                        return content;
                    }
                    return '';
                });

                // Handle each loops
                result = result.replace(/{{#each (\w+)}}([\s\S]*?){{\/each}}/g, (match, arrayName, itemTemplate) => {
                    const array = variables[arrayName];
                    if (!Array.isArray(array)) return '';
                    
                    return array.map(item => {
                        let itemContent = itemTemplate;
                        Object.keys(item).forEach(key => {
                            const regex = new RegExp(`{{${key}}}`, 'g');
                            itemContent = itemContent.replace(regex, item[key] || '');
                        });
                        return itemContent;
                    }).join('');
                });

                return result;
            }

            function showTemplateStatus(message, type) {
                const statusEl = document.getElementById('templateStatus');
                if (!statusEl) return;

                statusEl.textContent = message;
                statusEl.className = `template-status ${type}`;
                
                setTimeout(() => {
                    statusEl.style.display = 'none';
                }, 3000);
            }

            function switchTab(tabName) {
                // Hide all tab panes
                document.querySelectorAll('.tab-pane').forEach(pane => {
                    pane.classList.remove('active');
                });
                
                // Remove active class from all tabs
                document.querySelectorAll('.editor-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                
                // Show selected tab pane and activate tab
                document.getElementById(tabName + 'Tab').classList.add('active');
                document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
                
                if (tabName === 'preview') {
                    updatePreview();
                }
            }

            function useTemplate() {
                if (!selectedTemplate || !selectedPOForEmail) {
                    alert('Please select both a template and a PO first.');
                    return;
                }

                const generatedContent = generateEmailContentFromTemplate(selectedTemplate, selectedPOForEmail);
                document.getElementById('emailContent').textContent = generatedContent;
                
                // Enable copy button
                document.getElementById('copyBtn').disabled = false;
                
                showTemplateStatus('Template applied successfully!', 'success');
            }

            function generateEmailContentFromTemplate(template, poData) {
                const noEtaItems = poData.items.filter(item => item.etaStatus === 'no-eta');
                const overdueItems = poData.items.filter(item => item.etaStatus === 'overdue');
                const needsFollowupItems = poData.items.filter(item => item.etaStatus === 'needs-followup');

                const variables = {
                    poNumber: poData.poNumber,
                    vendor: poData.vendor,
                    noEtaItems: noEtaItems,
                    overdueItems: overdueItems,
                    needsFollowupItems: needsFollowupItems,
                    totalItems: poData.items.length,
                    currentDate: new Date().toLocaleDateString() + ' ' + new Date().toLocaleTimeString()
                };

                const subject = substituteVariables(template.subject, variables);
                const body = substituteVariables(template.bodyTemplate, variables);
                
                return `Subject: ${subject}\n\n${body}`;
            }

            function initializeTemplateManagement() {
                loadTemplates();
                
                // Set up event listeners
                const templateSelector = document.getElementById('templateSelector');
                if (templateSelector) {
                    templateSelector.addEventListener('change', handleTemplateChange);
                }

                // Initialize first tab as active
                switchTab('preview');
            }

            // Initialize template management
            initializeTemplateManagement();
        });

        // Email Template Management Functions
        let currentTemplate = null;
        let templates = [];

        async function initializeTemplateManagement() {
            await loadTemplates();
            setupTemplateEditor();
        }

        async function loadTemplates() {
            try {
                const response = await fetch('/public/email-templates');
                if (response.ok) {
                    templates = await response.json();
                    populateTemplateDropdown();
                } else {
                    console.error('Failed to load templates');
                }
            } catch (error) {
                console.error('Error loading templates:', error);
            }
        }

        function populateTemplateDropdown() {
            const dropdown = document.getElementById('templateSelect');
            dropdown.innerHTML = '<option value="">Select a template...</option>';
            
            templates.forEach(template => {
                const option = document.createElement('option');
                option.value = template._id;
                option.textContent = `${template.name} (${template.category})`;
                dropdown.appendChild(option);
            });
        }

        function setupTemplateEditor() {
            // Tab switching
            document.querySelectorAll('.editor-tab').forEach(tab => {
                tab.addEventListener('click', (e) => {
                    switchEditorTab(e.target.dataset.tab);
                });
            });

            // Template dropdown change
            document.getElementById('templateSelect').addEventListener('change', handleTemplateChange);
        }

        function switchEditorTab(tabName) {
            // Update tab buttons
            document.querySelectorAll('.editor-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

            // Update tab content
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.classList.remove('active');
            });
            document.getElementById(`${tabName}Tab`).classList.add('active');

            // Update preview when switching to preview tab
            if (tabName === 'preview') {
                updatePreview();
            }
        }

        async function handleTemplateChange() {
            const templateId = document.getElementById('templateSelect').value;
            
            if (!templateId) {
                currentTemplate = null;
                clearTemplateForm();
                return;
            }

            try {
                const response = await fetch(`/public/email-templates/${templateId}`);
                if (response.ok) {
                    currentTemplate = await response.json();
                    populateTemplateForm(currentTemplate);
                    updatePreview();
                } else {
                    showTemplateStatus('Error loading template', 'error');
                }
            } catch (error) {
                console.error('Error loading template:', error);
                showTemplateStatus('Error loading template', 'error');
            }
        }

        function clearTemplateForm() {
            document.getElementById('templateName').value = '';
            document.getElementById('templateCategory').value = '';
            document.getElementById('templateSubject').value = '';
            document.getElementById('templateBody').value = '';
            document.getElementById('previewContent').innerHTML = '<p>Select a template to see preview...</p>';
        }

        function populateTemplateForm(template) {
            document.getElementById('templateName').value = template.name;
            document.getElementById('templateCategory').value = template.category;
            document.getElementById('templateSubject').value = template.subject;
            document.getElementById('templateBody').value = template.bodyTemplate;
        }

        function updatePreview() {
            if (!currentTemplate) {
                document.getElementById('previewContent').innerHTML = '<p>Select a template to see preview...</p>';
                return;
            }

            const subject = document.getElementById('templateSubject').value;
            const body = document.getElementById('templateBody').value;

            // Sample data for preview
            const sampleData = {
                poNumber: 'PO-12345',
                vendor: 'Sample Vendor Inc.',
                items: [
                    { memo: 'Sample Product 1', sku: 'SKU-001', eta: new Date(), etaStatus: 'no-eta' },
                    { memo: 'Sample Product 2', sku: 'SKU-002', eta: null, etaStatus: 'overdue' }
                ]
            };

            try {
                const previewSubject = replaceTemplateVariables(subject, sampleData);
                const previewBody = replaceTemplateVariables(body, sampleData);

                document.getElementById('previewContent').innerHTML = `
                    <div style="border-bottom: 1px solid #eee; padding-bottom: 10px; margin-bottom: 15px;">
                        <strong>Subject:</strong> ${previewSubject}
                    </div>
                    <div style="white-space: pre-wrap;">${previewBody}</div>
                `;
            } catch (error) {
                document.getElementById('previewContent').innerHTML = `<p style="color: #dc3545;">Error generating preview: ${error.message}</p>`;
            }
        }

        function replaceTemplateVariables(template, data) {
            let result = template;

            // Basic variable replacement
            result = result.replace(/\{\{poNumber\}\}/g, data.poNumber || '');
            result = result.replace(/\{\{vendor\}\}/g, data.vendor || '');
            result = result.replace(/\{\{totalItems\}\}/g, data.items ? data.items.length : 0);

            // Handle conditional blocks (simplified)
            result = result.replace(/\{\{#if hasNoEtaItems\}\}(.*?)\{\{\/if\}\}/gs, 
                data.items && data.items.some(item => item.etaStatus === 'no-eta') ? '$1' : '');
            
            result = result.replace(/\{\{#if hasOverdueItems\}\}(.*?)\{\{\/if\}\}/gs, 
                data.items && data.items.some(item => item.etaStatus === 'overdue') ? '$1' : '');

            // Handle item loops (simplified)
            if (data.items) {
                const noEtaItems = data.items.filter(item => item.etaStatus === 'no-eta');
                const noEtaList = noEtaItems.map(item => `• ${item.memo}${item.sku ? ` (SKU: ${item.sku})` : ''}`).join('\n');
                result = result.replace(/\{\{#each noEtaItems\}\}(.*?)\{\{\/each\}\}/gs, noEtaList);

                const overdueItems = data.items.filter(item => item.etaStatus === 'overdue');
                const overdueList = overdueItems.map(item => `• ${item.memo}${item.sku ? ` (SKU: ${item.sku})` : ''} - Expected: ${item.eta ? new Date(item.eta).toLocaleDateString() : 'N/A'}`).join('\n');
                result = result.replace(/\{\{#each overdueItems\}\}(.*?)\{\{\/each\}\}/gs, overdueList);
            }

            // Add current date
            result = result.replace(/\{\{currentDate\}\}/g, new Date().toLocaleDateString());
            result = result.replace(/\{\{currentTime\}\}/g, new Date().toLocaleTimeString());

            return result;
        }

        async function saveTemplate() {
            const templateData = {
                name: document.getElementById('templateName').value,
                category: document.getElementById('templateCategory').value,
                subject: document.getElementById('templateSubject').value,
                bodyTemplate: document.getElementById('templateBody').value,
                variables: ['poNumber', 'vendor', 'totalItems', 'noEtaItems', 'overdueItems', 'currentDate', 'currentTime']
            };

            if (!templateData.name || !templateData.subject || !templateData.bodyTemplate) {
                showTemplateStatus('Please fill in all required fields', 'error');
                return;
            }

            try {
                const url = currentTemplate ? `/email-templates/${currentTemplate._id}` : '/email-templates';
                const method = currentTemplate ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(templateData)
                });

                if (response.ok) {
                    const savedTemplate = await response.json();
                    currentTemplate = savedTemplate;
                    showTemplateStatus('Template saved successfully!', 'success');
                    await loadTemplates(); // Refresh template list
                } else {
                    showTemplateStatus('Error saving template', 'error');
                }
            } catch (error) {
                console.error('Error saving template:', error);
                showTemplateStatus('Error saving template', 'error');
            }
        }

        function newTemplate() {
            currentTemplate = null;
            document.getElementById('templateSelect').value = '';
            clearTemplateForm();
            switchEditorTab('edit');
            showTemplateStatus('Creating new template...', 'success');
        }

        async function deleteTemplate() {
            if (!currentTemplate) {
                showTemplateStatus('No template selected', 'error');
                return;
            }

            if (!confirm(`Are you sure you want to delete the template "${currentTemplate.name}"?`)) {
                return;
            }

            try {
                const response = await fetch(`/email-templates/${currentTemplate._id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showTemplateStatus('Template deleted successfully!', 'success');
                    currentTemplate = null;
                    document.getElementById('templateSelect').value = '';
                    clearTemplateForm();
                    await loadTemplates(); // Refresh template list
                } else {
                    showTemplateStatus('Error deleting template', 'error');
                }
            } catch (error) {
                console.error('Error deleting template:', error);
                showTemplateStatus('Error deleting template', 'error');
            }
        }

        async function useTemplateForEmail() {
            if (!currentTemplate || !selectedPOForEmail) {
                showTemplateStatus('Please select both a template and a PO', 'error');
                return;
            }

            try {
                const response = await fetch(`/public/email-templates/${currentTemplate._id}/generate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        poNumber: selectedPOForEmail.poNumber,
                        vendor: selectedPOForEmail.vendor,
                        items: selectedPOForEmail.items
                    })
                });

                if (response.ok) {
                    const generatedContent = await response.json();
                    document.getElementById('emailContent').textContent = `Subject: ${generatedContent.subject}\n\n${generatedContent.body}`;
                    showTemplateStatus('Email generated from template!', 'success');
                } else {
                    showTemplateStatus('Error generating email from template', 'error');
                }
            } catch (error) {
                console.error('Error using template:', error);
                showTemplateStatus('Error generating email from template', 'error');
            }
        }

        function showTemplateStatus(message, type) {
            const statusDiv = document.getElementById('templateStatus');
            statusDiv.textContent = message;
            statusDiv.className = `template-status ${type}`;
            
            // Auto-hide success messages after 3 seconds
            if (type === 'success') {
                setTimeout(() => {
                    statusDiv.style.display = 'none';
                }, 3000);
            }
        }
    </script>
</body>
</html>
