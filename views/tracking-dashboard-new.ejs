<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>📦 Shipment Tracking Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <script>
        // Navigation functions (must be in head for early loading)
        function closeAllDropdowns() {
            console.log('Closing all dropdowns');
            document.querySelectorAll('.nav-dropdown-content, .nav-accordion-content').forEach(dropdown => {
                dropdown.classList.remove('show');
            });
        }

        function toggleAccordion(accordionId, event) {
            if (event) event.stopPropagation();
            console.log('Toggle accordion:', accordionId);
            const content = document.getElementById(accordionId);
            const wasShowing = content.classList.contains('show');
            closeAllDropdowns();
            if (!wasShowing) {
                content.classList.add('show');
            }
        }

        function toggleImportsDropdown(event) {
            if (event) event.stopPropagation();
            console.log('Toggle imports dropdown');
            const dropdown = document.getElementById('importsDropdown');
            const wasShowing = dropdown.classList.contains('show');
            closeAllDropdowns();
            if (!wasShowing) {
                dropdown.classList.add('show');
            }
        }

        // Close dropdowns when clicking outside
        document.addEventListener('DOMContentLoaded', () => {
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.nav-item')) {
                    closeAllDropdowns();
                }
            });
        });
    </script>
    
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f8f9fa;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            position: sticky;
            top: 0;
            background: white;
            z-index: 1000;
            padding: 15px 20px;
            border-bottom: 1px solid #dee2e6;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            flex-wrap: wrap;
            gap: 15px;
            border-radius: 8px;
        }
        
        .header h1 {
            margin: 0;
            flex-shrink: 0;
            font-size: 24px;
        }
        
        .navigation-container {
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }

        /* Navigation Styles */
        .nav-section {
            position: relative;
        }

        .nav-accordion-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            min-width: 120px;
            justify-content: space-between;
        }

        .nav-accordion-btn:hover {
            background: #218838;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .nav-accordion-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            min-width: 220px;
            max-height: 70vh;
            overflow-y: auto;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-radius: 6px;
            border: 1px solid #dee2e6;
            z-index: 1001;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            margin-top: 5px;
        }

        .nav-accordion-content::-webkit-scrollbar {
            width: 8px;
        }

        .nav-accordion-content::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 0 6px 6px 0;
        }

        .nav-accordion-content::-webkit-scrollbar-thumb {
            background: #28a745;
            border-radius: 4px;
        }

        .nav-accordion-content.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .nav-accordion-item {
            display: block;
            padding: 12px 16px;
            color: #495057;
            text-decoration: none;
            border-bottom: 1px solid #f1f3f4;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .nav-accordion-item:hover {
            background: #f8f9fa;
            color: #28a745;
            padding-left: 20px;
        }

        .nav-imports-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            min-width: 100px;
            justify-content: space-between;
        }

        .nav-imports-btn:hover {
            background: #0056b3;
            transform: translateY(-1px);
        }

        .nav-dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            min-width: 200px;
            max-height: 70vh;
            overflow-y: auto;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-radius: 6px;
            border: 1px solid #dee2e6;
            z-index: 10001;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            margin-top: 5px;
        }

        .nav-dropdown-content.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .nav-dropdown-item {
            display: block;
            padding: 12px 16px;
            color: #495057;
            text-decoration: none;
            border-bottom: 1px solid #f1f3f4;
            transition: all 0.2s ease;
            font-size: 14px;
            background: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
        }

        .nav-dropdown-item:hover {
            background: #f8f9fa;
            color: #007bff;
            padding-left: 20px;
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .stat-card h3 {
            font-size: 14px;
            margin: 0 0 10px 0;
            opacity: 0.9;
        }

        .stat-card .number {
            font-size: 36px;
            font-weight: bold;
            margin: 0;
        }

        .stat-card .subtext {
            font-size: 12px;
            opacity: 0.8;
            margin-top: 5px;
        }

        /* Cards */
        .card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f1f1;
        }

        .card-header h2 {
            margin: 0;
            font-size: 18px;
        }

        /* Forms */
        .form-row {
            display: grid;
            grid-template-columns: 2fr 1fr 2fr 1fr 1fr;
            gap: 15px;
            margin-bottom: 15px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            font-size: 13px;
            font-weight: 600;
            margin-bottom: 5px;
            color: #495057;
        }

        .form-group input,
        .form-group select {
            padding: 10px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.3s;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #007bff;
        }

        /* Buttons */
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: #007bff;
            color: white;
        }

        .btn-primary:hover {
            background: #0056b3;
            transform: translateY(-1px);
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-info {
            background: #17a2b8;
            color: white;
        }

        .btn-info:hover {
            background: #138496;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 12px;
        }

        /* Table */
        .tracking-table {
            width: 100%;
            border-collapse: collapse;
        }

        .tracking-table th {
            background: #f8f9fa;
            padding: 12px;
            text-align: left;
            font-size: 13px;
            font-weight: 600;
            border-bottom: 2px solid #dee2e6;
        }

        .tracking-table td {
            padding: 12px;
            border-bottom: 1px solid #f1f1f1;
            font-size: 13px;
        }

        .tracking-table tr:hover {
            background: #f8f9fa;
        }

        /* Status Badges */
        .status-badge {
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
            display: inline-block;
        }

        .status-delivered {
            background: #d4edda;
            color: #155724;
        }

        .status-in-transit {
            background: #d1ecf1;
            color: #0c5460;
        }

        .status-exception {
            background: #f8d7da;
            color: #721c24;
        }

        .status-unknown {
            background: #e2e3e5;
            color: #383d41;
        }

        /* Alert */
        .alert {
            padding: 15px 20px;
            border-radius: 6px;
            margin-bottom: 20px;
        }

        .alert-info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-warning {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Loading Spinner */
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #007bff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .navigation-container {
                flex-direction: column;
                width: 100%;
            }
            
            .nav-accordion-content,
            .nav-dropdown-content {
                max-height: 50vh;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <!-- Header with Navigation -->
        <div class="header">
            <h1>📦 Shipment Tracking Dashboard</h1>
            
            <div class="navigation-container">
                <!-- Dashboards Accordion -->
                <div class="nav-section nav-item">
                    <button class="nav-accordion-btn" onclick="toggleAccordion('dashboardsAccordion', event)">
                        <span>📊 Dashboards</span>
                        <span class="accordion-icon">▼</span>
                    </button>
                    <div class="nav-accordion-content" id="dashboardsAccordion">
                        <a href="/purchase-orders" class="nav-accordion-item">📋 Purchase Orders</a>
                        <a href="/purchase-orders/tracking-dashboard" class="nav-accordion-item">📦 Tracking Dashboard</a>
                        <a href="/purchase-orders/tasks-dashboard" class="nav-accordion-item">✅ Tasks Dashboard</a>
                        <a href="/purchase-orders/line-items-manager" class="nav-accordion-item">📝 Line Items Manager</a>
                        <a href="/purchase-orders/notes-manager" class="nav-accordion-item">📄 Notes Manager</a>
                        <a href="/dropship/dashboard" class="nav-accordion-item">🚚 Dropship Dashboard</a>
                        <a href="/organic-vendors" class="nav-accordion-item">🌱 Organic Vendors</a>
                    </div>
                </div>

                <!-- Imports Dropdown -->
                <div class="nav-section nav-item">
                    <button class="nav-imports-btn" onclick="toggleImportsDropdown(event)">
                        <span>📥 Imports</span>
                        <span class="dropdown-icon">▼</span>
                    </button>
                    <div class="nav-dropdown-content" id="importsDropdown">
                        <a href="/upload" class="nav-dropdown-item">📂 Upload CSV</a>
                        <a href="#" onclick="event.preventDefault(); showNetSuiteImport()" class="nav-dropdown-item">🔗 NetSuite Import</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <h3>Total Line Items</h3>
                <div class="number"><%= stats.totalLineItems %></div>
                <div class="subtext">All purchase order items</div>
            </div>
            <div class="stat-card" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
                <h3>With Tracking</h3>
                <div class="number"><%= stats.itemsWithTracking %></div>
                <div class="subtext"><%= stats.trackingCoverage %>% coverage</div>
            </div>
            <div class="stat-card" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);">
                <h3>In Transit</h3>
                <div class="number"><%= stats.inTransitItems %></div>
                <div class="subtext">Currently shipping</div>
            </div>
            <div class="stat-card" style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);">
                <h3>Delivered</h3>
                <div class="number"><%= stats.deliveredItems %></div>
                <div class="subtext">Successfully received</div>
            </div>
        </div>

        <!-- Add New Tracking Number -->
        <div class="card">
            <div class="card-header">
                <h2>➕ Add New Tracking Number</h2>
            </div>
            <form id="addTrackingForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="trackingNumber">Tracking Number *</label>
                        <input type="text" id="trackingNumber" name="trackingNumber" 
                               placeholder="Enter tracking number" required>
                    </div>
                    <div class="form-group">
                        <label for="carrier">Carrier</label>
                        <select id="carrier" name="carrier">
                            <option value="auto">Auto-detect</option>
                            <option value="FedEx">FedEx</option>
                            <option value="UPS">UPS</option>
                            <option value="USPS">USPS</option>
                            <option value="DHL">DHL</option>
                            <option value="OnTrac">OnTrac</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="poNumber">Purchase Order *</label>
                        <select id="poNumber" name="poNumber" required>
                            <option value="">Select PO...</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>&nbsp;</label>
                        <button type="button" class="btn btn-info" id="quickTrackBtn">
                            🔍 Quick Track
                        </button>
                    </div>
                    <div class="form-group">
                        <label>&nbsp;</label>
                        <button type="submit" class="btn btn-success">
                            ✅ Add to PO
                        </button>
                    </div>
                </div>
            </form>
            <div id="trackingResult" style="margin-top: 15px;"></div>
        </div>

        <!-- Tracked Shipments Table -->
        <div class="card">
            <div class="card-header">
                <h2>📋 Tracked Shipments (<%= stats.itemsWithTracking %>)</h2>
                <div>
                    <button class="btn btn-primary btn-sm" onclick="refreshTrackingList()">
                        🔄 Refresh
                    </button>
                    <button class="btn btn-primary btn-sm" onclick="bulkUpdateTracking()">
                        🔄 Update All
                    </button>
                </div>
            </div>
            <div id="trackingTableContainer">
                <div class="spinner"></div>
            </div>
        </div>
    </div>

    <!-- Modal for NetSuite Import -->
    <div id="netsuiteModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10000; align-items: center; justify-content: center;">
        <div class="card" style="max-width: 600px; margin: 50px auto;">
            <div class="card-header">
                <h2>🔗 NetSuite Import</h2>
            </div>
            <div style="padding: 20px;">
                <p>NetSuite import functionality will be available soon.</p>
                <button class="btn btn-primary" onclick="hideNetSuiteImport()">Close</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Load PO numbers on page load
        async function loadPONumbers() {
            try {
                const response = await fetch('/purchase-orders/line-items-api?limit=2000');
                const data = await response.json();
                
                if (data.lineItems) {
                    const poNumbers = [...new Set(data.lineItems.map(item => item.poNumber))].sort();
                    const select = document.getElementById('poNumber');
                    
                    poNumbers.forEach(poNumber => {
                        const option = document.createElement('option');
                        option.value = poNumber;
                        option.textContent = poNumber;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading PO numbers:', error);
            }
        }

        // Carrier detection helper
        function detectCarrier(trackingNumber) {
            const cleaned = trackingNumber.trim();
            if (/^\d{12}$|^\d{15}$|^\d{20}$/.test(cleaned)) return 'FedEx';
            if (/^1Z[A-Z0-9]{16}$/.test(cleaned)) return 'UPS';
            if (/^\d{20,22}$|^94\d{20}$|^92\d{20}$|^93\d{20}$/.test(cleaned)) return 'USPS';
            if (/^\d{10,11}$/.test(cleaned)) return 'DHL';
            return 'Unknown';
        }

        // Quick Track button - check tracking without saving
        document.getElementById('quickTrackBtn').addEventListener('click', async () => {
            const trackingNumber = document.getElementById('trackingNumber').value.trim();
            const carrier = document.getElementById('carrier').value;
            const resultDiv = document.getElementById('trackingResult');
            
            if (!trackingNumber) {
                resultDiv.innerHTML = '<div class="alert alert-warning">Please enter a tracking number</div>';
                return;
            }

            resultDiv.innerHTML = '<div class="alert alert-info">🔍 Fetching tracking information from FedEx API...</div>';

            try {
                const finalCarrier = carrier === 'auto' ? detectCarrier(trackingNumber) : carrier;
                const cacheBuster = Date.now();
                
                const response = await fetch(`/purchase-orders/tracking/${trackingNumber}/live?carrier=${finalCarrier}&_=${cacheBuster}`);
                const data = await response.json();
                
                if (data.success && data.trackingInfo) {
                    const info = data.trackingInfo;
                    resultDiv.innerHTML = `
                        <div class="alert alert-success">
                            <h5>✅ Tracking Information (${finalCarrier})</h5>
                            <p><strong>Tracking #:</strong> ${trackingNumber}</p>
                            <p><strong>Status:</strong> ${info.status || 'Unknown'}</p>
                            ${info.statusDescription ? `<p><strong>Description:</strong> ${info.statusDescription}</p>` : ''}
                            <p><strong>Location:</strong> ${info.lastLocation || 'N/A'}</p>
                            <p><strong>Last Update:</strong> ${info.lastUpdate ? new Date(info.lastUpdate).toLocaleString() : 'N/A'}</p>
                            ${info.estimatedDelivery ? `<p><strong>Est. Delivery:</strong> ${new Date(info.estimatedDelivery).toLocaleDateString()}</p>` : ''}
                            ${info.actualDelivery ? `<p><strong>✅ Delivered:</strong> ${new Date(info.actualDelivery).toLocaleString()}</p>` : ''}
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `<div class="alert alert-warning">⚠️ ${data.error || 'Could not fetch tracking information'}</div>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="alert alert-danger">❌ Error: ${error.message}</div>`;
            }
        });

        // Add tracking form submit
        document.getElementById('addTrackingForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const trackingNumber = document.getElementById('trackingNumber').value.trim();
            const carrier = document.getElementById('carrier').value;
            const poNumber = document.getElementById('poNumber').value;
            const resultDiv = document.getElementById('trackingResult');
            
            if (!poNumber) {
                resultDiv.innerHTML = '<div class="alert alert-warning">Please select a Purchase Order</div>';
                return;
            }

            resultDiv.innerHTML = '<div class="alert alert-info">💾 Saving tracking number...</div>';

            try {
                // Find line items for this PO
                const response = await fetch(`/purchase-orders/line-items-api?poNumber=${encodeURIComponent(poNumber)}&limit=100`);
                const data = await response.json();
                
                if (!data.lineItems || data.lineItems.length === 0) {
                    throw new Error('No line items found for this PO');
                }

                const lineItem = data.lineItems[0];
                const finalCarrier = carrier === 'auto' ? detectCarrier(trackingNumber) : carrier;
                
                const updateResponse = await fetch(`/purchase-orders/line-items/${lineItem._id}/tracking`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        trackingNumber,
                        trackingCarrier: finalCarrier
                    })
                });

                const updateResult = await updateResponse.json();
                
                if (updateResult.success) {
                    resultDiv.innerHTML = `
                        <div class="alert alert-success">
                            ✅ Tracking number added successfully!
                            <br>PO: ${poNumber} | Tracking: ${trackingNumber} | Carrier: ${finalCarrier}
                        </div>
                    `;
                    document.getElementById('addTrackingForm').reset();
                    setTimeout(() => refreshTrackingList(), 1000);
                } else {
                    throw new Error(updateResult.error || 'Update failed');
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="alert alert-danger">❌ Error: ${error.message}</div>`;
            }
        });

        // Load tracking list
        async function refreshTrackingList() {
            const container = document.getElementById('trackingTableContainer');
            container.innerHTML = '<div class="spinner"></div>';

            try {
                const response = await fetch('/purchase-orders/line-items-api?limit=2000');
                const data = await response.json();
                
                if (!data.lineItems) {
                    container.innerHTML = '<div class="alert alert-warning">No line items found</div>';
                    return;
                }

                const itemsWithTracking = data.lineItems.filter(item => item.trackingNumber);
                
                if (itemsWithTracking.length === 0) {
                    container.innerHTML = '<div class="alert alert-info">No tracking numbers found. Add tracking numbers using the form above.</div>';
                    return;
                }

                let html = '<table class="tracking-table"><thead><tr>';
                html += '<th>PO Number</th>';
                html += '<th>Item Description</th>';
                html += '<th>Tracking Number</th>';
                html += '<th>Carrier</th>';
                html += '<th>Status</th>';
                html += '<th>Location</th>';
                html += '<th>Last Update</th>';
                html += '<th>Actions</th>';
                html += '</tr></thead><tbody>';

                itemsWithTracking.forEach(item => {
                    const statusClass = getStatusClass(item.trackingStatus);
                    html += '<tr>';
                    html += `<td><strong>${item.poNumber || 'N/A'}</strong><br><small>${item.poId?.vendor || ''}</small></td>`;
                    html += `<td>${item.memo || 'No description'}</td>`;
                    html += `<td><code>${item.trackingNumber}</code></td>`;
                    html += `<td><span class="status-badge">${item.trackingCarrier || 'Unknown'}</span></td>`;
                    html += `<td><span class="status-badge ${statusClass}">${item.trackingStatusDescription || 'Unknown'}</span></td>`;
                    html += `<td>${item.trackingLocation || '-'}</td>`;
                    html += `<td>${item.trackingLastUpdate ? new Date(item.trackingLastUpdate).toLocaleDateString() : 'Never'}</td>`;
                    html += `<td><button class="btn btn-primary btn-sm" onclick="updateSingleTracking('${item._id}')">🔄 Update</button></td>`;
                    html += '</tr>';
                });

                html += '</tbody></table>';
                container.innerHTML = html;

            } catch (error) {
                console.error('Error loading tracking list:', error);
                container.innerHTML = '<div class="alert alert-danger">Error loading tracking data</div>';
            }
        }

        // Get status class for badge
        function getStatusClass(status) {
            if (!status) return 'status-unknown';
            const s = status.toLowerCase();
            if (s.includes('deliver')) return 'status-delivered';
            if (s.includes('transit') || s.includes('picked') || s.includes('out for')) return 'status-in-transit';
            if (s.includes('exception') || s.includes('delay') || s.includes('return')) return 'status-exception';
            return 'status-unknown';
        }

        // Update single tracking
        async function updateSingleTracking(itemId) {
            if (!confirm('Update tracking information from FedEx API?')) return;
            
            try {
                const response = await fetch(`/purchase-orders/line-items/${itemId}/tracking/update`, {
                    method: 'PUT'
                });
                const result = await response.json();
                
                if (result.success) {
                    alert('✅ Tracking updated successfully!');
                    refreshTrackingList();
                } else {
                    alert('⚠️ No tracking information found');
                }
            } catch (error) {
                alert('❌ Error updating tracking: ' + error.message);
            }
        }

        // Bulk update all tracking
        async function bulkUpdateTracking() {
            if (!confirm('This will update ALL tracking numbers from the FedEx API. This may take a few minutes. Continue?')) return;
            
            const container = document.getElementById('trackingTableContainer');
            container.innerHTML = '<div class="alert alert-info">🔄 Updating all tracking numbers from FedEx API... This may take a few minutes.</div><div class="spinner"></div>';
            
            try {
                const response = await fetch('/purchase-orders/tracking/bulk-update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();
                
                if (result.success) {
                    alert(`✅ Update complete!\nTotal: ${result.totalTracked}\nUpdated: ${result.updated}\nFailed: ${result.failed}\nSkipped: ${result.skipped}`);
                    refreshTrackingList();
                } else {
                    throw new Error(result.error || 'Update failed');
                }
            } catch (error) {
                alert('❌ Error: ' + error.message);
                refreshTrackingList();
            }
        }

        // NetSuite modal functions
        function showNetSuiteImport() {
            document.getElementById('netsuiteModal').style.display = 'flex';
        }

        function hideNetSuiteImport() {
            document.getElementById('netsuiteModal').style.display = 'none';
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            loadPONumbers();
            refreshTrackingList();
        });
    </script>
</body>

</html>
