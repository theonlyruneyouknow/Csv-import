<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Announcement Management - Church Bulletin System</title>
    <style>
        :root {
            --primary-color: #2c5aa0;
            --secondary-color: #1a365d;
            --accent-color: #3182ce;
            --success-color: #38a169;
            --warning-color: #d69e2e;
            --danger-color: #e53e3e;
            --light-bg: #f7fafc;
            --border-color: #e2e8f0;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Georgia', 'Times New Roman', serif;
            background-color: var(--light-bg);
            color: #2d3748;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 30px 0;
            margin-bottom: 30px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            text-align: center;
            border-left: 4px solid var(--primary-color);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .stat-label {
            font-size: 0.9rem;
            color: #718096;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .controls {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            align-items: center;
            justify-content: space-between;
        }

        .filter-group {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--secondary-color);
            transform: translateY(-2px);
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-warning {
            background-color: var(--warning-color);
            color: white;
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn-secondary {
            background-color: #718096;
            color: white;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 0.8rem;
        }

        select, input {
            padding: 8px 12px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .announcements-table {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        th {
            background-color: var(--light-bg);
            font-weight: 600;
            color: var(--secondary-color);
        }

        .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-active {
            background-color: #c6f6d5;
            color: #276749;
        }

        .status-inactive {
            background-color: #fed7d7;
            color: #c53030;
        }

        .status-pending {
            background-color: #feebc8;
            color: #b7791f;
        }

        .status-expired {
            background-color: #e2e8f0;
            color: #4a5568;
        }

        .priority-badge {
            display: inline-block;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.7rem;
            font-weight: bold;
            min-width: 20px;
            text-align: center;
        }

        .priority-high {
            background-color: #fed7d7;
            color: #c53030;
        }

        .priority-medium {
            background-color: #feebc8;
            color: #b7791f;
        }

        .priority-low {
            background-color: #e2e8f0;
            color: #4a5568;
        }

        .category-badge {
            display: inline-block;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.7rem;
            background-color: var(--light-bg);
            color: var(--secondary-color);
            text-transform: capitalize;
        }

        .action-buttons {
            display: flex;
            gap: 5px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 10px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            background-color: var(--primary-color);
            color: white;
            padding: 20px;
            border-radius: 10px 10px 0 0;
        }

        .modal-header h2 {
            margin: 0;
        }

        .close {
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            margin-top: -5px;
        }

        .close:hover {
            opacity: 0.7;
        }

        .modal-body {
            padding: 20px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .form-group textarea {
            height: 120px;
            resize: vertical;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: var(--primary-color);
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #718096;
        }

        .empty-state h3 {
            margin-bottom: 10px;
            color: var(--secondary-color);
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .controls {
                flex-direction: column;
                align-items: stretch;
            }

            .filter-group {
                justify-content: center;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            table {
                font-size: 0.8rem;
            }

            th, td {
                padding: 10px 8px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ“¢ Announcement Management</h1>
            <p>Manage church bulletin announcements with automatic expiration</p>
        </div>

        <!-- Statistics -->
        <div class="stats-grid" id="statsGrid">
            <div class="stat-card">
                <div class="stat-number" id="totalCount">-</div>
                <div class="stat-label">Total</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="activeCount">-</div>
                <div class="stat-label">Active</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="currentCount">-</div>
                <div class="stat-label">Current</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="expiredCount">-</div>
                <div class="stat-label">Expired</div>
            </div>
        </div>

        <!-- Controls -->
        <div class="controls">
            <div class="filter-group">
                <select id="categoryFilter">
                    <option value="all">All Categories</option>
                    <option value="general">General</option>
                    <option value="worship">Worship</option>
                    <option value="fellowship">Fellowship</option>
                    <option value="service">Service</option>
                    <option value="youth">Youth</option>
                    <option value="education">Education</option>
                    <option value="special">Special</option>
                </select>

                <select id="statusFilter">
                    <option value="all">All Status</option>
                    <option value="current">Currently Active</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                </select>
            </div>

            <div class="filter-group">
                <button class="btn btn-primary" onclick="openModal()">
                    âž• New Announcement
                </button>
                <button class="btn btn-warning" onclick="cleanupExpired()">
                    ðŸ§¹ Cleanup Expired
                </button>
                <button class="btn btn-secondary" onclick="refreshData()">
                    ðŸ”„ Refresh
                </button>
            </div>
        </div>

        <!-- Announcements Table -->
        <div class="announcements-table">
            <table>
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Category</th>
                        <th>Priority</th>
                        <th>Status</th>
                        <th>Date Range</th>
                        <th>Time Remaining</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="announcementsTableBody">
                    <tr>
                        <td colspan="7" class="loading">Loading announcements...</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Modal for Add/Edit Announcement -->
    <div id="announcementModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">New Announcement</h2>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="announcementForm">
                    <input type="hidden" id="announcementId">
                    
                    <div class="form-group">
                        <label for="title">Title *</label>
                        <input type="text" id="title" name="title" required maxlength="200">
                    </div>

                    <div class="form-group">
                        <label for="content">Content *</label>
                        <textarea id="content" name="content" required maxlength="2000" placeholder="Enter the announcement details..."></textarea>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="startDate">Start Date *</label>
                            <input type="datetime-local" id="startDate" name="startDate" required>
                        </div>

                        <div class="form-group">
                            <label for="endDate">End Date *</label>
                            <input type="datetime-local" id="endDate" name="endDate" required>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="category">Category</label>
                            <select id="category" name="category">
                                <option value="general">General</option>
                                <option value="worship">Worship</option>
                                <option value="fellowship">Fellowship</option>
                                <option value="service">Service</option>
                                <option value="youth">Youth</option>
                                <option value="education">Education</option>
                                <option value="special">Special</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="priority">Priority (0-10)</label>
                            <input type="number" id="priority" name="priority" min="0" max="10" value="0">
                        </div>
                    </div>

                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="isActive" name="isActive" checked>
                            Active
                        </label>
                    </div>

                    <div style="text-align: right; margin-top: 30px;">
                        <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                        <button type="submit" class="btn btn-success">Save Announcement</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let announcements = [];
        let stats = {};

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadStats();
            loadAnnouncements();
            
            // Set up filters
            document.getElementById('categoryFilter').addEventListener('change', filterAnnouncements);
            document.getElementById('statusFilter').addEventListener('change', filterAnnouncements);
            
            // Set up form
            document.getElementById('announcementForm').addEventListener('submit', saveAnnouncement);
            
            // Set default dates
            const now = new Date();
            const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
            
            document.getElementById('startDate').value = formatDateTimeLocal(now);
            document.getElementById('endDate').value = formatDateTimeLocal(nextWeek);
        });

        // Load statistics
        async function loadStats() {
            try {
                const response = await fetch('/api/announcements/stats/summary');
                stats = await response.json();
                
                document.getElementById('totalCount').textContent = stats.total;
                document.getElementById('activeCount').textContent = stats.active;
                document.getElementById('currentCount').textContent = stats.current;
                document.getElementById('expiredCount').textContent = stats.expired;
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        // Load announcements
        async function loadAnnouncements() {
            try {
                const response = await fetch('/api/announcements?limit=100');
                const data = await response.json();
                announcements = data.announcements;
                
                renderAnnouncements(announcements);
            } catch (error) {
                console.error('Error loading announcements:', error);
                document.getElementById('announcementsTableBody').innerHTML = 
                    '<tr><td colspan="7" style="text-align: center; color: red;">Error loading announcements</td></tr>';
            }
        }

        // Render announcements table
        function renderAnnouncements(data) {
            const tbody = document.getElementById('announcementsTableBody');
            
            if (data.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="empty-state"><h3>No announcements found</h3><p>Click "New Announcement" to create your first announcement.</p></td></tr>';
                return;
            }

            tbody.innerHTML = data.map(announcement => {
                const status = getAnnouncementStatus(announcement);
                const priority = getPriorityLabel(announcement.priority);
                
                return `
                    <tr>
                        <td>
                            <strong>${announcement.title}</strong>
                            <br><small style="color: #718096;">${announcement.content.substring(0, 60)}${announcement.content.length > 60 ? '...' : ''}</small>
                        </td>
                        <td><span class="category-badge">${announcement.category}</span></td>
                        <td><span class="priority-badge priority-${priority.class}">${announcement.priority}</span></td>
                        <td><span class="status-badge status-${status.class}">${status.label}</span></td>
                        <td>
                            <small>
                                ${formatDate(announcement.startDate)}<br>
                                to ${formatDate(announcement.endDate)}
                            </small>
                        </td>
                        <td><small>${announcement.timeRemaining || 'N/A'}</small></td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-primary btn-sm" onclick="editAnnouncement('${announcement._id}')">Edit</button>
                                ${announcement.isActive ? 
                                    `<button class="btn btn-warning btn-sm" onclick="deactivateAnnouncement('${announcement._id}')">Deactivate</button>` :
                                    ''
                                }
                                <button class="btn btn-danger btn-sm" onclick="deleteAnnouncement('${announcement._id}')">Delete</button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Get announcement status
        function getAnnouncementStatus(announcement) {
            const now = new Date();
            const start = new Date(announcement.startDate);
            const end = new Date(announcement.endDate);

            if (!announcement.isActive) {
                return { label: 'Inactive', class: 'inactive' };
            } else if (end < now) {
                return { label: 'Expired', class: 'expired' };
            } else if (start > now) {
                return { label: 'Pending', class: 'pending' };
            } else {
                return { label: 'Active', class: 'active' };
            }
        }

        // Get priority label
        function getPriorityLabel(priority) {
            if (priority >= 7) return { class: 'high' };
            if (priority >= 4) return { class: 'medium' };
            return { class: 'low' };
        }

        // Format date for display
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric',
                year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined
            });
        }

        // Format date for datetime-local input
        function formatDateTimeLocal(date) {
            const d = new Date(date);
            d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
            return d.toISOString().slice(0, 16);
        }

        // Filter announcements
        function filterAnnouncements() {
            const categoryFilter = document.getElementById('categoryFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            
            let filtered = announcements;

            if (categoryFilter !== 'all') {
                filtered = filtered.filter(a => a.category === categoryFilter);
            }

            if (statusFilter !== 'all') {
                const now = new Date();
                filtered = filtered.filter(a => {
                    const start = new Date(a.startDate);
                    const end = new Date(a.endDate);
                    
                    switch (statusFilter) {
                        case 'current':
                            return a.isActive && start <= now && end >= now;
                        case 'active':
                            return a.isActive;
                        case 'inactive':
                            return !a.isActive;
                        default:
                            return true;
                    }
                });
            }

            renderAnnouncements(filtered);
        }

        // Modal functions
        function openModal(announcementId = null) {
            document.getElementById('announcementModal').style.display = 'block';
            
            if (announcementId) {
                const announcement = announcements.find(a => a._id === announcementId);
                if (announcement) {
                    document.getElementById('modalTitle').textContent = 'Edit Announcement';
                    document.getElementById('announcementId').value = announcement._id;
                    document.getElementById('title').value = announcement.title;
                    document.getElementById('content').value = announcement.content;
                    document.getElementById('startDate').value = formatDateTimeLocal(announcement.startDate);
                    document.getElementById('endDate').value = formatDateTimeLocal(announcement.endDate);
                    document.getElementById('category').value = announcement.category;
                    document.getElementById('priority').value = announcement.priority;
                    document.getElementById('isActive').checked = announcement.isActive;
                }
            } else {
                document.getElementById('modalTitle').textContent = 'New Announcement';
                document.getElementById('announcementForm').reset();
                document.getElementById('announcementId').value = '';
                
                // Set default dates
                const now = new Date();
                const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
                
                document.getElementById('startDate').value = formatDateTimeLocal(now);
                document.getElementById('endDate').value = formatDateTimeLocal(nextWeek);
                document.getElementById('isActive').checked = true;
            }
        }

        function closeModal() {
            document.getElementById('announcementModal').style.display = 'none';
        }

        // CRUD operations
        async function saveAnnouncement(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = {
                title: formData.get('title'),
                content: formData.get('content'),
                startDate: formData.get('startDate'),
                endDate: formData.get('endDate'),
                category: formData.get('category'),
                priority: parseInt(formData.get('priority')),
                isActive: formData.has('isActive')
            };

            const id = document.getElementById('announcementId').value;
            const method = id ? 'PUT' : 'POST';
            const url = id ? `/api/announcements/${id}` : '/api/announcements';

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    closeModal();
                    refreshData();
                } else {
                    const error = await response.json();
                    alert('Error: ' + (error.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error saving announcement:', error);
                alert('Error saving announcement');
            }
        }

        function editAnnouncement(id) {
            openModal(id);
        }

        async function deactivateAnnouncement(id) {
            if (confirm('Are you sure you want to deactivate this announcement?')) {
                try {
                    const response = await fetch(`/api/announcements/${id}/deactivate`, {
                        method: 'PATCH'
                    });

                    if (response.ok) {
                        refreshData();
                    } else {
                        alert('Error deactivating announcement');
                    }
                } catch (error) {
                    console.error('Error deactivating announcement:', error);
                    alert('Error deactivating announcement');
                }
            }
        }

        async function deleteAnnouncement(id) {
            if (confirm('Are you sure you want to delete this announcement? This action cannot be undone.')) {
                try {
                    const response = await fetch(`/api/announcements/${id}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        refreshData();
                    } else {
                        alert('Error deleting announcement');
                    }
                } catch (error) {
                    console.error('Error deleting announcement:', error);
                    alert('Error deleting announcement');
                }
            }
        }

        async function cleanupExpired() {
            if (confirm('This will deactivate all expired announcements and delete very old ones. Continue?')) {
                try {
                    const response = await fetch('/api/announcements/cleanup', {
                        method: 'POST'
                    });

                    if (response.ok) {
                        const result = await response.json();
                        alert('Cleanup completed successfully!');
                        refreshData();
                    } else {
                        alert('Error during cleanup');
                    }
                } catch (error) {
                    console.error('Error during cleanup:', error);
                    alert('Error during cleanup');
                }
            }
        }

        function refreshData() {
            loadStats();
            loadAnnouncements();
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('announcementModal');
            if (event.target == modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>
