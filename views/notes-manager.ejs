<!DOCTYPE html>
<html>

<head>
    <title>Notes Manager - Purchase Orders</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f8f9fa;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
            border-bottom: 1px solid #dee2e6;
        }

        .back-btn {
            background: #6c757d;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 4px;
        }

        .back-btn:hover {
            background: #5a6268;
        }

        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat {
            background: white;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            flex: 1;
        }

        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }

        .stat-label {
            font-size: 12px;
            color: #6c757d;
            text-transform: uppercase;
        }

        .filters {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
            gap: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            font-size: 12px;
            color: #6c757d;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .filter-group input,
        .filter-group select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .search-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 19px;
        }

        .search-btn:hover {
            background: #0056b3;
        }

        .clear-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 19px;
        }

        .clear-btn:hover {
            background: #5a6268;
        }

        .results {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .results-header {
            background: #f8f9fa;
            padding: 15px;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .notes-list {
            max-height: 600px;
            overflow-y: auto;
        }

        .note-item {
            border-bottom: 1px solid #dee2e6;
            padding: 15px;
            transition: background 0.2s ease;
        }

        .note-item:hover {
            background: #f8f9fa;
        }

        .note-item:last-child {
            border-bottom: none;
        }

        .note-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 8px;
            gap: 15px;
        }

        .note-po {
            font-family: monospace;
            font-weight: bold;
            color: #007bff;
            text-decoration: none;
            font-size: 14px;
        }

        .note-po:hover {
            text-decoration: underline;
        }

        .note-vendor {
            color: #495057;
            font-size: 14px;
        }

        .note-date {
            color: #6c757d;
            font-size: 12px;
            margin-left: auto;
        }

        .note-content {
            color: #495057;
            line-height: 1.4;
            white-space: pre-wrap;
            background: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            margin: 8px 0;
        }

        .note-actions {
            display: flex;
            gap: 8px;
        }

        .delete-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 11px;
        }

        .delete-btn:hover {
            background: #c82333;
        }

        .no-results {
            text-align: center;
            padding: 40px;
            color: #6c757d;
            font-style: italic;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }

        /* Navigation Styles */
        .navigation-container {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .nav-section {
            position: relative;
        }

        .nav-accordion-btn {
            background: linear-gradient(135deg, #6f42c1, #e83e8c);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            white-space: nowrap;
        }

        .nav-accordion-btn:hover {
            background: linear-gradient(135deg, #5a32a3, #dc2f7a);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .accordion-icon {
            transition: transform 0.3s ease;
            font-size: 12px;
        }

        .nav-accordion-btn.active .accordion-icon {
            transform: rotate(180deg);
        }

        .nav-accordion-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            min-width: 200px;
            z-index: 1000;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

        .nav-accordion-content.show {
            max-height: 500px;
            padding: 8px 0;
        }

        .nav-accordion-item {
            display: block;
            padding: 8px 15px;
            color: #333;
            text-decoration: none;
            transition: background-color 0.2s ease;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
        }

        .nav-accordion-item:hover {
            background-color: #f8f9fa;
            color: #6f42c1;
            text-decoration: none;
        }

        /* User Section */
        .user-section {
            position: relative;
            margin-left: auto;
        }

        .user-dropdown {
            background: linear-gradient(135deg, #17a2b8, #6610f2);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .user-dropdown:hover {
            background: linear-gradient(135deg, #138496, #520dc2);
            transform: translateY(-1px);
        }

        .user-dropdown-content {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            min-width: 180px;
            z-index: 1000;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

        .user-dropdown-content.show {
            max-height: 300px;
            padding: 8px 0;
        }

        .user-dropdown-item {
            display: block;
            padding: 8px 15px;
            color: #333;
            text-decoration: none;
            transition: background-color 0.2s ease;
        }

        .user-dropdown-item:hover {
            background-color: #f8f9fa;
            color: #17a2b8;
            text-decoration: none;
        }

        /* P.O.D. Button Styles */
        .pod-button {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            white-space: nowrap;
        }

        .pod-button:hover {
            background: linear-gradient(135deg, #218838, #1ea583);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            color: white;
            text-decoration: none;
        }

        .pod-button .arrow {
            font-size: 12px;
            transition: transform 0.3s ease;
        }

        .pod-button:hover .arrow {
            transform: translateX(-2px);
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Notes Manager</h1>
            
            <!-- P.O.D. Button -->
            <a href="/" class="pod-button">
                <span class="arrow">←</span>
                <span>P.O.D.</span>
            </a>
            
            <div class="d-flex align-items-center justify-content-between flex-grow-1">
                <!-- Navigation Container -->
                <div class="navigation-container">
                    <!-- Dashboards Accordion -->
                    <div class="nav-section">
                        <button class="nav-accordion-btn" onclick="toggleAccordion('managersAccordion')">
                            📊 Dashboards <span class="accordion-icon">▼</span>
                        </button>
                        <div id="managersAccordion" class="nav-accordion-content">
                            <a href="/" class="nav-accordion-item">🏠 PO Dashboard</a>
                            <a href="/receiving-dashboard" class="nav-accordion-item">📦 Receiving Dashboard</a>
                            <a href="/tasks-dashboard" class="nav-accordion-item">📋 Tasks Dashboard</a>
                            <a href="/dropship-dashboard" class="nav-accordion-item">🚢 Dropship Dashboard</a>
                        </div>
                    </div>
                    
                    <!-- Options Accordion -->
                    <div class="nav-section">
                        <button class="nav-accordion-btn" onclick="toggleAccordion('optionsAccordion')">
                            ⚙️ Options <span class="accordion-icon">▼</span>
                        </button>
                        <div id="optionsAccordion" class="nav-accordion-content">
                            <a href="/purchase-orders/line-items-manager" class="nav-accordion-item">📄 Line Items Manager</a>
                            <a href="/purchase-orders/notes-manager" class="nav-accordion-item">� Notes Manager</a>
                            <a href="/organic-vendors-dashboard" class="nav-accordion-item">🌱 Organic Vendors</a>
                            <a href="/purchase-orders/trouble-seed" class="nav-accordion-item">⚠️ Trouble Seed</a>
                            <a href="/purchase-orders/orphaned-line-items" class="nav-accordion-item">👻 Orphaned Items</a>
                        </div>
                    </div>

                    <!-- Import Accordion -->
                    <div class="nav-section">
                        <button class="nav-accordion-btn" onclick="toggleAccordion('importAccordion')">
                            📥 Import <span class="accordion-icon">▼</span>
                        </button>
                        <div id="importAccordion" class="nav-accordion-content">
                            <a href="/purchase-orders/upload" class="nav-accordion-item">📄 Upload CSV</a>
                            <a href="/purchase-orders/tracking-dashboard" class="nav-accordion-item">📦 Tracking Dashboard</a>
                        </div>
                    </div>
                </div>

                <!-- User Info Section -->
                <% if (typeof user !== 'undefined' && user) { %>
                <div class="user-section">
                    <button class="user-dropdown" onclick="toggleAccordion('userDropdown')">
                        <i class="fas fa-user"></i>
                        <%= user.username %>
                        <span class="accordion-icon">▼</span>
                    </button>
                    <div id="userDropdown" class="user-dropdown-content">
                        <div class="user-dropdown-item">
                            <strong>Role:</strong> <%= user.role %>
                        </div>
                        <% if (user.role === 'admin' || user.role === 'manager') { %>
                        <a href="/admin/users" class="user-dropdown-item">
                            <i class="fas fa-users"></i> Manage Users
                        </a>
                        <% } %>
                        <a href="/logout" class="user-dropdown-item">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </a>
                    </div>
                </div>
                <% } %>

                <!-- Special function buttons for Notes Manager -->
                <div style="display: flex; gap: 10px; margin-left: 15px;">
                    <button id="migrateBtn" class="search-btn" onclick="migrateExistingNotes()">🔄 Migrate Existing Notes</button>
                </div>
            </div>
        </div>

        <div class="stats">
            <div class="stat">
                <div class="stat-number">
                    <%= totalNotes %>
                </div>
                <div class="stat-label">Total Notes</div>
            </div>
            <div class="stat">
                <div class="stat-number">
                    <%= recentNotes %>
                </div>
                <div class="stat-label">This Week</div>
            </div>
            <div class="stat">
                <div class="stat-number" id="filteredCount">0</div>
                <div class="stat-label">Showing</div>
            </div>
        </div>

        <div class="filters">
            <div class="filter-group">
                <label>Search Content</label>
                <input type="text" id="searchInput" placeholder="Search in notes...">
            </div>

            <div class="filter-group">
                <label>PO Number</label>
                <select id="poFilter">
                    <option value="">All POs</option>
                    <% uniquePOs.forEach(po=> { %>
                        <option value="<%= po %>">
                            <%= po %>
                        </option>
                        <% }); %>
                </select>
            </div>

            <div class="filter-group">
                <label>Vendor</label>
                <select id="vendorFilter">
                    <option value="">All Vendors</option>
                    <% uniqueVendors.forEach(vendor=> { %>
                        <option value="<%= vendor %>">
                            <%= vendor %>
                        </option>
                        <% }); %>
                </select>
            </div>

            <div class="filter-group">
                <label>Date From</label>
                <input type="date" id="dateFromFilter">
            </div>

            <div class="filter-group">
                <label>Date To</label>
                <input type="date" id="dateToFilter">
            </div>

            <div class="filter-group" style="display: flex; gap: 5px;">
                <button class="search-btn" onclick="searchNotes()">Search</button>
                <button class="clear-btn" onclick="clearFilters()">Clear</button>
            </div>
        </div>

        <div class="results">
            <div class="results-header">
                <div id="resultsInfo">Click "Search" to load notes</div>
                <div>
                    <button onclick="searchNotes()"
                        style="background: #28a745; color: white; border: none; padding: 6px 12px; border-radius: 3px; cursor: pointer;">
                        Refresh
                    </button>
                </div>
            </div>
            <div id="notesList" class="notes-list">
                <div class="no-results">Use the filters above and click "Search" to find notes</div>
            </div>
        </div>
    </div>

    <script>
        let currentNotes = [];

        async function searchNotes() {
            const search = document.getElementById('searchInput').value;
            const poNumber = document.getElementById('poFilter').value;
            const vendor = document.getElementById('vendorFilter').value;
            const dateFrom = document.getElementById('dateFromFilter').value;
            const dateTo = document.getElementById('dateToFilter').value;

            const params = new URLSearchParams();
            if (search) params.append('search', search);
            if (poNumber) params.append('poNumber', poNumber);
            if (vendor) params.append('vendor', vendor);
            if (dateFrom) params.append('dateFrom', dateFrom);
            if (dateTo) params.append('dateTo', dateTo);
            params.append('limit', '500'); // Get more results

            const notesList = document.getElementById('notesList');
            const resultsInfo = document.getElementById('resultsInfo');
            const filteredCount = document.getElementById('filteredCount');

            notesList.innerHTML = '<div class="loading">Searching notes...</div>';

            try {
                const response = await fetch(`/purchase-orders/notes?${params}`);
                const data = await response.json();
                currentNotes = data.notes;

                if (data.notes.length === 0) {
                    notesList.innerHTML = '<div class="no-results">No notes found matching your criteria</div>';
                    resultsInfo.textContent = 'No results';
                    filteredCount.textContent = '0';
                } else {
                    renderNotes(data.notes);
                    resultsInfo.textContent = `Found ${data.notes.length} notes${data.hasMore ? ' (showing first 500)' : ''}`;
                    filteredCount.textContent = data.notes.length;
                }
            } catch (error) {
                console.error('Search error:', error);
                notesList.innerHTML = '<div class="no-results">Error loading notes</div>';
                resultsInfo.textContent = 'Error';
                filteredCount.textContent = '0';
            }
        }

        function renderNotes(notes) {
            const notesList = document.getElementById('notesList');
            notesList.innerHTML = notes.map(note => `
                <div class="note-item">
                    <div class="note-header">
                        <a href="/purchase-orders" class="note-po">${note.poNumber}</a>
                        <span class="note-vendor">${note.vendor}</span>
                        <span class="note-date">${new Date(note.createdAt).toLocaleString()}</span>
                    </div>
                    <div class="note-content">${escapeHtml(note.content)}</div>
                    <div class="note-actions">
                        <button class="delete-btn" onclick="deleteNote('${note._id}')">Delete</button>
                    </div>
                </div>
            `).join('');
        }

        async function deleteNote(noteId) {
            if (!confirm('Are you sure you want to delete this note?')) {
                return;
            }

            try {
                const response = await fetch(`/purchase-orders/notes/${noteId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (response.ok) {
                    // Remove from current display
                    currentNotes = currentNotes.filter(note => note._id !== noteId);
                    renderNotes(currentNotes);
                    document.getElementById('filteredCount').textContent = currentNotes.length;
                } else {
                    alert(result.error || 'Error deleting note');
                }
            } catch (error) {
                console.error('Error deleting note:', error);
                alert('Error deleting note');
            }
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('poFilter').value = '';
            document.getElementById('vendorFilter').value = '';
            document.getElementById('dateFromFilter').value = '';
            document.getElementById('dateToFilter').value = '';

            document.getElementById('notesList').innerHTML = '<div class="no-results">Use the filters above and click "Search" to find notes</div>';
            document.getElementById('resultsInfo').textContent = 'Click "Search" to load notes';
            document.getElementById('filteredCount').textContent = '0';
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        async function migrateExistingNotes() {
            const migrateBtn = document.getElementById('migrateBtn');
            const originalText = migrateBtn.innerHTML;

            if (!confirm('This will migrate existing notes from Purchase Orders to individual Note records. Continue?')) {
                return;
            }

            migrateBtn.innerHTML = '⏳ Migrating...';
            migrateBtn.disabled = true;

            try {
                const response = await fetch('/purchase-orders/migrate-notes', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (response.ok) {
                    alert(`Migration completed!\n\nMigrated: ${result.migrated} notes\nSkipped: ${result.skipped} (already migrated)\nErrors: ${result.errors}\nTotal processed: ${result.total}`);

                    // Refresh the stats if any notes were migrated
                    if (result.migrated > 0) {
                        location.reload();
                    }
                } else {
                    alert(`Migration failed: ${result.error}`);
                }
            } catch (error) {
                console.error('Migration error:', error);
                alert('Migration failed: ' + error.message);
            } finally {
                migrateBtn.innerHTML = originalText;
                migrateBtn.disabled = false;
            }
        }

        // Allow Enter key to search
        document.getElementById('searchInput').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                searchNotes();
            }
        });

        // Navigation accordion functionality
        function toggleAccordion(accordionId) {
            const accordion = document.getElementById(accordionId);
            const button = accordion.previousElementSibling;
            
            // Close all other accordions
            document.querySelectorAll('.nav-accordion-content, .user-dropdown-content').forEach(content => {
                if (content.id !== accordionId) {
                    content.classList.remove('show');
                    const otherButton = content.previousElementSibling;
                    if (otherButton) otherButton.classList.remove('active');
                }
            });
            
            // Toggle current accordion
            accordion.classList.toggle('show');
            button.classList.toggle('active');
        }

        // Close accordions when clicking outside
        document.addEventListener('click', function(event) {
            const isAccordionButton = event.target.closest('.nav-accordion-btn, .user-dropdown');
            if (!isAccordionButton) {
                document.querySelectorAll('.nav-accordion-content, .user-dropdown-content').forEach(content => {
                    content.classList.remove('show');
                    const button = content.previousElementSibling;
                    if (button) button.classList.remove('active');
                });
            }
        });
    </script>

    <!-- Bootstrap JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>