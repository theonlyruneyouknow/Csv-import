<!DOCTYPE html>
<html>
<head>
    <title>Notes Manager - Purchase Orders</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f8f9fa; }
        .container { max-width: 1200px; margin: 0 auto; }
        
        .header { 
            display: flex; justify-content: space-between; align-items: center; 
            margin-bottom: 20px; background: white; padding: 20px; border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .back-btn { 
            background: #6c757d; color: white; padding: 10px 20px; 
            text-decoration: none; border-radius: 4px; 
        }
        .back-btn:hover { background: #5a6268; }
        
        .stats { 
            display: flex; gap: 20px; margin-bottom: 20px; 
        }
        .stat { 
            background: white; padding: 15px; border-radius: 8px; text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1); flex: 1;
        }
        .stat-number { font-size: 24px; font-weight: bold; color: #007bff; }
        .stat-label { font-size: 12px; color: #6c757d; text-transform: uppercase; }
        
        .filters { 
            background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;
            display: grid; grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr; gap: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .filter-group { display: flex; flex-direction: column; }
        .filter-group label { font-size: 12px; color: #6c757d; margin-bottom: 5px; font-weight: bold; }
        .filter-group input, .filter-group select { 
            padding: 8px; border: 1px solid #ddd; border-radius: 4px; 
        }
        
        .search-btn { 
            background: #007bff; color: white; border: none; padding: 8px 15px; 
            border-radius: 4px; cursor: pointer; margin-top: 19px;
        }
        .search-btn:hover { background: #0056b3; }
        
        .clear-btn { 
            background: #6c757d; color: white; border: none; padding: 8px 15px; 
            border-radius: 4px; cursor: pointer; margin-top: 19px;
        }
        .clear-btn:hover { background: #5a6268; }
        
        .results { 
            background: white; border-radius: 8px; overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .results-header { 
            background: #f8f9fa; padding: 15px; border-bottom: 1px solid #dee2e6;
            display: flex; justify-content: space-between; align-items: center;
        }
        
        .notes-list { max-height: 600px; overflow-y: auto; }
        
        .note-item { 
            border-bottom: 1px solid #dee2e6; padding: 15px;
            transition: background 0.2s ease;
        }
        .note-item:hover { background: #f8f9fa; }
        .note-item:last-child { border-bottom: none; }
        
        .note-header { 
            display: flex; justify-content: between; align-items: center; 
            margin-bottom: 8px; gap: 15px;
        }
        .note-po { 
            font-family: monospace; font-weight: bold; color: #007bff; 
            text-decoration: none; font-size: 14px;
        }
        .note-po:hover { text-decoration: underline; }
        .note-vendor { color: #495057; font-size: 14px; }
        .note-date { color: #6c757d; font-size: 12px; margin-left: auto; }
        
        .note-content { 
            color: #495057; line-height: 1.4; white-space: pre-wrap; 
            background: #f8f9fa; padding: 10px; border-radius: 4px; margin: 8px 0;
        }
        
        .note-actions { display: flex; gap: 8px; }
        .delete-btn { 
            background: #dc3545; color: white; border: none; padding: 4px 8px; 
            border-radius: 3px; cursor: pointer; font-size: 11px;
        }
        .delete-btn:hover { background: #c82333; }
        
        .no-results { 
            text-align: center; padding: 40px; color: #6c757d; 
            font-style: italic;
        }
        
        .loading { text-align: center; padding: 40px; color: #6c757d; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Notes Manager</h1>
            <div style="display: flex; gap: 10px;">
                <button id="migrateBtn" class="search-btn" onclick="migrateExistingNotes()">üîÑ Migrate Existing Notes</button>
                <a href="/purchase-orders" class="back-btn">‚Üê Back to Dashboard</a>
            </div>
        </div>
        
        <div class="stats">
            <div class="stat">
                <div class="stat-number"><%= totalNotes %></div>
                <div class="stat-label">Total Notes</div>
            </div>
            <div class="stat">
                <div class="stat-number"><%= recentNotes %></div>
                <div class="stat-label">This Week</div>
            </div>
            <div class="stat">
                <div class="stat-number" id="filteredCount">0</div>
                <div class="stat-label">Showing</div>
            </div>
        </div>
        
        <div class="filters">
            <div class="filter-group">
                <label>Search Content</label>
                <input type="text" id="searchInput" placeholder="Search in notes...">
            </div>
            
            <div class="filter-group">
                <label>PO Number</label>
                <select id="poFilter">
                    <option value="">All POs</option>
                    <% uniquePOs.forEach(po => { %>
                        <option value="<%= po %>"><%= po %></option>
                    <% }); %>
                </select>
            </div>
            
            <div class="filter-group">
                <label>Vendor</label>
                <select id="vendorFilter">
                    <option value="">All Vendors</option>
                    <% uniqueVendors.forEach(vendor => { %>
                        <option value="<%= vendor %>"><%= vendor %></option>
                    <% }); %>
                </select>
            </div>
            
            <div class="filter-group">
                <label>Date From</label>
                <input type="date" id="dateFromFilter">
            </div>
            
            <div class="filter-group">
                <label>Date To</label>
                <input type="date" id="dateToFilter">
            </div>
            
            <div class="filter-group" style="display: flex; gap: 5px;">
                <button class="search-btn" onclick="searchNotes()">Search</button>
                <button class="clear-btn" onclick="clearFilters()">Clear</button>
            </div>
        </div>
        
        <div class="results">
            <div class="results-header">
                <div id="resultsInfo">Click "Search" to load notes</div>
                <div>
                    <button onclick="searchNotes()" style="background: #28a745; color: white; border: none; padding: 6px 12px; border-radius: 3px; cursor: pointer;">
                        Refresh
                    </button>
                </div>
            </div>
            <div id="notesList" class="notes-list">
                <div class="no-results">Use the filters above and click "Search" to find notes</div>
            </div>
        </div>
    </div>

    <script>
        let currentNotes = [];

        async function searchNotes() {
            const search = document.getElementById('searchInput').value;
            const poNumber = document.getElementById('poFilter').value;
            const vendor = document.getElementById('vendorFilter').value;
            const dateFrom = document.getElementById('dateFromFilter').value;
            const dateTo = document.getElementById('dateToFilter').value;
            
            const params = new URLSearchParams();
            if (search) params.append('search', search);
            if (poNumber) params.append('poNumber', poNumber);
            if (vendor) params.append('vendor', vendor);
            if (dateFrom) params.append('dateFrom', dateFrom);
            if (dateTo) params.append('dateTo', dateTo);
            params.append('limit', '500'); // Get more results
            
            const notesList = document.getElementById('notesList');
            const resultsInfo = document.getElementById('resultsInfo');
            const filteredCount = document.getElementById('filteredCount');
            
            notesList.innerHTML = '<div class="loading">Searching notes...</div>';
            
            try {
                const response = await fetch(`/purchase-orders/notes?${params}`);
                const data = await response.json();
                currentNotes = data.notes;
                
                if (data.notes.length === 0) {
                    notesList.innerHTML = '<div class="no-results">No notes found matching your criteria</div>';
                    resultsInfo.textContent = 'No results';
                    filteredCount.textContent = '0';
                } else {
                    renderNotes(data.notes);
                    resultsInfo.textContent = `Found ${data.notes.length} notes${data.hasMore ? ' (showing first 500)' : ''}`;
                    filteredCount.textContent = data.notes.length;
                }
            } catch (error) {
                console.error('Search error:', error);
                notesList.innerHTML = '<div class="no-results">Error loading notes</div>';
                resultsInfo.textContent = 'Error';
                filteredCount.textContent = '0';
            }
        }
        
        function renderNotes(notes) {
            const notesList = document.getElementById('notesList');
            notesList.innerHTML = notes.map(note => `
                <div class="note-item">
                    <div class="note-header">
                        <a href="/purchase-orders" class="note-po">${note.poNumber}</a>
                        <span class="note-vendor">${note.vendor}</span>
                        <span class="note-date">${new Date(note.createdAt).toLocaleString()}</span>
                    </div>
                    <div class="note-content">${escapeHtml(note.content)}</div>
                    <div class="note-actions">
                        <button class="delete-btn" onclick="deleteNote('${note._id}')">Delete</button>
                    </div>
                </div>
            `).join('');
        }
        
        async function deleteNote(noteId) {
            if (!confirm('Are you sure you want to delete this note?')) {
                return;
            }
            
            try {
                const response = await fetch(`/purchase-orders/notes/${noteId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    // Remove from current display
                    currentNotes = currentNotes.filter(note => note._id !== noteId);
                    renderNotes(currentNotes);
                    document.getElementById('filteredCount').textContent = currentNotes.length;
                } else {
                    alert(result.error || 'Error deleting note');
                }
            } catch (error) {
                console.error('Error deleting note:', error);
                alert('Error deleting note');
            }
        }
        
        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('poFilter').value = '';
            document.getElementById('vendorFilter').value = '';
            document.getElementById('dateFromFilter').value = '';
            document.getElementById('dateToFilter').value = '';
            
            document.getElementById('notesList').innerHTML = '<div class="no-results">Use the filters above and click "Search" to find notes</div>';
            document.getElementById('resultsInfo').textContent = 'Click "Search" to load notes';
            document.getElementById('filteredCount').textContent = '0';
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        async function migrateExistingNotes() {
            const migrateBtn = document.getElementById('migrateBtn');
            const originalText = migrateBtn.innerHTML;
            
            if (!confirm('This will migrate existing notes from Purchase Orders to individual Note records. Continue?')) {
                return;
            }
            
            migrateBtn.innerHTML = '‚è≥ Migrating...';
            migrateBtn.disabled = true;
            
            try {
                const response = await fetch('/purchase-orders/migrate-notes', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    alert(`Migration completed!\n\nMigrated: ${result.migrated} notes\nSkipped: ${result.skipped} (already migrated)\nErrors: ${result.errors}\nTotal processed: ${result.total}`);
                    
                    // Refresh the stats if any notes were migrated
                    if (result.migrated > 0) {
                        location.reload();
                    }
                } else {
                    alert(`Migration failed: ${result.error}`);
                }
            } catch (error) {
                console.error('Migration error:', error);
                alert('Migration failed: ' + error.message);
            } finally {
                migrateBtn.innerHTML = originalText;
                migrateBtn.disabled = false;
            }
        }
        
        // Allow Enter key to search
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchNotes();
            }
        });
    </script>
</body>
</html>
