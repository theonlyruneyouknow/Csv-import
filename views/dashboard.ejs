<!DOCTYPE html>
<html>

<head>
    <title>Purchase Orders Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .upload-btn {
            background: #007bff;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 4px;
        }

        /* Filters Section */
        .filters {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
            gap: 15px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            font-size: 12px;
            color: #6c757d;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .filter-group input,
        .filter-group select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .clear-filters {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 19px;
        }

        .clear-filters:hover {
            background: #5a6268;
        }

        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 12px 8px;
            text-align: left;
        }

        th {
            background-color: #f8f9fa;
            font-weight: bold;
            cursor: pointer;
            user-select: none;
            position: relative;
        }

        th:hover {
            background-color: #e9ecef;
        }

        th.sortable::after {
            content: ' ↕️';
            font-size: 12px;
            color: #6c757d;
        }

        th.sort-asc::after {
            content: ' ↑';
            color: #007bff;
        }

        th.sort-desc::after {
            content: ' ↓';
            color: #007bff;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #e9ecef;
        }

        tr.hidden {
            display: none;
        }

        /* Improved font sizes - 16px for better readability */
        .notes-cell {
            min-width: 200px;
            position: relative;
        }

        /* Enhanced Notes Styles - Notes appear below the row */
        .notes-row {
            display: none;
            /* Hidden by default */
            background: #f8f9fa;
            border-left: 4px solid #007bff;
        }

        .notes-row.expanded {
            display: table-row;
        }

        /* Line Items Styles */
        .line-items-row {
            display: none;
            background: #f0f8ff;
            border-left: 4px solid #28a745;
        }

        .line-items-row.expanded {
            display: table-row;
        }

        .line-items-cell-expanded {
            padding: 15px;
            border: none;
            border-top: 1px solid #dee2e6;
        }

        .line-items-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            border-bottom: 1px solid #dee2e6;
            padding-bottom: 10px;
        }

        .line-items-title {
            font-weight: bold;
            color: #28a745;
            font-size: 14px;
        }

        .line-items-actions {
            display: flex;
            gap: 10px;
        }

        .line-items-close {
            background: #6c757d;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 11px;
        }

        .line-items-close:hover {
            background: #5a6268;
        }

        .line-items-container {
            max-height: 300px;
            overflow-y: auto;
        }

        .line-item {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 12px;
            margin-bottom: 8px;
        }

        .line-item-date {
            font-size: 11px;
            color: #6c757d;
            margin-bottom: 5px;
        }

        .line-item-memo {
            font-size: 13px;
            color: #495057;
            line-height: 1.3;
        }

        .no-line-items {
            text-align: center;
            color: #6c757d;
            font-style: italic;
            padding: 20px;
            background: white;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }

        .loading-line-items {
            text-align: center;
            color: #6c757d;
            padding: 20px;
            background: white;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }

        .notes-cell-expanded {
            padding: 15px;
            border: none;
            border-top: 1px solid #dee2e6;
        }

        .notes-container {
            position: relative;
            width: 100%;
            max-width: 100%;
        }

        .notes-input {
            width: 100%;
            border: 1px solid #ddd;
            background: white;
            padding: 10px;
            border-radius: 4px;
            min-height: 80px;
            font-size: 16px;
            resize: vertical;
            font-family: Arial, sans-serif;
        }

        .notes-input:focus {
            border: 1px solid #007bff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

        .notes-input.has-notes {
            background: #fff3cd;
            border-color: #ffeaa7;
        }

        .notes-input.saving {
            background: #d1ecf1;
            border-color: #bee5eb;
        }

        /* Notes toggle in the main row */
        .notes-toggle-cell {
            text-align: center;
            vertical-align: middle;
            width: 70px;
            /* Increased for two buttons */
        }

        .notes-toggle {
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            width: 28px;
            height: 28px;
            cursor: pointer;
            font-size: 12px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .notes-toggle:hover {
            background: #0056b3;
            transform: scale(1.05);
        }

        .notes-toggle.has-notes {
            background: #28a745;
        }

        .notes-toggle.has-notes:hover {
            background: #218838;
        }

        .line-items-toggle {
            background: #17a2b8;
            color: white;
            border: none;
            border-radius: 4px;
            width: 32px;
            height: 28px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
        }

        .line-items-toggle:hover {
            background: #138496;
            transform: scale(1.05);
        }

        .notes-history-btn {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 4px;
            width: 28px;
            height: 28px;
            cursor: pointer;
            font-size: 12px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .notes-history-btn:hover {
            background: #5a6268;
            transform: scale(1.05);
        }

        /* Notes header with actions */
        .notes-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding-bottom: 8px;
            border-bottom: 1px solid #dee2e6;
        }

        .notes-title {
            font-weight: bold;
            color: #495057;
            font-size: 16px;
        }

        .notes-actions {
            display: flex;
            gap: 8px;
        }

        .notes-close {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 4px 8px;
            cursor: pointer;
            font-size: 12px;
        }

        .notes-close:hover {
            background: #5a6268;
        }

        /* Status Dropdown - 16px font */
        .status-select {
            width: 100%;
            border: 1px solid #ddd;
            background: white;
            padding: 6px 8px;
            border-radius: 4px;
            font-size: 16px;
        }

        .status-select:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

        .status-select.has-status {
            background: #e7f3ff;
            border-color: #007bff;
        }

        .status-select.saving {
            background: #d1ecf1;
            border-color: #bee5eb;
        }

        /* Adjusted column widths - PO number smaller, vendor larger */
        .po-number {
            font-family: monospace;
            color: #495057;
            font-size: 16px;
            font-weight: bold;
            width: 140px;
            /* Increased slightly for URL button */
            position: relative;
        }

        /* PO Number URL functionality */
        .po-container {
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .po-link {
            color: #007bff;
            text-decoration: none;
            font-family: monospace;
            font-size: 16px;
            font-weight: bold;
        }

        .po-link:hover {
            text-decoration: underline;
            color: #0056b3;
        }

        .po-text {
            font-family: monospace;
            font-size: 16px;
            font-weight: bold;
            color: #495057;
        }

        .url-btn {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 3px;
            width: 20px;
            height: 20px;
            cursor: pointer;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0.7;
            transition: all 0.2s ease;
        }

        .url-btn:hover {
            opacity: 1;
            background: #5a6268;
        }

        .url-btn.has-url {
            background: #28a745;
        }

        .url-btn.has-url:hover {
            background: #218838;
        }

        /* URL Modal */
        .url-modal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .url-modal-content {
            background-color: white;
            margin: 20% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .url-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
        }

        .url-modal-title {
            font-size: 16px;
            font-weight: bold;
            color: #495057;
        }

        .url-close {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #6c757d;
        }

        .url-close:hover {
            color: #495057;
        }

        .url-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .url-input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            width: 100%;
            box-sizing: border-box;
        }

        .url-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .url-save-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .url-save-btn:hover {
            background: #0056b3;
        }

        .url-save-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        .url-remove-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .url-remove-btn:hover {
            background: #c82333;
        }

        .url-cancel-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .url-cancel-btn:hover {
            background: #5a6268;
        }

        .vendor {
            width: 280px;
            /* Increased from ~180px */
            word-wrap: break-word;
        }

        .date-cell {
            width: 100px;
        }

        .update-date-cell {
            width: 130px;
            font-size: 14px;
        }

        .next-update-cell {
            width: 140px;
        }

        /* Date input styling */
        .date-input {
            width: 100%;
            border: 1px solid transparent;
            background: transparent;
            padding: 4px 6px;
            border-radius: 4px;
            font-size: 14px;
            color: #495057;
        }

        .date-input:focus {
            background: white;
            border: 1px solid #007bff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

        .date-input.has-date {
            background: #e7f3ff;
            border-color: #b3d9ff;
        }

        .date-input.saving {
            background: #d1ecf1;
            border-color: #bee5eb;
        }

        .date-input.overdue {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }

        /* Last updated display */
        .last-updated {
            font-size: 12px;
            color: #6c757d;
            font-style: italic;
        }

        .last-updated.recent {
            color: #28a745;
        }

        .last-updated.old {
            color: #dc3545;
        }

        .notes-cell {
            min-width: 200px;
        }

        .status-cell {
            min-width: 150px;
        }

        .ns-status-cell {
            min-width: 120px;
        }

        /* NS Status display styling - 16px font */
        .ns-status-display {
            color: #856404;
            background: #fff3cd;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 16px;
            font-weight: 500;
            display: inline-block;
        }

        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
        }

        .stat {
            text-align: center;
        }

        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }

        .stat-label {
            font-size: 12px;
            color: #6c757d;
            text-transform: uppercase;
        }

        .results-info {
            color: #6c757d;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .no-results {
            text-align: center;
            padding: 40px;
            color: #6c757d;
            background: #f8f9fa;
            border-radius: 8px;
        }

        /* Status Management Modal */
        .status-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .status-modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .status-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
        }

        .status-modal-title {
            font-size: 18px;
            font-weight: bold;
            color: #495057;
        }

        .status-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #6c757d;
        }

        .status-close:hover {
            color: #495057;
        }

        .status-form {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .status-input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        .status-add-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        .status-add-btn:hover {
            background: #218838;
        }

        .status-add-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        .status-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            margin-bottom: 5px;
            background: #f8f9fa;
        }

        .status-item.default {
            background: #e7f3ff;
            border-color: #b3d9ff;
        }

        .status-item-name {
            font-size: 16px;
        }

        .status-item.default .status-item-name::after {
            content: " (default)";
            font-size: 12px;
            color: #6c757d;
            font-style: italic;
        }

        .status-delete-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }

        .status-delete-btn:hover {
            background: #c82333;
        }

        .status-delete-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        .manage-status-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-left: 10px;
        }

        .manage-status-btn:hover {
            background: #5a6268;
        }

        .notes-manager-btn {
            background: #28a745;
            color: white;
            padding: 6px 12px;
            text-decoration: none;
            border-radius: 4px;
            font-size: 12px;
            margin-left: 10px;
        }

        .notes-manager-btn:hover {
            background: #218838;
        }

        /* Notes History Modal */
        .notes-history-content {
            max-height: 500px;
            overflow-y: auto;
        }

        .note-item {
            border: 1px solid #dee2e6;
            border-radius: 4px;
            margin-bottom: 10px;
            padding: 12px;
            background: white;
        }

        .note-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
            font-size: 12px;
            color: #6c757d;
        }

        .note-date {
            font-weight: bold;
        }

        .note-content {
            padding: 8px 0;
            font-size: 14px;
            line-height: 1.4;
            color: #495057;
            white-space: pre-wrap;
        }

        .note-delete-btn {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 2px 6px;
            cursor: pointer;
            font-size: 10px;
        }

        .note-delete-btn:hover {
            background: #c82333;
        }

        .no-notes {
            text-align: center;
            color: #6c757d;
            font-style: italic;
            padding: 40px;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Purchase Orders Dashboard</h1>
            <div>
                <button class="manage-status-btn" onclick="openStatusModal()">⚙️ Manage Status Options</button>
                <a href="/purchase-orders/notes-manager" class="notes-manager-btn">📝 Notes Manager</a>
                <a href="/upload" class="upload-btn">📁 Import New CSV</a>
            </div>
        </div>

        <% if (purchaseOrders.length> 0) { %>
            <!-- Filters Section -->
            <div class="filters">
                <div class="filter-group">
                    <label>Search Vendor or PO Number</label>
                    <input type="text" id="searchFilter" placeholder="Type to search...">
                </div>

                <div class="filter-group">
                    <label>NS Status Filter</label>
                    <select id="nsStatusFilter">
                        <option value="all">All NS Statuses</option>
                        <% uniqueNSStatuses.forEach(status=> { %>
                            <option value="<%= status %>">
                                <%= status %>
                            </option>
                            <% }); %>
                    </select>
                </div>

                <div class="filter-group">
                    <label>Status Filter</label>
                    <select id="statusFilter">
                        <option value="all">All Statuses</option>
                        <% uniqueStatuses.forEach(status=> { %>
                            <option value="<%= status %>">
                                <%= status %>
                            </option>
                            <% }); %>
                    </select>
                </div>

                <div class="filter-group">
                    <label>Notes Filter</label>
                    <select id="notesFilter">
                        <option value="all">All POs</option>
                        <option value="with-notes">With Notes Only</option>
                        <option value="without-notes">Without Notes Only</option>
                    </select>
                </div>

                <div class="filter-group">
                    <button class="clear-filters" onclick="clearAllFilters()">Clear Filters</button>
                </div>
            </div>

            <!-- Stats Section -->
            <div class="stats">
                <div class="stat">
                    <div class="stat-number" id="totalCount">
                        <%= purchaseOrders.length %>
                    </div>
                    <div class="stat-label">Total POs</div>
                </div>
                <div class="stat">
                    <div class="stat-number" id="notesCount">
                        <%= purchaseOrders.filter(po=> po.notes && po.notes.trim()).length %>
                    </div>
                    <div class="stat-label">With Notes</div>
                </div>
                <div class="stat">
                    <div class="stat-number" id="visibleCount">
                        <%= purchaseOrders.length %>
                    </div>
                    <div class="stat-label">Showing</div>
                </div>
            </div>

            <div class="results-info" id="resultsInfo">
                Showing all <%= purchaseOrders.length %> purchase orders
            </div>
            <% } %>

                <% if (purchaseOrders.length===0) { %>
                    <div style="text-align: center; padding: 60px; color: #6c757d;">
                        <h3>No Purchase Orders Found</h3>
                        <p>Upload a CSV file to get started</p>
                        <a href="/upload" class="upload-btn">📁 Upload CSV</a>
                    </div>
                    <% } else { %>
                        <table id="purchaseOrdersTable">
                            <thead>
                                <tr>
                                    <th class="sortable date-cell" data-column="date">Date</th>
                                    <th class="sortable po-number" data-column="poNumber">PO Number</th>
                                    <th class="sortable vendor" data-column="vendor">Vendor</th>
                                    <th class="ns-status-cell">NS Status</th>
                                    <th class="status-cell">Status</th>
                                    <th class="sortable update-date-cell" data-column="updatedAt">Last Updated</th>
                                    <th class="next-update-cell">Next Update</th>
                                    <th class="notes-toggle-cell">Notes</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% purchaseOrders.forEach((po, index)=> { %>
                                    <!-- Main data row -->
                                    <tr data-po='<%= JSON.stringify(po) %>' data-index="<%= index %>">
                                        <td class="date-cell">
                                            <%= po.date %>
                                        </td>
                                        <td class="po-number">
                                            <div class="po-container">
                                                <% if (po.poUrl && po.poUrl.trim()) { %>
                                                    <a href="<%= po.poUrl %>" target="_blank" class="po-link"
                                                        title="Open <%= po.poNumber %> link">
                                                        <%= po.poNumber %>
                                                    </a>
                                                    <% } else { %>
                                                        <span class="po-text">
                                                            <%= po.poNumber %>
                                                        </span>
                                                        <% } %>
                                                            <button
                                                                class="url-btn <%= po.poUrl && po.poUrl.trim() ? 'has-url' : '' %>"
                                                                data-id="<%= po._id %>" data-po="<%= po.poNumber %>"
                                                                data-url="<%= po.poUrl || '' %>"
                                                                title="<%= po.poUrl && po.poUrl.trim() ? 'Edit URL' : 'Add URL' %>">
                                                                🔗
                                                            </button>
                                            </div>
                                        </td>
                                        <td class="vendor" title="<%= po.vendor %>">
                                            <%= po.vendor %>
                                        </td>
                                        <td class="ns-status-cell">
                                            <span class="ns-status-display">
                                                <%= po.nsStatus %>
                                            </span>
                                        </td>
                                        <td class="status-cell">
                                            <select class="status-select <%= po.status ? 'has-status' : '' %>"
                                                data-id="<%= po._id %>" data-po="<%= po.poNumber %>"
                                                title="Custom Status for PO <%= po.poNumber %>">
                                                <option value="">Select Status...</option>
                                                <% statusOptions.forEach(option=> { %>
                                                    <option value="<%= option %>" <%=po.status===option ? 'selected'
                                                        : '' %>>
                                                        <%= option %>
                                                    </option>
                                                    <% }); %>
                                            </select>
                                        </td>
                                        <td class="update-date-cell">
                                            <div
                                                class="last-updated <%= new Date() - new Date(po.updatedAt) < 86400000 ? 'recent' : (new Date() - new Date(po.updatedAt) > 604800000 ? 'old' : '') %>">
                                                <% if (po.updatedAt) { %>
                                                    <%= new Date(po.updatedAt).toLocaleDateString() %>
                                                        <% } else { %>
                                                            Never
                                                            <% } %>
                                            </div>
                                        </td>
                                        <td class="next-update-cell">
                                            <input type="date"
                                                class="date-input <%= po.nextUpdateDate ? 'has-date' : '' %> <%= po.nextUpdateDate && new Date(po.nextUpdateDate) < new Date() ? 'overdue' : '' %>"
                                                value="<%= po.nextUpdateDate ? new Date(po.nextUpdateDate).toISOString().split('T')[0] : '' %>"
                                                data-id="<%= po._id %>" data-po="<%= po.poNumber %>"
                                                title="Set next update date for PO <%= po.poNumber %>">
                                        </td>
                                        <td class="notes-toggle-cell">
                                            <div style="display: flex; gap: 4px;">
                                                <button class="line-items-toggle" type="button"
                                                    data-index="<%= index %>" data-id="<%= po._id %>"
                                                    title="View line items for PO <%= po.poNumber %>">
                                                    📦
                                                </button>
                                                <button
                                                    class="notes-toggle <%= po.notes && po.notes.trim() ? 'has-notes' : '' %>"
                                                    type="button" data-index="<%= index %>"
                                                    title="<%= po.notes && po.notes.trim() ? 'View/Edit notes' : 'Add notes' %>">
                                                    <%= po.notes && po.notes.trim() ? '📝' : '➕' %>
                                                </button>
                                                <button class="notes-history-btn" type="button" data-id="<%= po._id %>"
                                                    data-po="<%= po.poNumber %>" title="View notes history">
                                                    📋
                                                </button>
                                            </div>
                                        </td>
                                    </tr>

                                    <!-- Expandable line items row -->
                                    <tr class="line-items-row" id="line-items-row-<%= index %>">
                                        <td colspan="8" class="line-items-cell-expanded">
                                            <div class="line-items-header">
                                                <div class="line-items-title">Line Items for PO <%= po.poNumber %>
                                                </div>
                                                <div class="line-items-actions">
                                                    <button class="line-items-close"
                                                        data-index="<%= index %>">Close</button>
                                                </div>
                                            </div>
                                            <div class="line-items-container" id="line-items-container-<%= index %>">
                                                <div class="loading-line-items">Loading line items...</div>
                                            </div>
                                        </td>
                                    </tr>

                                    <!-- Expandable notes row -->
                                    <tr class="notes-row" id="notes-row-<%= index %>">
                                        <td colspan="8" class="notes-cell-expanded">
                                            <div class="notes-header">
                                                <div class="notes-title">Notes for PO <%= po.poNumber %>
                                                </div>
                                                <div class="notes-actions">
                                                    <button class="notes-close" data-index="<%= index %>">Close</button>
                                                </div>
                                            </div>
                                            <div class="notes-container">
                                                <textarea
                                                    class="notes-input <%= po.notes && po.notes.trim() ? 'has-notes' : '' %>"
                                                    data-id="<%= po._id %>" data-po="<%= po.poNumber %>"
                                                    data-index="<%= index %>"
                                                    placeholder="Add detailed notes for <%= po.poNumber %>... (These notes persist across CSV uploads)"><%= po.notes %></textarea>
                                            </div>
                                        </td>
                                    </tr>
                                    <% }); %>
                            </tbody>
                        </table>

                        <div class="no-results" id="noResults" style="display: none;">
                            <h3>No Purchase Orders Match Your Filters</h3>
                            <p>Try adjusting your search criteria or clearing the filters.</p>
                        </div>
                        <% } %>
    </div>

    <!-- Status Management Modal -->
    <div id="statusModal" class="status-modal">
        <div class="status-modal-content">
            <div class="status-modal-header">
                <div class="status-modal-title">Manage Status Options</div>
                <button class="status-close" onclick="closeStatusModal()">&times;</button>
            </div>

            <div class="status-form">
                <input type="text" id="statusInput" class="status-input" placeholder="Enter new status option..."
                    maxlength="50">
                <button id="addStatusBtn" class="status-add-btn" onclick="addStatusOption()">Add</button>
            </div>

            <div id="statusList" class="status-list">
                <!-- Status options will be loaded here -->
            </div>
        </div>
    </div>

    <!-- URL Management Modal -->
    <div id="urlModal" class="url-modal">
        <div class="url-modal-content">
            <div class="url-modal-header">
                <div class="url-modal-title" id="urlModalTitle">Add URL for PO</div>
                <button class="url-close" onclick="closeUrlModal()">&times;</button>
            </div>

            <div class="url-form">
                <label for="urlInput">URL:</label>
                <input type="url" id="urlInput" class="url-input" placeholder="https://example.com" autocomplete="off">

                <div class="url-actions">
                    <button id="urlRemoveBtn" class="url-remove-btn" onclick="removeUrl()" style="display: none;">Remove
                        URL</button>
                    <button class="url-cancel-btn" onclick="closeUrlModal()">Cancel</button>
                    <button id="urlSaveBtn" class="url-save-btn" onclick="saveUrl()">Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Notes History Modal -->
    <div id="notesHistoryModal" class="status-modal">
        <div class="status-modal-content" style="max-width: 800px;">
            <div class="status-modal-header">
                <div class="status-modal-title" id="notesHistoryTitle">Notes History</div>
                <button class="status-close" onclick="closeNotesHistoryModal()">&times;</button>
            </div>

            <div id="notesHistoryContent" class="notes-history-content">
                <!-- Notes history will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        let currentSort = { column: null, direction: null };

        // Enhanced Notes functionality - notes appear below each row

        // Handle notes toggle buttons
        document.querySelectorAll('.notes-toggle').forEach(toggleBtn => {
            toggleBtn.addEventListener('click', function () {
                const index = this.dataset.index;
                const notesRow = document.getElementById(`notes-row-${index}`);
                const isExpanded = notesRow.classList.contains('expanded');

                if (isExpanded) {
                    // Collapse
                    notesRow.classList.remove('expanded');
                } else {
                    // Expand
                    notesRow.classList.add('expanded');
                    // Focus on the textarea
                    const textarea = notesRow.querySelector('.notes-input');
                    setTimeout(() => textarea.focus(), 100);
                }
            });
        });

        // Handle line items toggle buttons
        document.querySelectorAll('.line-items-toggle').forEach(toggleBtn => {
            toggleBtn.addEventListener('click', async function () {
                const index = this.dataset.index;
                const poId = this.dataset.id;
                const lineItemsRow = document.getElementById(`line-items-row-${index}`);
                const isExpanded = lineItemsRow.classList.contains('expanded');

                if (isExpanded) {
                    // Collapse
                    lineItemsRow.classList.remove('expanded');
                } else {
                    // Expand and load line items
                    lineItemsRow.classList.add('expanded');
                    await loadLineItems(index, poId);
                }
            });
        });

        // Handle line items close buttons
        document.querySelectorAll('.line-items-close').forEach(closeBtn => {
            closeBtn.addEventListener('click', function () {
                const index = this.dataset.index;
                const lineItemsRow = document.getElementById(`line-items-row-${index}`);
                lineItemsRow.classList.remove('expanded');
            });
        });

        // Handle close buttons
        document.querySelectorAll('.notes-close').forEach(closeBtn => {
            closeBtn.addEventListener('click', function () {
                const index = this.dataset.index;
                const notesRow = document.getElementById(`notes-row-${index}`);
                notesRow.classList.remove('expanded');
            });
        });

        // Handle notes input with auto-save
        document.querySelectorAll('.notes-input').forEach(input => {
            let timeout;

            input.addEventListener('input', function () {
                const hasContent = this.value.trim().length > 0;
                const index = this.dataset.index;
                const toggleBtn = document.querySelector(`.notes-toggle[data-index="${index}"]`);

                // Update visual state
                if (hasContent) {
                    this.classList.add('has-notes');
                    toggleBtn.classList.add('has-notes');
                    toggleBtn.innerHTML = '📝';
                    toggleBtn.title = 'View/Edit notes';
                } else {
                    this.classList.remove('has-notes');
                    toggleBtn.classList.remove('has-notes');
                    toggleBtn.innerHTML = '➕';
                    toggleBtn.title = 'Add notes';
                }

                clearTimeout(timeout);

                // Show saving state
                this.classList.add('saving');

                timeout = setTimeout(() => {
                    const id = this.dataset.id;
                    const poNumber = this.dataset.po;
                    const notes = this.value;

                    fetch(`/purchase-orders/${id}/notes`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ notes })
                    })
                        .then(response => response.json())
                        .then(data => {
                            // Remove saving state
                            this.classList.remove('saving');

                            // Update stats after note change
                            updateStats();

                            console.log(`Notes saved for PO ${poNumber}`);
                        })
                        .catch(error => {
                            this.classList.remove('saving');
                            console.error('Error saving notes:', error);
                        });
                }, 1000);
            });
        });

        // Auto-save Status when changed
        document.querySelectorAll('.status-select').forEach(select => {
            select.addEventListener('change', function () {
                const id = this.dataset.id;
                const poNumber = this.dataset.po;
                const status = this.value;

                // Show saving state
                this.classList.add('saving');

                fetch(`/purchase-orders/${id}/status`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Remove saving state and update appearance
                        this.classList.remove('saving');

                        if (status) {
                            this.classList.add('has-status');
                        } else {
                            this.classList.remove('has-status');
                        }

                        // Update the data attribute for filtering
                        const row = this.closest('tr');
                        const poData = JSON.parse(row.dataset.po);
                        poData.status = status;
                        row.dataset.po = JSON.stringify(poData);

                        console.log(`Status saved for PO ${poNumber}: "${status}"`);
                    })
                    .catch(error => {
                        this.classList.remove('saving');
                        console.error('Error saving Status:', error);
                    });
            });
        });

        // Auto-save Next Update Date when changed
        document.querySelectorAll('.date-input').forEach(dateInput => {
            dateInput.addEventListener('change', function () {
                const id = this.dataset.id;
                const poNumber = this.dataset.po;
                const nextUpdateDate = this.value;

                // Show saving state
                this.classList.add('saving');

                fetch(`/purchase-orders/${id}/next-update-date`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ nextUpdateDate })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Remove saving state and update appearance
                        this.classList.remove('saving');

                        if (nextUpdateDate) {
                            this.classList.add('has-date');

                            // Check if date is overdue
                            const updateDate = new Date(nextUpdateDate);
                            const today = new Date();
                            today.setHours(0, 0, 0, 0); // Reset time for date comparison

                            if (updateDate < today) {
                                this.classList.add('overdue');
                            } else {
                                this.classList.remove('overdue');
                            }
                        } else {
                            this.classList.remove('has-date', 'overdue');
                        }

                        console.log(`Next update date saved for PO ${poNumber}: ${nextUpdateDate || 'cleared'}`);
                    })
                    .catch(error => {
                        this.classList.remove('saving');
                        console.error('Error saving next update date:', error);
                    });
            });
        });

        // URL Management functionality
        let currentUrlData = { id: '', poNumber: '', url: '' };

        // Handle URL button clicks
        document.querySelectorAll('.url-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                currentUrlData = {
                    id: this.dataset.id,
                    poNumber: this.dataset.po,
                    url: this.dataset.url || ''
                };
                openUrlModal();
            });
        });

        function openUrlModal() {
            const modal = document.getElementById('urlModal');
            const title = document.getElementById('urlModalTitle');
            const input = document.getElementById('urlInput');
            const removeBtn = document.getElementById('urlRemoveBtn');

            title.textContent = `${currentUrlData.url ? 'Edit' : 'Add'} URL for PO ${currentUrlData.poNumber}`;
            input.value = currentUrlData.url;

            if (currentUrlData.url) {
                removeBtn.style.display = 'inline-block';
            } else {
                removeBtn.style.display = 'none';
            }

            modal.style.display = 'block';
            setTimeout(() => input.focus(), 100);
        }

        function closeUrlModal() {
            document.getElementById('urlModal').style.display = 'none';
            document.getElementById('urlInput').value = '';
            currentUrlData = { id: '', poNumber: '', url: '' };
        }

        async function saveUrl() {
            const input = document.getElementById('urlInput');
            const saveBtn = document.getElementById('urlSaveBtn');
            const url = input.value.trim();

            // Basic URL validation
            if (url && !isValidUrl(url)) {
                alert('Please enter a valid URL (e.g., https://example.com)');
                return;
            }

            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const response = await fetch(`/purchase-orders/${currentUrlData.id}/url`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url })
                });

                const result = await response.json();

                if (response.ok) {
                    closeUrlModal();
                    // Refresh the page to update the UI
                    setTimeout(() => window.location.reload(), 300);
                } else {
                    alert(result.error || 'Error saving URL');
                }
            } catch (error) {
                console.error('Error saving URL:', error);
                alert('Error saving URL');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save';
            }
        }

        async function removeUrl() {
            if (!confirm(`Remove URL for PO ${currentUrlData.poNumber}?`)) {
                return;
            }

            const removeBtn = document.getElementById('urlRemoveBtn');
            removeBtn.disabled = true;
            removeBtn.textContent = 'Removing...';

            try {
                const response = await fetch(`/purchase-orders/${currentUrlData.id}/url`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url: '' })
                });

                const result = await response.json();

                if (response.ok) {
                    closeUrlModal();
                    // Refresh the page to update the UI
                    setTimeout(() => window.location.reload(), 300);
                } else {
                    alert(result.error || 'Error removing URL');
                }
            } catch (error) {
                console.error('Error removing URL:', error);
                alert('Error removing URL');
            } finally {
                removeBtn.disabled = false;
                removeBtn.textContent = 'Remove URL';
            }
        }

        function isValidUrl(string) {
            try {
                new URL(string);
                return true;
            } catch (_) {
                return false;
            }
        }

        // Allow Enter key to save URL
        document.getElementById('urlInput').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                saveUrl();
            }
        });

        // Close modal when clicking outside
        window.addEventListener('click', function (event) {
            const urlModal = document.getElementById('urlModal');
            const notesHistoryModal = document.getElementById('notesHistoryModal');
            if (event.target === urlModal) {
                closeUrlModal();
            }
            if (event.target === notesHistoryModal) {
                closeNotesHistoryModal();
            }
        });

        // Notes History functionality
        document.querySelectorAll('.notes-history-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                const poId = this.dataset.id;
                const poNumber = this.dataset.po;
                openNotesHistoryModal(poId, poNumber);
            });
        });

        async function openNotesHistoryModal(poId, poNumber) {
            const modal = document.getElementById('notesHistoryModal');
            const title = document.getElementById('notesHistoryTitle');
            const content = document.getElementById('notesHistoryContent');

            title.textContent = `Notes History - PO ${poNumber}`;
            content.innerHTML = '<div style="text-align: center; padding: 20px;">Loading...</div>';
            modal.style.display = 'block';

            try {
                const response = await fetch(`/purchase-orders/${poId}/notes-history`);
                const notes = await response.json();

                if (notes.length === 0) {
                    content.innerHTML = '<div class="no-notes">No notes found for this PO</div>';
                } else {
                    content.innerHTML = notes.map(note => `
                        <div class="note-item">
                            <div class="note-header">
                                <span class="note-date">${new Date(note.createdAt).toLocaleString()}</span>
                                <button class="note-delete-btn" onclick="deleteNote('${note._id}', '${poId}', '${poNumber}')">Delete</button>
                            </div>
                            <div class="note-content">${escapeHtml(note.content)}</div>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error loading notes history:', error);
                content.innerHTML = '<div class="no-notes">Error loading notes history</div>';
            }
        }

        function closeNotesHistoryModal() {
            document.getElementById('notesHistoryModal').style.display = 'none';
        }

        async function deleteNote(noteId, poId, poNumber) {
            if (!confirm('Are you sure you want to delete this note?')) {
                return;
            }

            try {
                const response = await fetch(`/purchase-orders/notes/${noteId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (response.ok) {
                    // Refresh the notes history
                    openNotesHistoryModal(poId, poNumber);
                    // Refresh the page to update the main table
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Error deleting note');
                }
            } catch (error) {
                console.error('Error deleting note:', error);
                alert('Error deleting note');
            }
        }

        async function loadLineItems(index, poId) {
            const container = document.getElementById(`line-items-container-${index}`);

            try {
                container.innerHTML = '<div class="loading-line-items">Loading line items...</div>';

                const response = await fetch(`/purchase-orders/${poId}/line-items`);
                const lineItems = await response.json();

                if (lineItems.length === 0) {
                    container.innerHTML = '<div class="no-line-items">No line items found for this purchase order.</div>';
                } else {
                    container.innerHTML = lineItems.map(item => `
                        <div class="line-item">
                            <div class="line-item-date">${item.date ? new Date(item.date).toLocaleDateString() : 'No date'}</div>
                            <div class="line-item-memo">${escapeHtml(item.memo)}</div>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error loading line items:', error);
                container.innerHTML = '<div class="no-line-items">Error loading line items.</div>';
            }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Filtering functionality
        function applyFilters() {
            const searchTerm = document.getElementById('searchFilter').value.toLowerCase();
            const nsStatusFilter = document.getElementById('nsStatusFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const notesFilter = document.getElementById('notesFilter').value;

            const rows = document.querySelectorAll('#purchaseOrdersTable tbody tr[data-po]'); // Only main rows
            let visibleCount = 0;

            rows.forEach(row => {
                const poData = JSON.parse(row.dataset.po);
                const vendor = poData.vendor.toLowerCase();
                const poNumber = poData.poNumber.toLowerCase();
                const nsStatus = poData.nsStatus || '';
                const status = poData.status || '';
                const notes = poData.notes || '';
                const index = row.dataset.index;

                // Search filter
                const matchesSearch = vendor.includes(searchTerm) || poNumber.includes(searchTerm);

                // NS Status filter
                const matchesNSStatus = nsStatusFilter === 'all' || nsStatus === nsStatusFilter;

                // Status filter
                const matchesStatus = statusFilter === 'all' || status === statusFilter;

                // Notes filter
                let matchesNotes = true;
                if (notesFilter === 'with-notes') {
                    matchesNotes = notes.trim().length > 0;
                } else if (notesFilter === 'without-notes') {
                    matchesNotes = notes.trim().length === 0;
                }

                if (matchesSearch && matchesNSStatus && matchesStatus && matchesNotes) {
                    row.classList.remove('hidden');
                    // Also show the corresponding notes row if it's expanded
                    const notesRow = document.getElementById(`notes-row-${index}`);
                    if (notesRow && notesRow.classList.contains('expanded')) {
                        notesRow.classList.remove('hidden');
                    }
                    visibleCount++;
                } else {
                    row.classList.add('hidden');
                    // Also hide the corresponding notes row
                    const notesRow = document.getElementById(`notes-row-${index}`);
                    if (notesRow) {
                        notesRow.classList.add('hidden');
                    }
                }
            });

            // Update results info
            const totalCount = rows.length;
            const resultsInfo = document.getElementById('resultsInfo');
            const noResults = document.getElementById('noResults');

            if (visibleCount === 0) {
                resultsInfo.style.display = 'none';
                noResults.style.display = 'block';
                document.getElementById('purchaseOrdersTable').style.display = 'none';
            } else {
                resultsInfo.style.display = 'block';
                noResults.style.display = 'none';
                document.getElementById('purchaseOrdersTable').style.display = 'table';

                if (visibleCount === totalCount) {
                    resultsInfo.textContent = `Showing all ${totalCount} purchase orders`;
                } else {
                    resultsInfo.textContent = `Showing ${visibleCount} of ${totalCount} purchase orders`;
                }
            }

            updateStats();
        }

        // Update statistics based on visible rows
        function updateStats() {
            const visibleRows = document.querySelectorAll('#purchaseOrdersTable tbody tr[data-po]:not(.hidden)');
            let notesCount = 0;

            visibleRows.forEach(row => {
                const poData = JSON.parse(row.dataset.po);
                if (poData.notes && poData.notes.trim()) {
                    notesCount++;
                }
            });

            document.getElementById('visibleCount').textContent = visibleRows.length;
            document.getElementById('notesCount').textContent = notesCount;
        }

        // Sorting functionality
        function sortTable(column) {
            const tbody = document.querySelector('#purchaseOrdersTable tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            // Determine sort direction
            let direction = 'asc';
            if (currentSort.column === column && currentSort.direction === 'asc') {
                direction = 'desc';
            }

            // Update UI
            document.querySelectorAll('th').forEach(th => {
                th.classList.remove('sort-asc', 'sort-desc');
            });
            const headerElement = document.querySelector(`th[data-column="${column}"]`);
            headerElement.classList.add(direction === 'asc' ? 'sort-asc' : 'sort-desc');

            // Sort rows
            rows.sort((a, b) => {
                const aData = JSON.parse(a.dataset.po);
                const bData = JSON.parse(b.dataset.po);

                let aValue, bValue;

                switch (column) {
                    case 'date':
                        aValue = new Date(aData.date);
                        bValue = new Date(bData.date);
                        break;
                    case 'vendor':
                        aValue = aData.vendor.toLowerCase();
                        bValue = bData.vendor.toLowerCase();
                        break;
                    case 'poNumber':
                        aValue = aData.poNumber.toLowerCase();
                        bValue = bData.poNumber.toLowerCase();
                        break;
                    case 'updatedAt':
                        aValue = new Date(aData.updatedAt || 0);
                        bValue = new Date(bData.updatedAt || 0);
                        break;
                }

                if (aValue < bValue) return direction === 'asc' ? -1 : 1;
                if (aValue > bValue) return direction === 'asc' ? 1 : -1;
                return 0;
            });

            // Reappend sorted rows
            rows.forEach(row => tbody.appendChild(row));

            currentSort = { column, direction };
        }

        // Clear all filters
        function clearAllFilters() {
            document.getElementById('searchFilter').value = '';
            document.getElementById('nsStatusFilter').value = 'all';
            document.getElementById('statusFilter').value = 'all';
            document.getElementById('notesFilter').value = 'all';
            applyFilters();
        }

        // Event listeners for filters
        document.getElementById('searchFilter').addEventListener('input', applyFilters);
        document.getElementById('nsStatusFilter').addEventListener('change', applyFilters);
        document.getElementById('statusFilter').addEventListener('change', applyFilters);
        document.getElementById('notesFilter').addEventListener('change', applyFilters);

        // Event listeners for sorting
        document.querySelectorAll('th.sortable').forEach(header => {
            header.addEventListener('click', () => {
                sortTable(header.dataset.column);
            });
        });

        // Status Management Functions
        let currentStatusOptions = [];

        function openStatusModal() {
            document.getElementById('statusModal').style.display = 'block';
            loadStatusOptions();
        }

        function closeStatusModal() {
            document.getElementById('statusModal').style.display = 'none';
            document.getElementById('statusInput').value = '';
        }

        // Close modal when clicking outside
        window.onclick = function (event) {
            const modal = document.getElementById('statusModal');
            if (event.target === modal) {
                closeStatusModal();
            }
        }

        // Load status options from server
        async function loadStatusOptions() {
            try {
                const response = await fetch('/purchase-orders/status-options');
                const statusOptions = await response.json();
                currentStatusOptions = statusOptions;
                renderStatusList();
            } catch (error) {
                console.error('Error loading status options:', error);
                alert('Error loading status options');
            }
        }

        // Render the status options list
        function renderStatusList() {
            const statusList = document.getElementById('statusList');
            statusList.innerHTML = '';

            currentStatusOptions.forEach(option => {
                const statusItem = document.createElement('div');
                statusItem.className = `status-item ${option.isDefault ? 'default' : ''}`;

                statusItem.innerHTML = `
                    <span class="status-item-name">${option.name}</span>
                    <button class="status-delete-btn" onclick="deleteStatusOption('${option._id}')" 
                            ${option.isDefault ? 'disabled title="Cannot delete default status"' : ''}>
                        Delete
                    </button>
                `;

                statusList.appendChild(statusItem);
            });
        }

        // Add new status option
        async function addStatusOption() {
            const input = document.getElementById('statusInput');
            const addBtn = document.getElementById('addStatusBtn');
            const name = input.value.trim();

            if (!name) {
                alert('Please enter a status name');
                return;
            }

            addBtn.disabled = true;
            addBtn.textContent = 'Adding...';

            try {
                const response = await fetch('/purchase-orders/status-options', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name })
                });

                const result = await response.json();

                if (response.ok) {
                    input.value = '';
                    await loadStatusOptions();
                    // Refresh the page to update all dropdowns
                    setTimeout(() => window.location.reload(), 500);
                } else {
                    alert(result.error || 'Error adding status option');
                }
            } catch (error) {
                console.error('Error adding status option:', error);
                alert('Error adding status option');
            } finally {
                addBtn.disabled = false;
                addBtn.textContent = 'Add';
            }
        }

        // Delete status option
        async function deleteStatusOption(id) {
            const option = currentStatusOptions.find(opt => opt._id === id);
            if (!option) return;

            if (!confirm(`Are you sure you want to delete "${option.name}"?`)) {
                return;
            }

            try {
                const response = await fetch(`/purchase-orders/status-options/${id}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (response.ok) {
                    await loadStatusOptions();
                    // Refresh the page to update all dropdowns
                    setTimeout(() => window.location.reload(), 500);
                } else {
                    alert(result.error || 'Error deleting status option');
                }
            } catch (error) {
                console.error('Error deleting status option:', error);
                alert('Error deleting status option');
            }
        }

        // Allow Enter key to add status
        document.getElementById('statusInput').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                addStatusOption();
            }
        });
    </script>
</body>

</html>