<!DOCTYPE html>
<html>
<head>
    <title>Purchase Orders Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
        .container { max-width: 1400px; margin: 0 auto; }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
        .upload-btn { 
            background: #007bff; color: white; padding: 10px 20px; 
            text-decoration: none; border-radius: 4px; 
        }
        
        /* Filters Section */
        .filters {
            background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;
            display: grid; grid-template-columns: 1fr 1fr 1fr 1fr 1fr; gap: 15px;
        }
        .filter-group {
            display: flex; flex-direction: column;
        }
        .filter-group label {
            font-size: 12px; color: #6c757d; margin-bottom: 5px; font-weight: bold;
        }
        .filter-group input, .filter-group select {
            padding: 8px; border: 1px solid #ddd; border-radius: 4px;
        }
        .clear-filters {
            background: #6c757d; color: white; border: none; padding: 8px 15px; 
            border-radius: 4px; cursor: pointer; margin-top: 19px;
        }
        .clear-filters:hover { background: #5a6268; }
        
        /* Table Styles */
        table { 
            width: 100%; border-collapse: collapse; margin: 20px 0; 
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        th, td { border: 1px solid #ddd; padding: 12px 8px; text-align: left; }
        th { 
            background-color: #f8f9fa; font-weight: bold; cursor: pointer; 
            user-select: none; position: relative;
        }
        th:hover { background-color: #e9ecef; }
        th.sortable::after {
            content: ' ‚ÜïÔ∏è'; font-size: 12px; color: #6c757d;
        }
        th.sort-asc::after { content: ' ‚Üë'; color: #007bff; }
        th.sort-desc::after { content: ' ‚Üì'; color: #007bff; }
        
        tr:nth-child(even) { background-color: #f9f9f9; }
        tr:hover { background-color: #e9ecef; }
        tr.hidden { display: none; }
        
        /* Improved font sizes - 16px for better readability */
        .notes-cell { min-width: 200px; position: relative; }
        
        /* Enhanced Notes Styles */
        .notes-container {
            position: relative;
            width: 100%;
        }
        
        .notes-input { 
            width: 100%; border: 1px solid transparent; 
            background: transparent; padding: 6px 8px; border-radius: 4px;
            min-height: 20px; font-size: 16px; resize: none;
            transition: all 0.3s ease;
        }
        
        .notes-input:focus { 
            background: white; border: 1px solid #007bff; outline: none;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }
        
        .notes-input.has-notes { 
            background: #fff3cd; border-color: #ffeaa7;
        }
        
        .notes-input.saving { 
            background: #d1ecf1; border-color: #bee5eb;
        }
        
        /* Collapsed state - single line input */
        .notes-input.collapsed {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            height: 32px;
            padding-right: 35px; /* Space for expand button */
        }
        
        /* Expanded state - textarea */
        .notes-input.expanded {
            height: auto;
            min-height: 80px;
            white-space: pre-wrap;
            word-wrap: break-word;
            padding-right: 35px; /* Space for collapse button */
        }
        
        /* Expand/Collapse button */
        .notes-toggle {
            position: absolute;
            right: 8px;
            top: 6px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 3px;
            width: 24px;
            height: 24px;
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0.7;
            transition: opacity 0.2s ease;
            z-index: 1;
        }
        
        .notes-toggle:hover {
            opacity: 1;
            background: #0056b3;
        }
        
        /* Show toggle button only when there are notes or when focused */
        .notes-container:not(.has-content) .notes-toggle {
            display: none;
        }
        
        .notes-container.has-content .notes-toggle,
        .notes-container.focused .notes-toggle {
            display: flex;
        }
        
        /* Preview text for collapsed notes */
        .notes-preview {
            display: none;
            color: #6c757d;
            font-style: italic;
            font-size: 14px;
            margin-top: 4px;
        }
        
        .notes-container.collapsed.has-long-content .notes-preview {
            display: block;
        }
        
        /* Status Dropdown - 16px font */
        .status-select {
            width: 100%; border: 1px solid #ddd; background: white; 
            padding: 6px 8px; border-radius: 4px; font-size: 16px;
        }
        .status-select:focus {
            border-color: #007bff; outline: none;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }
        .status-select.has-status {
            background: #e7f3ff; border-color: #007bff;
        }
        .status-select.saving {
            background: #d1ecf1; border-color: #bee5eb;
        }
        
        /* Adjusted column widths - PO number smaller, vendor larger */
        .po-number { 
            font-family: monospace; color: #495057; 
            font-size: 16px; font-weight: bold;
            width: 120px; /* Reduced from ~160px */
        }
        .vendor { 
            width: 280px; /* Increased from ~180px */
            word-wrap: break-word;
        }
        .date-cell { width: 100px; }
        .notes-cell { min-width: 200px; }
        .status-cell { min-width: 150px; }
        .ns-status-cell { min-width: 120px; }
        
        /* NS Status display styling - 16px font */
        .ns-status-display { 
            color: #856404; background: #fff3cd; padding: 4px 8px; 
            border-radius: 4px; font-size: 16px; font-weight: 500;
            display: inline-block;
        }
        
        .stats { 
            display: flex; gap: 20px; margin-bottom: 20px; 
            background: #f8f9fa; padding: 15px; border-radius: 8px;
        }
        .stat { text-align: center; }
        .stat-number { font-size: 24px; font-weight: bold; color: #007bff; }
        .stat-label { font-size: 12px; color: #6c757d; text-transform: uppercase; }
        
        .results-info {
            color: #6c757d; font-size: 14px; margin-bottom: 10px;
        }
        .no-results {
            text-align: center; padding: 40px; color: #6c757d;
            background: #f8f9fa; border-radius: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Purchase Orders Dashboard</h1>
            <a href="/upload" class="upload-btn">üìÅ Import New CSV</a>
        </div>
        
        <% if (purchaseOrders.length > 0) { %>
            <!-- Filters Section -->
            <div class="filters">
                <div class="filter-group">
                    <label>Search Vendor or PO Number</label>
                    <input type="text" id="searchFilter" placeholder="Type to search...">
                </div>
                
                <div class="filter-group">
                    <label>NS Status Filter</label>
                    <select id="nsStatusFilter">
                        <option value="all">All NS Statuses</option>
                        <% uniqueNSStatuses.forEach(status => { %>
                            <option value="<%= status %>"><%= status %></option>
                        <% }); %>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label>Status Filter</label>
                    <select id="statusFilter">
                        <option value="all">All Statuses</option>
                        <% uniqueStatuses.forEach(status => { %>
                            <option value="<%= status %>"><%= status %></option>
                        <% }); %>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label>Notes Filter</label>
                    <select id="notesFilter">
                        <option value="all">All POs</option>
                        <option value="with-notes">With Notes Only</option>
                        <option value="without-notes">Without Notes Only</option>
                    </select>
                </div>
                
                <div class="filter-group">
                    <button class="clear-filters" onclick="clearAllFilters()">Clear Filters</button>
                </div>
            </div>

            <!-- Stats Section -->
            <div class="stats">
                <div class="stat">
                    <div class="stat-number" id="totalCount"><%= purchaseOrders.length %></div>
                    <div class="stat-label">Total POs</div>
                </div>
                <div class="stat">
                    <div class="stat-number" id="notesCount">
                        <%= purchaseOrders.filter(po => po.notes && po.notes.trim()).length %>
                    </div>
                    <div class="stat-label">With Notes</div>
                </div>
                <div class="stat">
                    <div class="stat-number" id="visibleCount"><%= purchaseOrders.length %></div>
                    <div class="stat-label">Showing</div>
                </div>
            </div>

            <div class="results-info" id="resultsInfo">
                Showing all <%= purchaseOrders.length %> purchase orders
            </div>
        <% } %>
        
        <% if (purchaseOrders.length === 0) { %>
            <div style="text-align: center; padding: 60px; color: #6c757d;">
                <h3>No Purchase Orders Found</h3>
                <p>Upload a CSV file to get started</p>
                <a href="/upload" class="upload-btn">üìÅ Upload CSV</a>
            </div>
        <% } else { %>
            <table id="purchaseOrdersTable">
                <thead>
                    <tr>
                        <th class="sortable date-cell" data-column="date">Date</th>
                        <th class="sortable po-number" data-column="poNumber">PO Number</th>
                        <th class="sortable vendor" data-column="vendor">Vendor</th>
                        <th class="ns-status-cell">NS Status</th>
                        <th class="status-cell">Status</th>
                        <th class="notes-cell">Notes</th>
                    </tr>
                </thead>
                <tbody>
                    <% purchaseOrders.forEach(po => { %>
                    <tr data-po='<%= JSON.stringify(po) %>'>
                        <td class="date-cell"><%= po.date %></td>
                        <td class="po-number"><%= po.poNumber %></td>
                        <td class="vendor" title="<%= po.vendor %>"><%= po.vendor %></td>
                        <td class="ns-status-cell">
                            <span class="ns-status-display"><%= po.nsStatus %></span>
                        </td>
                        <td class="status-cell">
                            <select 
                                class="status-select <%= po.status ? 'has-status' : '' %>"
                                data-id="<%= po._id %>"
                                data-po="<%= po.poNumber %>"
                                title="Custom Status for PO <%= po.poNumber %>"
                            >
                                <option value="">Select Status...</option>
                                <% statusOptions.forEach(option => { %>
                                    <option value="<%= option %>" <%= po.status === option ? 'selected' : '' %>>
                                        <%= option %>
                                    </option>
                                <% }); %>
                            </select>
                        </td>
                        <td class="notes-cell">
                            <div class="notes-container <%= po.notes && po.notes.trim() ? 'has-content' : '' %>">
                                <textarea 
                                    class="notes-input collapsed <%= po.notes && po.notes.trim() ? 'has-notes' : '' %>" 
                                    data-id="<%= po._id %>"
                                    data-po="<%= po.poNumber %>"
                                    placeholder="Add notes for <%= po.poNumber %>..."
                                    title="Notes for PO <%= po.poNumber %> (persists across CSV uploads)"
                                    rows="1"
                                ><%= po.notes %></textarea>
                                <button class="notes-toggle" type="button" title="Expand/Collapse notes">
                                    <span class="toggle-icon">‚áì</span>
                                </button>
                                <div class="notes-preview">
                                    <% if (po.notes && po.notes.length > 50) { %>
                                        <%= po.notes.substring(50) %>...
                                    <% } %>
                                </div>
                            </div>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
            
            <div class="no-results" id="noResults" style="display: none;">
                <h3>No Purchase Orders Match Your Filters</h3>
                <p>Try adjusting your search criteria or clearing the filters.</p>
            </div>
        <% } %>
    </div>

    <script>
        let currentSort = { column: null, direction: null };

        // Enhanced Notes functionality with expand/collapse
        document.querySelectorAll('.notes-input').forEach(input => {
            let timeout;
            const container = input.closest('.notes-container');
            const toggleBtn = container.querySelector('.notes-toggle');
            const toggleIcon = toggleBtn.querySelector('.toggle-icon');
            
            // Handle expand/collapse toggle
            toggleBtn.addEventListener('click', function() {
                const isExpanded = input.classList.contains('expanded');
                
                if (isExpanded) {
                    // Collapse
                    input.classList.remove('expanded');
                    input.classList.add('collapsed');
                    input.rows = 1;
                    toggleIcon.textContent = '‚áì';
                    toggleBtn.title = 'Expand notes';
                } else {
                    // Expand
                    input.classList.remove('collapsed');
                    input.classList.add('expanded');
                    input.rows = Math.max(3, Math.ceil(input.value.length / 50));
                    toggleIcon.textContent = '‚áë';
                    toggleBtn.title = 'Collapse notes';
                    input.focus();
                }
            });
            
            // Handle focus/blur for showing toggle button
            input.addEventListener('focus', function() {
                container.classList.add('focused');
            });
            
            input.addEventListener('blur', function() {
                container.classList.remove('focused');
            });
            
            // Auto-resize textarea when typing in expanded mode
            input.addEventListener('input', function() {
                if (this.classList.contains('expanded')) {
                    // Auto-resize
                    this.rows = Math.max(3, Math.ceil(this.value.length / 50));
                }
                
                // Update container classes based on content
                const hasContent = this.value.trim().length > 0;
                const hasLongContent = this.value.length > 50;
                
                if (hasContent) {
                    container.classList.add('has-content');
                    this.classList.add('has-notes');
                } else {
                    container.classList.remove('has-content');
                    this.classList.remove('has-notes');
                }
                
                if (hasLongContent) {
                    container.classList.add('has-long-content');
                } else {
                    container.classList.remove('has-long-content');
                }
                
                clearTimeout(timeout);
                
                // Show saving state
                this.classList.add('saving');
                
                timeout = setTimeout(() => {
                    const id = this.dataset.id;
                    const poNumber = this.dataset.po;
                    const notes = this.value;
                    
                    fetch(`/purchase-orders/${id}/notes`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ notes })
                    })
                    .then(response => response.json())
                    .then(data => {
                        // Remove saving state
                        this.classList.remove('saving');
                        
                        // Update stats after note change
                        updateStats();
                        
                        console.log(`Notes saved for PO ${poNumber}`);
                    })
                    .catch(error => {
                        this.classList.remove('saving');
                        console.error('Error saving notes:', error);
                    });
                }, 1000);
            });
            
            // Initialize state based on content
            const hasContent = input.value.trim().length > 0;
            const hasLongContent = input.value.length > 50;
            
            if (hasContent) {
                container.classList.add('has-content');
            }
            if (hasLongContent) {
                container.classList.add('has-long-content');
            }
        });

        // Auto-save Status when changed
        document.querySelectorAll('.status-select').forEach(select => {
            select.addEventListener('change', function() {
                const id = this.dataset.id;
                const poNumber = this.dataset.po;
                const status = this.value;
                
                // Show saving state
                this.classList.add('saving');
                
                fetch(`/purchase-orders/${id}/status`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status })
                })
                .then(response => response.json())
                .then(data => {
                    // Remove saving state and update appearance
                    this.classList.remove('saving');
                    
                    if (status) {
                        this.classList.add('has-status');
                    } else {
                        this.classList.remove('has-status');
                    }
                    
                    // Update the data attribute for filtering
                    const row = this.closest('tr');
                    const poData = JSON.parse(row.dataset.po);
                    poData.status = status;
                    row.dataset.po = JSON.stringify(poData);
                    
                    console.log(`Status saved for PO ${poNumber}: "${status}"`);
                })
                .catch(error => {
                    this.classList.remove('saving');
                    console.error('Error saving Status:', error);
                });
            });
        });

        // Filtering functionality
        function applyFilters() {
            const searchTerm = document.getElementById('searchFilter').value.toLowerCase();
            const nsStatusFilter = document.getElementById('nsStatusFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const notesFilter = document.getElementById('notesFilter').value;
            
            const rows = document.querySelectorAll('#purchaseOrdersTable tbody tr');
            let visibleCount = 0;
            
            rows.forEach(row => {
                const poData = JSON.parse(row.dataset.po);
                const vendor = poData.vendor.toLowerCase();
                const poNumber = poData.poNumber.toLowerCase();
                const nsStatus = poData.nsStatus || '';
                const status = poData.status || '';
                const notes = poData.notes || '';
                
                // Search filter
                const matchesSearch = vendor.includes(searchTerm) || poNumber.includes(searchTerm);
                
                // NS Status filter
                const matchesNSStatus = nsStatusFilter === 'all' || nsStatus === nsStatusFilter;
                
                // Status filter
                const matchesStatus = statusFilter === 'all' || status === statusFilter;
                
                // Notes filter
                let matchesNotes = true;
                if (notesFilter === 'with-notes') {
                    matchesNotes = notes.trim().length > 0;
                } else if (notesFilter === 'without-notes') {
                    matchesNotes = notes.trim().length === 0;
                }
                
                if (matchesSearch && matchesNSStatus && matchesStatus && matchesNotes) {
                    row.classList.remove('hidden');
                    visibleCount++;
                } else {
                    row.classList.add('hidden');
                }
            });
            
            // Update results info
            const totalCount = rows.length;
            const resultsInfo = document.getElementById('resultsInfo');
            const noResults = document.getElementById('noResults');
            
            if (visibleCount === 0) {
                resultsInfo.style.display = 'none';
                noResults.style.display = 'block';
                document.getElementById('purchaseOrdersTable').style.display = 'none';
            } else {
                resultsInfo.style.display = 'block';
                noResults.style.display = 'none';
                document.getElementById('purchaseOrdersTable').style.display = 'table';
                
                if (visibleCount === totalCount) {
                    resultsInfo.textContent = `Showing all ${totalCount} purchase orders`;
                } else {
                    resultsInfo.textContent = `Showing ${visibleCount} of ${totalCount} purchase orders`;
                }
            }
            
            updateStats();
        }

        // Update statistics based on visible rows
        function updateStats() {
            const visibleRows = document.querySelectorAll('#purchaseOrdersTable tbody tr:not(.hidden)');
            let notesCount = 0;
            
            visibleRows.forEach(row => {
                const poData = JSON.parse(row.dataset.po);
                if (poData.notes && poData.notes.trim()) {
                    notesCount++;
                }
            });
            
            document.getElementById('visibleCount').textContent = visibleRows.length;
            document.getElementById('notesCount').textContent = notesCount;
        }

        // Sorting functionality
        function sortTable(column) {
            const tbody = document.querySelector('#purchaseOrdersTable tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            // Determine sort direction
            let direction = 'asc';
            if (currentSort.column === column && currentSort.direction === 'asc') {
                direction = 'desc';
            }
            
            // Update UI
            document.querySelectorAll('th').forEach(th => {
                th.classList.remove('sort-asc', 'sort-desc');
            });
            const headerElement = document.querySelector(`th[data-column="${column}"]`);
            headerElement.classList.add(direction === 'asc' ? 'sort-asc' : 'sort-desc');
            
            // Sort rows
            rows.sort((a, b) => {
                const aData = JSON.parse(a.dataset.po);
                const bData = JSON.parse(b.dataset.po);
                
                let aValue, bValue;
                
                switch(column) {
                    case 'date':
                        aValue = new Date(aData.date);
                        bValue = new Date(bData.date);
                        break;
                    case 'vendor':
                        aValue = aData.vendor.toLowerCase();
                        bValue = bData.vendor.toLowerCase();
                        break;
                    case 'poNumber':
                        aValue = aData.poNumber.toLowerCase();
                        bValue = bData.poNumber.toLowerCase();
                        break;
                }
                
                if (aValue < bValue) return direction === 'asc' ? -1 : 1;
                if (aValue > bValue) return direction === 'asc' ? 1 : -1;
                return 0;
            });
            
            // Reappend sorted rows
            rows.forEach(row => tbody.appendChild(row));
            
            currentSort = { column, direction };
        }

        // Clear all filters
        function clearAllFilters() {
            document.getElementById('searchFilter').value = '';
            document.getElementById('nsStatusFilter').value = 'all';
            document.getElementById('statusFilter').value = 'all';
            document.getElementById('notesFilter').value = 'all';
            applyFilters();
        }

        // Event listeners for filters
        document.getElementById('searchFilter').addEventListener('input', applyFilters);
        document.getElementById('nsStatusFilter').addEventListener('change', applyFilters);
        document.getElementById('statusFilter').addEventListener('change', applyFilters);
        document.getElementById('notesFilter').addEventListener('change', applyFilters);

        // Event listeners for sorting
        document.querySelectorAll('th.sortable').forEach(header => {
            header.addEventListener('click', () => {
                sortTable(header.dataset.column);
            });
        });
    </script>
</body>
</html>