<!DOCTYPE html>
<html>

<head>
    <title>Purchase Orders Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        /* Enhanced Navigation Styles */
        .navigation-container {
            display: flex;
            gap: 15px;
            align-items: flex-start;
        }

        .nav-section {
            position: relative;
        }

        /* Accordion Styles */
        .nav-accordion-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            min-width: 120px;
            justify-content: space-between;
        }

        .nav-accordion-btn:hover {
            background: #218838;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .nav-accordion-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            min-width: 220px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-radius: 6px;
            border: 1px solid #dee2e6;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            margin-top: 5px;
        }

        .nav-accordion-content.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .nav-accordion-item {
            display: block;
            padding: 12px 16px;
            color: #495057;
            text-decoration: none;
            border-bottom: 1px solid #f1f3f4;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .nav-accordion-item:last-child {
            border-bottom: none;
            border-radius: 0 0 6px 6px;
        }

        .nav-accordion-item:first-child {
            border-radius: 6px 6px 0 0;
        }

        .nav-accordion-item:hover {
            background: #f8f9fa;
            color: #28a745;
            text-decoration: none;
            padding-left: 20px;
        }

        /* Options Button Styles */
        .nav-options-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            min-width: 100px;
            justify-content: space-between;
        }

        .nav-options-btn:hover {
            background: #5a6268;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        /* Imports Button Styles */
        .nav-imports-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            min-width: 100px;
            justify-content: space-between;
        }

        .nav-imports-btn:hover {
            background: #0056b3;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        /* Dropdown Styles */
        .nav-dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            min-width: 200px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-radius: 6px;
            border: 1px solid #dee2e6;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            margin-top: 5px;
        }

        .nav-dropdown-content.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .nav-dropdown-item {
            display: block;
            padding: 12px 16px;
            color: #495057;
            text-decoration: none;
            border-bottom: 1px solid #f1f3f4;
            transition: all 0.2s ease;
            font-size: 14px;
            background: none;
            border-left: none;
            border-right: none;
            border-top: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
        }

        .nav-dropdown-item:last-child {
            border-bottom: none;
            border-radius: 0 0 6px 6px;
        }

        .nav-dropdown-item:first-child {
            border-radius: 6px 6px 0 0;
        }

        .nav-dropdown-item:hover {
            background: #f8f9fa;
            color: #007bff;
            text-decoration: none;
            padding-left: 20px;
        }

        /* Icon animations */
        .accordion-icon,
        .dropdown-icon {
            transition: transform 0.3s ease;
            font-size: 12px;
        }

        .accordion-icon.rotated,
        .dropdown-icon.rotated {
            transform: rotate(180deg);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .navigation-container {
                flex-direction: column;
                gap: 10px;
                width: 100%;
            }

            .nav-section {
                width: 100%;
            }

            .nav-accordion-btn,
            .nav-options-btn,
            .nav-imports-btn {
                width: 100%;
                justify-content: space-between;
            }

            .nav-accordion-content,
            .nav-dropdown-content {
                position: static;
                min-width: 100%;
                margin-top: 0;
                box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
            }
        }

        /* Hide old button styles */
        .manage-status-btn,
        .notes-manager-btn {
            display: none;
        }

        /* NetSuite Import Modal Styles */
        .netsuite-import-modal {
            max-width: 800px;
            width: 90%;
        }

        .netsuite-import-modal textarea {
            width: 100%;
            min-height: 200px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }

        .netsuite-import-modal .form-group {
            margin-bottom: 20px;
        }

        .netsuite-import-modal .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
        }

        .netsuite-import-modal select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: white;
        }

        .netsuite-import-modal .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            margin-top: 24px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }

        .netsuite-import-modal .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .netsuite-import-modal .btn-primary {
            background: #007bff;
            color: white;
        }

        .netsuite-import-modal .btn-primary:hover {
            background: #0056b3;
        }

        .netsuite-import-modal .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .netsuite-import-modal .btn-secondary:hover {
            background: #545b62;
        }

        .import-mode-options {
            margin-top: 10px;
        }

        .checkbox-label {
            display: flex;
            align-items: flex-start;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #333;
            margin-bottom: 8px;
        }

        .checkbox-label input[type="checkbox"] {
            margin-right: 10px;
            margin-top: 2px;
            transform: scale(1.2);
        }

        .option-description {
            font-size: 12px;
            color: #666;
            margin: 0;
            padding-left: 22px;
            line-height: 1.4;
        }

        .option-description strong {
            color: #333;
        }

        .upload-btn {
            background: #007bff;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 4px;
        }

        /* Filters Section */
        .filters {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
            gap: 15px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            font-size: 12px;
            color: #6c757d;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .filter-group input,
        .filter-group select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .clear-filters {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 19px;
        }

        .clear-filters:hover {
            background: #5a6268;
        }

        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 12px 8px;
            text-align: left;
        }

        th {
            background-color: #f8f9fa;
            font-weight: bold;
            cursor: pointer;
            user-select: none;
            position: relative;
        }

        th:hover {
            background-color: #e9ecef;
        }

        th.sortable::after {
            content: ' ↕️';
            font-size: 12px;
            color: #6c757d;
        }

        th.sort-asc::after {
            content: ' ↑';
            color: #007bff;
        }

        th.sort-desc::after {
            content: ' ↓';
            color: #007bff;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #e9ecef;
        }

        tr.hidden {
            display: none;
        }

        /* Improved font sizes - 16px for better readability */
        .notes-cell {
            min-width: 200px;
            position: relative;
        }

        /* Enhanced Notes Styles - Notes appear below the row */
        .notes-row {
            display: none;
            /* Hidden by default */
            background: #f8f9fa;
            border-left: 4px solid #007bff;
        }

        .notes-row.expanded {
            display: table-row;
        }

        /* Line Items Count Column Styles */
        .line-items-count-cell {
            width: 80px;
            text-align: center;
            padding: 8px 4px;
            vertical-align: middle;
        }

        .line-items-count-display,
        .no-line-items-display {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .line-items-count-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 10px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 6px;
            min-width: 50px;
            justify-content: center;
        }

        .line-items-count-btn:hover {
            background: #218838;
            transform: translateY(-1px);
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
        }

        .line-items-count-btn .count-number {
            font-weight: 700;
            font-size: 15px;
        }

        .import-netsuite-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 8px 10px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 40px;
            min-height: 36px;
        }

        .import-netsuite-btn:hover {
            background: #0056b3;
            transform: translateY(-1px);
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
        }

        .update-netsuite-btn {
            background: #ffc107;
            color: #212529;
            border: none;
            padding: 6px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            margin-left: 4px;
            min-width: 30px;
            min-height: 30px;
        }

        .update-netsuite-btn:hover {
            background: #e0a800;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
        }

        /* Responsive design for Line Items column */
        @media (max-width: 768px) {
            .line-items-count-cell {
                width: 60px;
                padding: 4px 2px;
            }

            .line-items-count-btn,
            .import-netsuite-btn,
            .update-netsuite-btn {
                padding: 6px 8px;
                font-size: 12px;
                min-width: 35px;
                min-height: 30px;
            }

            .update-netsuite-btn {
                margin-left: 2px;
                min-width: 25px;
                min-height: 25px;
                font-size: 11px;
            }

            .line-items-count-btn .count-number {
                font-size: 13px;
            }
        }

        /* Line Items Styles */
        .line-items-row {
            display: none;
            background: #f0f8ff;
            border-left: 4px solid #28a745;
        }

        .line-items-row.expanded {
            display: table-row;
        }

        .line-items-cell-expanded {
            padding: 15px;
            border: none;
            border-top: 1px solid #dee2e6;
        }

        .line-items-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            border-bottom: 1px solid #dee2e6;
            padding-bottom: 10px;
        }

        .line-items-title {
            font-weight: bold;
            color: #28a745;
            font-size: 14px;
        }

        .line-items-actions {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .line-items-status {
            font-size: 12px;
            color: #28a745;
            font-weight: 500;
            margin-left: 10px;
        }

        .show-received-toggle {
            background: #6c757d;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 11px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .show-received-toggle:hover {
            background: #5a6268;
        }

        .show-received-toggle.active {
            background: #007bff;
        }

        .show-received-toggle.active:hover {
            background: #0056b3;
        }

        .line-items-close {
            background: #6c757d;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 11px;
        }

        .line-items-close:hover {
            background: #5a6268;
        }

        .line-items-container {
            max-height: 300px;
            overflow-y: auto;
        }

        .line-item {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 12px;
            margin-bottom: 8px;
            transition: all 0.2s ease;
        }

        .line-item.received {
            background: #f8f9fa;
            border-color: #28a745;
            border-left: 4px solid #28a745;
        }

        .line-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .line-item-date {
            font-size: 11px;
            color: #6c757d;
        }

        .line-item-status {
            display: flex;
            align-items: center;
        }

        .received-toggle {
            background: #6c757d;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 11px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .received-toggle:hover {
            background: #5a6268;
        }

        .received-toggle.received {
            background: #28a745;
        }

        .received-toggle.received:hover {
            background: #218838;
        }

        .line-item-memo {
            font-size: 13px;
            color: #495057;
            line-height: 1.3;
            margin-bottom: 8px;
        }

        .line-item-details {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr;
            gap: 10px;
            margin-bottom: 8px;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 4px;
        }

        .line-item-sku {
            display: flex;
            flex-direction: column;
            gap: 3px;
        }

        .line-item-sku label {
            font-size: 11px;
            color: #6c757d;
            font-weight: 500;
            margin: 0;
        }

        .sku-input {
            padding: 4px 6px;
            border: 1px solid #ddd;
            border-radius: 3px;
            font-size: 12px;
        }

        .line-item-status-dropdown {
            display: flex;
            flex-direction: column;
            gap: 3px;
        }

        .line-item-status-dropdown label {
            font-size: 11px;
            color: #6c757d;
            font-weight: 500;
            margin: 0;
        }

        .item-status-select {
            padding: 4px 6px;
            border: 1px solid #ddd;
            border-radius: 3px;
            font-size: 12px;
        }

        .line-item-tracking-input {
            display: flex;
            flex-direction: column;
            gap: 3px;
        }

        .line-item-tracking-input label {
            font-size: 11px;
            color: #6c757d;
            font-weight: 500;
            margin: 0;
        }

        .tracking-input {
            padding: 4px 6px;
            border: 1px solid #ddd;
            border-radius: 3px;
            font-size: 12px;
        }

        .line-item-tracking-carrier {
            display: flex;
            flex-direction: column;
            gap: 3px;
        }

        .line-item-tracking-carrier label {
            font-size: 11px;
            color: #6c757d;
            font-weight: 500;
            margin: 0;
        }

        .carrier-select {
            padding: 4px 6px;
            border: 1px solid #ddd;
            border-radius: 3px;
            font-size: 12px;
        }

        /* Styles for tracking section without tracking number */
        .line-item-tracking.no-tracking {
            background: #fff3cd;
            border-left: 3px solid #ffc107;
        }

        .line-item-tracking.no-tracking .line-item-tracking-number {
            color: #856404;
        }

        /* Line item tracking styles */
        .line-item-tracking {
            display: flex;
            flex-direction: column;
            gap: 3px;
            margin-bottom: 8px;
            padding: 8px;
            background: #e3f2fd;
            border-radius: 4px;
            border-left: 3px solid #2196f3;
        }

        .line-item-tracking-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 4px;
        }

        .line-item-tracking-number {
            font-size: 11px;
            color: #1976d2;
            font-weight: 600;
        }

        .line-item-tracking-update-btn {
            background: #2196f3;
            color: white;
            border: none;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 10px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .line-item-tracking-update-btn:hover {
            background: #1976d2;
        }

        .line-item-tracking-update-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .line-item-tracking-status {
            font-size: 11px;
            color: #424242;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .line-item-tracking-status .status-badge {
            padding: 1px 4px;
            border-radius: 2px;
            font-size: 9px;
            font-weight: 500;
            text-transform: uppercase;
        }

        .line-item-tracking-status .status-delivered {
            background: #e8f5e8;
            color: #2e7d2e;
        }

        .line-item-tracking-status .status-transit {
            background: #fff3cd;
            color: #856404;
        }

        .line-item-tracking-status .status-pending {
            background: #f8f9fa;
            color: #6c757d;
        }

        .line-item-tracking-status .status-alert {
            background: #f8d7da;
            color: #721c24;
        }

        .line-item-tracking-info {
            font-size: 10px;
            color: #666;
            margin-top: 2px;
        }

        .line-item-notes {
            font-size: 12px;
            color: #495057;
            background: #e9ecef;
            padding: 6px 8px;
            border-radius: 3px;
            margin-bottom: 8px;
        }

        .line-item-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 8px;
            padding-top: 8px;
            border-top: 1px solid #f1f3f4;
            font-size: 11px;
        }

        .line-item-eta {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .line-item-eta label {
            color: #6c757d;
            font-weight: 500;
            margin: 0;
        }

        .line-item-notes-input {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .line-item-notes-input label {
            color: #6c757d;
            font-weight: 500;
            margin: 0;
        }

        .notes-input {
            padding: 4px 6px;
            border: 1px solid #ddd;
            border-radius: 3px;
            font-size: 11px;
            min-width: 150px;
        }

        .eta-input {
            border: 1px solid #ced4da;
            border-radius: 3px;
            padding: 2px 6px;
            font-size: 11px;
            color: #495057;
        }

        .eta-input:focus {
            outline: none;
            border-color: #80bdff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

        .received-date {
            color: #28a745;
            font-weight: 500;
        }

        .line-item.received.hidden {
            display: none;
        }

        .all-received-message {
            text-align: center;
            padding: 20px;
            background: #d4edda;
            border: 1px solid #c3e6cb;
            border-radius: 4px;
            color: #155724;
            font-weight: 500;
        }

        /* Pre-Purchase Orders Styles */
        .pre-purchase-section {
            margin-bottom: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }

        .pre-purchase-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .pre-purchase-header h2 {
            margin: 0;
            color: #495057;
            font-size: 1.3em;
        }

        .add-pre-po-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s;
        }

        .add-pre-po-btn:hover {
            background: #218838;
        }

        .pre-purchase-orders {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }

        .pre-po-card {
            background: white;
            border-radius: 8px;
            padding: 16px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #6c757d;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .pre-po-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .pre-po-card.priority-urgent {
            border-left-color: #dc3545;
        }

        .pre-po-card.priority-high {
            border-left-color: #fd7e14;
        }

        .pre-po-card.priority-medium {
            border-left-color: #ffc107;
        }

        .pre-po-card.priority-low {
            border-left-color: #28a745;
        }

        .pre-po-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 12px;
        }

        .pre-po-title {
            font-weight: 600;
            font-size: 16px;
            color: #212529;
            flex: 1;
            margin-right: 10px;
        }

        .pre-po-priority {
            font-size: 11px;
            padding: 2px 6px;
            border-radius: 10px;
            font-weight: 500;
            text-transform: uppercase;
        }

        .pre-po-priority.urgent {
            background: #f8d7da;
            color: #721c24;
        }

        .pre-po-priority.high {
            background: #ffeaa7;
            color: #856404;
        }

        .pre-po-priority.medium {
            background: #fff3cd;
            color: #856404;
        }

        .pre-po-priority.low {
            background: #d4edda;
            color: #155724;
        }

        .pre-po-body {
            margin-bottom: 15px;
        }

        .pre-po-vendor {
            font-size: 14px;
            color: #495057;
            margin-bottom: 8px;
        }

        .pre-po-items {
            font-size: 13px;
            color: #6c757d;
            margin-bottom: 10px;
            line-height: 1.4;
            background: #f8f9fa;
            padding: 8px;
            border-radius: 4px;
            border-left: 3px solid #dee2e6;
            font-family: 'Courier New', monospace;
        }

        .pre-po-description {
            font-size: 13px;
            color: #6c757d;
            margin-bottom: 10px;
            line-height: 1.4;
        }

        .pre-po-meta {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            font-size: 12px;
            color: #6c757d;
        }

        .pre-po-amount {
            font-weight: 600;
            color: #28a745;
        }

        .pre-po-status {
            background: #e9ecef;
            padding: 2px 6px;
            border-radius: 3px;
        }

        .pre-po-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .pre-po-actions button {
            padding: 4px 8px;
            border: none;
            border-radius: 3px;
            font-size: 11px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .edit-pre-po-btn {
            background: #007bff;
            color: white;
        }

        .edit-pre-po-btn:hover {
            background: #0056b3;
        }

        .convert-pre-po-btn {
            background: #28a745;
            color: white;
        }

        .convert-pre-po-btn:hover {
            background: #218838;
        }

        .delete-pre-po-btn {
            background: #dc3545;
            color: white;
        }

        .delete-pre-po-btn:hover {
            background: #c82333;
        }

        .no-pre-pos {
            text-align: center;
            padding: 40px;
            color: #6c757d;
            font-style: italic;
        }

        .no-line-items {
            text-align: center;
            color: #6c757d;
            font-style: italic;
            padding: 20px;
            background: white;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }

        .loading-line-items {
            text-align: center;
            color: #6c757d;
            padding: 20px;
            background: white;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }

        .notes-cell-expanded {
            padding: 15px;
            border: none;
            border-top: 1px solid #dee2e6;
        }

        .notes-container {
            position: relative;
            width: 100%;
            max-width: 100%;
        }

        .notes-input {
            width: 100%;
            border: 1px solid #ddd;
            background: white;
            padding: 10px;
            border-radius: 4px;
            min-height: 80px;
            font-size: 16px;
            resize: vertical;
            font-family: Arial, sans-serif;
        }

        .notes-input:focus {
            border: 1px solid #007bff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

        .notes-input.has-notes {
            background: #fff3cd;
            border-color: #ffeaa7;
        }

        .notes-input.saving {
            background: #d1ecf1;
            border-color: #bee5eb;
        }

        /* Notes toggle in the main row */
        .notes-toggle-cell {
            text-align: center;
            vertical-align: middle;
            width: 70px;
            /* Increased for two buttons */
        }

        .notes-toggle {
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            width: 28px;
            height: 28px;
            cursor: pointer;
            font-size: 12px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .notes-toggle:hover {
            background: #0056b3;
            transform: scale(1.05);
        }

        .notes-toggle.has-notes {
            background: #28a745;
        }

        .notes-toggle.has-notes:hover {
            background: #218838;
        }

        .line-items-toggle {
            background: #17a2b8;
            color: white;
            border: none;
            border-radius: 4px;
            width: 32px;
            height: 28px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
        }

        .line-items-toggle:hover {
            background: #138496;
            transform: scale(1.05);
        }

        .notes-history-btn {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 4px;
            width: 28px;
            height: 28px;
            cursor: pointer;
            font-size: 12px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .notes-history-btn:hover {
            background: #5a6268;
            transform: scale(1.05);
        }

        /* Notes header with actions */
        .notes-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding-bottom: 8px;
            border-bottom: 1px solid #dee2e6;
        }

        .notes-title {
            font-weight: bold;
            color: #495057;
            font-size: 16px;
        }

        .notes-actions {
            display: flex;
            gap: 8px;
        }

        .notes-close {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 4px 8px;
            cursor: pointer;
            font-size: 12px;
        }

        .notes-close:hover {
            background: #5a6268;
        }

        /* Status Dropdown - 16px font */
        .status-select {
            width: 100%;
            border: 1px solid #ddd;
            background: white;
            padding: 6px 8px;
            border-radius: 4px;
            font-size: 16px;
        }

        .status-select:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

        .status-select.has-status {
            background: #e7f3ff;
            border-color: #007bff;
        }

        .status-select.saving {
            background: #d1ecf1;
            border-color: #bee5eb;
        }

        /* Adjusted column widths - PO number smaller, vendor larger */
        .po-number {
            font-family: monospace;
            color: #495057;
            font-size: 16px;
            font-weight: bold;
            width: 140px;
            /* Increased slightly for URL button */
            position: relative;
        }

        /* PO Number URL functionality */
        .po-container {
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .po-link {
            color: #007bff;
            text-decoration: none;
            font-family: monospace;
            font-size: 16px;
            font-weight: bold;
        }

        .po-link:hover {
            text-decoration: underline;
            color: #0056b3;
        }

        .po-text {
            font-family: monospace;
            font-size: 16px;
            font-weight: bold;
            color: #495057;
        }

        .url-btn {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 3px;
            width: 20px;
            height: 20px;
            cursor: pointer;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0.7;
            transition: all 0.2s ease;
        }

        .url-btn:hover {
            opacity: 1;
            background: #5a6268;
        }

        .url-btn.has-url {
            background: #28a745;
        }

        .url-btn.has-url:hover {
            background: #218838;
        }

        /* URL Modal */
        .url-modal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .url-modal-content {
            background-color: white;
            margin: 20% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .url-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
        }

        .url-modal-title {
            font-size: 16px;
            font-weight: bold;
            color: #495057;
        }

        .url-close {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #6c757d;
        }

        .url-close:hover {
            color: #495057;
        }

        .url-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .url-input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            width: 100%;
            box-sizing: border-box;
        }

        .url-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .url-save-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .url-save-btn:hover {
            background: #0056b3;
        }

        .url-save-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        .url-remove-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .url-remove-btn:hover {
            background: #c82333;
        }

        .url-cancel-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .url-cancel-btn:hover {
            background: #5a6268;
        }

        .vendor {
            width: 280px;
            /* Increased from ~180px */
            word-wrap: break-word;
        }

        .date-cell {
            width: 100px;
        }

        .update-date-cell {
            width: 130px;
            font-size: 14px;
        }

        .next-update-cell {
            width: 140px;
        }

        /* Date input styling */
        .date-input {
            width: 100%;
            border: 1px solid transparent;
            background: transparent;
            padding: 4px 6px;
            border-radius: 4px;
            font-size: 14px;
            color: #495057;
        }

        .date-input:focus {
            background: white;
            border: 1px solid #007bff;
            outline: none;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

        .date-input.has-date {
            background: #e7f3ff;
            border-color: #b3d9ff;
        }

        .date-input.saving {
            background: #d1ecf1;
            border-color: #bee5eb;
        }

        .date-input.overdue {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }

        /* Shipping tracking display */
        .shipping-tracking {
            font-size: 13px;
            color: #6c757d;
        }

        .shipping-tracking.has-tracking {
            color: #007bff;
            cursor: pointer;
            text-decoration: underline;
        }

        .shipping-tracking.has-tracking:hover {
            color: #0056b3;
        }

        .shipping-tracking-input {
            width: 100%;
            max-width: 150px;
            transition: all 0.2s ease;
        }

        .shipping-tracking-input:focus {
            border-color: #007bff !important;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .shipping-tracking-input.has-tracking {
            border-color: #007bff;
            background-color: #f8f9ff;
        }

        .shipping-tracking-cell {
            min-width: 180px;
            max-width: 180px;
        }

        .tracking-container {
            position: relative;
        }

        .tracking-input-row {
            display: flex;
            align-items: center;
            gap: 4px;
            margin-bottom: 2px;
        }

        .shipping-carrier-select {
            min-width: 80px;
            flex-shrink: 0;
        }

        .tracking-actions {
            display: flex;
            gap: 2px;
            margin-top: 2px;
        }

        .tracking-actions .btn {
            padding: 1px 4px;
            font-size: 10px;
            line-height: 1;
            border-radius: 3px;
        }

        .tracking-status {
            font-size: 10px;
            margin-top: 2px;
            padding: 2px 4px;
            border-radius: 3px;
            background-color: #f8f9fa;
        }

        .tracking-status.status-delivered {
            background-color: #d4edda;
            color: #155724;
        }

        .tracking-status.status-transit {
            background-color: #cce7ff;
            color: #004085;
        }

        .tracking-status.status-expired {
            background-color: #f8d7da;
            color: #721c24;
        }

        .tracking-status.status-alert {
            background-color: #fff3cd;
            color: #856404;
        }

        /* Toast notification for tracking actions */
        .tracking-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #28a745;
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            z-index: 9999;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .tracking-toast.show {
            opacity: 1;
            transform: translateX(0);
        }

        .tracking-toast.error {
            background-color: #dc3545;
        }

        .tracking-toast.warning {
            background-color: #ffc107;
            color: #212529;
        }

        .notes-cell {
            min-width: 200px;
        }

        .status-cell {
            min-width: 150px;
        }

        .ns-status-cell {
            min-width: 120px;
        }

        /* NS Status display styling - 16px font */
        .ns-status-display {
            color: #856404;
            background: #fff3cd;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 16px;
            font-weight: 500;
            display: inline-block;
        }

        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
        }

        .stat {
            text-align: center;
        }

        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }

        .stat-label {
            font-size: 12px;
            color: #6c757d;
            text-transform: uppercase;
        }

        .results-info {
            color: #6c757d;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .no-results {
            text-align: center;
            padding: 40px;
            color: #6c757d;
            background: #f8f9fa;
            border-radius: 8px;
        }

        /* Status Management Modal */
        .status-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .status-modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .status-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
        }

        .status-modal-title {
            font-size: 18px;
            font-weight: bold;
            color: #495057;
        }

        .status-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #6c757d;
        }

        .status-close:hover {
            color: #495057;
        }

        .status-form {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .status-input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        .status-add-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        .status-add-btn:hover {
            background: #218838;
        }

        .status-add-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        .status-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            margin-bottom: 5px;
            background: #f8f9fa;
        }

        .status-item.default {
            background: #e7f3ff;
            border-color: #b3d9ff;
        }

        .status-item-name {
            font-size: 16px;
        }

        .status-item.default .status-item-name::after {
            content: " (default)";
            font-size: 12px;
            color: #6c757d;
            font-style: italic;
        }

        .status-delete-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }

        .status-delete-btn:hover {
            background: #c82333;
        }

        .status-delete-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        .manage-status-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-left: 10px;
        }

        .manage-status-btn:hover {
            background: #5a6268;
        }

        .notes-manager-btn {
            background: #28a745;
            color: white;
            padding: 6px 12px;
            text-decoration: none;
            border-radius: 4px;
            font-size: 12px;
            margin-left: 10px;
        }

        .notes-manager-btn:hover {
            background: #218838;
        }

        /* Notes History Modal */
        .notes-history-content {
            max-height: 500px;
            overflow-y: auto;
        }

        .note-item {
            border: 1px solid #dee2e6;
            border-radius: 4px;
            margin-bottom: 10px;
            padding: 12px;
            background: white;
        }

        .note-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
            font-size: 12px;
            color: #6c757d;
        }

        .note-date {
            font-weight: bold;
        }

        .note-content {
            padding: 8px 0;
            font-size: 14px;
            line-height: 1.4;
            color: #495057;
            white-space: pre-wrap;
        }

        .note-delete-btn {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 2px 6px;
            cursor: pointer;
            font-size: 10px;
        }

        .note-delete-btn:hover {
            background: #c82333;
        }

        .no-notes {
            text-align: center;
            color: #6c757d;
            font-style: italic;
            padding: 40px;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Purchase Orders Dashboard</h1>
            <div class="navigation-container">
                <!-- Managers Accordion -->
                <div class="nav-section">
                    <button class="nav-accordion-btn" onclick="toggleAccordion('managersAccordion')">
                        📊 Managers <span class="accordion-icon">▼</span>
                    </button>
                    <div id="managersAccordion" class="nav-accordion-content">
                        <a href="/purchase-orders/trouble-seed" class="nav-accordion-item">⚠️ Trouble Seed</a>
                        <a href="/purchase-orders/line-items-manager" class="nav-accordion-item">📦 Line Items
                            Manager</a>
                        <a href="/purchase-orders/tracking-dashboard" class="nav-accordion-item">🚚 17Track
                            Dashboard</a>
                        <a href="/purchase-orders/orphaned-line-items" class="nav-accordion-item">🧹 Orphaned Items</a>
                        <a href="/purchase-orders/notes-manager" class="nav-accordion-item">📝 Notes Manager</a>
                        <a href="/organic-vendors" class="nav-accordion-item">🌱 Organic Vendors</a>
                    </div>
                </div>

                <!-- Combined Options Button -->
                <div class="nav-section">
                    <button class="nav-options-btn" onclick="toggleOptionsDropdown()">
                        ⚙️ Options <span class="dropdown-icon">▼</span>
                    </button>
                    <div id="optionsDropdown" class="nav-dropdown-content">
                        <button class="nav-dropdown-item" onclick="openStatusModal()">
                            🏷️ Manage PO Status Options
                        </button>
                        <button class="nav-dropdown-item" onclick="openLineItemStatusModal()">
                            📋 Manage Line Item Status Options
                        </button>
                        <button class="nav-dropdown-item" onclick="openCarrierModal()">
                            🚚 Manage Carriers
                        </button>
                    </div>
                </div>

                <!-- Imports Section -->
                <div class="nav-section">
                    <button class="nav-imports-btn" onclick="toggleImportsDropdown()">
                        📁 Import <span class="dropdown-icon">▼</span>
                    </button>
                    <div id="importsDropdown" class="nav-dropdown-content">
                        <a href="/upload" class="nav-dropdown-item">📄 Purchase Orders CSV</a>
                        <a href="/upload-line-items" class="nav-dropdown-item">📦 Line Items CSV</a>
                        <button class="nav-dropdown-item" onclick="openNetSuiteImportModal()">🏢 NetSuite PO
                            Form</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- NetSuite Import Modal -->
        <div id="netsuiteImportModal" class="modal" style="display: none;">
            <div class="modal-content netsuite-import-modal">
                <div class="modal-header">
                    <h3>Import NetSuite PO Form Data</h3>
                    <span class="close" onclick="closeNetSuiteImportModal()">&times;</span>
                </div>
                <div class="modal-body">
                    <p>Paste your NetSuite PO form data below. The system will automatically parse the line items and
                        associate them with the corresponding purchase order.</p>

                    <div class="form-group">
                        <label for="netsuiteData">NetSuite PO Form Data:</label>
                        <textarea id="netsuiteData"
                            placeholder="Paste your NetSuite PO form data here...

Format Option 1 (Headers in single line):
Item	Vendor Name	Quantity	Description	VENDOR DESC	Rate	Units	On Hand	Available	Received	Billed	Amount	Match Bill To Receipt	Expected Receipt Date	Bill Variance Status	Closed	Expected Arrival Date	History
BR114 : BR114/OR.M		250	ASPABROC (ordering)	ASPABROC (ordering)	26.25	M	58.142	58.142	0	0	6,562.50		3/13/2025				History

Format Option 2 (Headers on separate lines):
Item
Vendor Name
Quantity
Description
VENDOR DESC
Rate
Units
On Hand
Available
Received
Billed
Amount
Match Bill To Receipt
Expected Receipt Date
Bill Variance Status
Closed
Expected Arrival Date
History
FL2948 : FL2948/OR.M	 	100	MEXICAN SUNFLOWER FIESTA DEL SOL : Min Germ; 70%	FIESTA DEL SOL	24.78	M	157.32	157.32	100	100	2,478.00	 	8/6/2025	No Variances	 	 	History"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="targetPO">Target Purchase Order (Optional):</label>
                        <select id="targetPO">
                            <option value="">Auto-detect from data...</option>
                            <% purchaseOrders.forEach(po=> { %>
                                <option value="<%= po._id %>">
                                    <%= po.poNumber %> - <%= po.vendor %>
                                </option>
                                <% }); %>
                        </select>
                    </div>

                    <div class="form-group">
                        <div class="import-mode-options">
                            <label class="checkbox-label">
                                <input type="checkbox" id="addToExisting" />
                                <span class="checkmark"></span>
                                Add to existing line items (instead of replacing them)
                            </label>
                            <p class="option-description">
                                <strong>Unchecked (Default):</strong> Replace all existing line items with the new
                                data<br>
                                <strong>Checked:</strong> Add the imported items to any existing line items
                            </p>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button class="btn btn-secondary" onclick="closeNetSuiteImportModal()">Cancel</button>
                        <button class="btn btn-primary" onclick="processNetSuiteImport()">Import Line Items</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pre-Purchase Orders Section -->
        <div class="pre-purchase-section">
            <div class="pre-purchase-header">
                <h2>📋 Pre-Purchase Orders<% if (prePurchaseOrders && prePurchaseOrders.length> 0) { %> (<%=
                            prePurchaseOrders.length %>)<% } %>
                </h2>
                <button class="add-pre-po-btn" onclick="addPrePurchaseOrder()">➕ Add Pre-PO</button>
            </div>

            <% if (prePurchaseOrders && prePurchaseOrders.length> 0) { %>
                <div class="pre-purchase-orders">
                    <% prePurchaseOrders.forEach((prePO, index)=> { %>
                        <div class="pre-po-card priority-<%= prePO.priority.toLowerCase() %>" data-id="<%= prePO._id %>"
                            data-priority="<%= prePO.priority.toLowerCase() %>"
                            data-receive-date="<%= prePO.receiveDate || '' %>" data-status="<%= prePO.status %>">
                            <div class="pre-po-header">
                                <div class="pre-po-title">📦 <strong>
                                        <%= prePO.vendor %>
                                    </strong></div>
                                <div class="pre-po-priority <%= prePO.priority.toLowerCase() %>">
                                    <%= prePO.priority %>
                                </div>
                            </div>
                            <div class="pre-po-body">
                                <% if (prePO.items) { %>
                                    <div class="pre-po-items">
                                        <%= prePO.items.substring(0, 100) %>
                                            <%= prePO.items.length> 100 ? '...' : '' %>
                                    </div>
                                    <% } %>
                                        <div class="pre-po-meta">
                                            <span class="pre-po-status">📋 <%= prePO.status %></span>
                                            <% if (prePO.receiveDate) { %>
                                                <span class="pre-po-date">🗓️ <%= new
                                                        Date(prePO.receiveDate).toLocaleDateString() %></span>
                                                <% } %>
                                        </div>
                            </div>
                            <div class="pre-po-actions">
                                <button class="edit-pre-po-btn" onclick="editPrePurchaseOrder('<%= prePO._id %>')">✏️
                                    Edit</button>
                                <button class="convert-pre-po-btn"
                                    onclick="convertPrePurchaseOrder('<%= prePO._id %>')">🔄 Convert to PO</button>
                                <button class="delete-pre-po-btn"
                                    onclick="deletePrePurchaseOrder('<%= prePO._id %>')">🗑️ Delete</button>
                            </div>
                        </div>
                        <% }); %>
                </div>
                <% } else { %>
                    <div class="no-pre-pos">
                        <p>No pre-purchase orders yet. Start planning your purchases!</p>
                    </div>
                    <% } %>
        </div>

        <% if (purchaseOrders.length> 0) { %>
            <!-- Filters Section -->
            <div class="filters">
                <div class="filter-group">
                    <label>Search Vendor or PO Number</label>
                    <input type="text" id="searchFilter" placeholder="Type to search...">
                </div>

                <div class="filter-group">
                    <label>NS Status Filter</label>
                    <select id="nsStatusFilter">
                        <option value="all">All NS Statuses</option>
                        <% uniqueNSStatuses.forEach(status=> { %>
                            <option value="<%= status %>">
                                <%= status %>
                            </option>
                            <% }); %>
                    </select>
                </div>

                <div class="filter-group">
                    <label>Status Filter</label>
                    <select id="statusFilter">
                        <option value="all">All Statuses</option>
                        <% uniqueStatuses.forEach(status=> { %>
                            <option value="<%= status %>">
                                <%= status %>
                            </option>
                            <% }); %>
                    </select>
                </div>

                <div class="filter-group">
                    <label>Notes Filter</label>
                    <select id="notesFilter">
                        <option value="all">All POs</option>
                        <option value="with-notes">With Notes Only</option>
                        <option value="without-notes">Without Notes Only</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label style="margin-bottom: 5px;">Show "Not my concern"</label>
                    <label style="display: flex; align-items: center; gap: 5px; margin-top: 19px;">
                        <input type="checkbox" id="showNotMyConcern" style="margin: 0;">
                        <span style="font-size: 12px;">Show hidden POs</span>
                    </label>
                </div>

                <div class="filter-group">
                    <label style="margin-bottom: 5px;">Show "Pending Bill"</label>
                    <label style="display: flex; align-items: center; gap: 5px; margin-top: 19px;">
                        <input type="checkbox" id="showPendingBill" style="margin: 0;">
                        <span style="font-size: 12px;">Show billed POs</span>
                    </label>
                </div>

                <div class="filter-group">
                    <button class="clear-filters" onclick="clearAllFilters()">Clear Filters</button>
                    <button class="btn btn-sm btn-outline-primary ms-2" onclick="updateAllTracking()"
                        id="bulkTrackingBtn" title="Update all shipping tracking with 17track">
                        🚚 Update Tracking
                    </button>
                </div>
            </div>

            <!-- Stats Section -->
            <div class="stats">
                <div class="stat">
                    <div class="stat-number" id="totalCount">
                        <%= purchaseOrders.length %>
                    </div>
                    <div class="stat-label">Total POs</div>
                </div>
                <div class="stat">
                    <div class="stat-number" id="notesCount">
                        <%= purchaseOrders.filter(po=> po.notes && po.notes.trim()).length %>
                    </div>
                    <div class="stat-label">With Notes</div>
                </div>
                <div class="stat">
                    <div class="stat-number" id="visibleCount">
                        <%= purchaseOrders.length %>
                    </div>
                    <div class="stat-label">Showing</div>
                </div>
            </div>

            <div class="results-info" id="resultsInfo">
                Showing all <%= purchaseOrders.length %> purchase orders
            </div>
            <% } %>

                <% if (purchaseOrders.length===0) { %>
                    <div style="text-align: center; padding: 60px; color: #6c757d;">
                        <h3>No Purchase Orders Found</h3>
                        <p>Upload a CSV file to get started</p>
                        <a href="/upload" class="upload-btn">📁 Upload CSV</a>
                    </div>
                    <% } else { %>
                        <table id="purchaseOrdersTable">
                            <thead>
                                <tr>
                                    <th class="sortable date-cell" data-column="date">Date</th>
                                    <th class="sortable po-number" data-column="poNumber">PO Number</th>
                                    <th class="sortable vendor" data-column="vendor">Vendor</th>
                                    <th class="sortable line-items-count-cell" data-column="lineItemsCount">Line Items</th>
                                    <th class="sortable ns-status-cell" data-column="nsStatus">NS Status</th>
                                    <th class="sortable status-cell" data-column="status">Status</th>
                                    <th class="sortable shipping-tracking-cell" data-column="shippingTracking">Tracking
                                        <br><small style="font-weight: normal;">(Carrier & #)</small>
                                    </th>
                                    <th class="sortable next-update-cell" data-column="nextUpdateDate">Next Update</th>
                                    <th class="notes-toggle-cell">Notes</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% purchaseOrders.forEach((po, index)=> { %>
                                    <!-- Main data row -->
                                    <tr data-po='<%= JSON.stringify(po) %>' data-index="<%= index %>">
                                        <td class="date-cell">
                                            <%= po.date %>
                                        </td>
                                        <td class="po-number">
                                            <div class="po-container">
                                                <% if (po.poUrl && po.poUrl.trim()) { %>
                                                    <a href="<%= po.poUrl %>" target="_blank" class="po-link"
                                                        title="Open <%= po.poNumber %> link">
                                                        <%= po.poNumber %>
                                                    </a>
                                                    <% } else { %>
                                                        <span class="po-text">
                                                            <%= po.poNumber %>
                                                        </span>
                                                        <% } %>
                                                            <button
                                                                class="url-btn <%= po.poUrl && po.poUrl.trim() ? 'has-url' : '' %>"
                                                                data-id="<%- po._id %>" data-po="<%- po.poNumber %>"
                                                                data-url="<%- po.poUrl || '' %>"
                                                                title="<%= po.poUrl && po.poUrl.trim() ? 'Edit URL' : 'Add URL' %>">
                                                                🔗
                                                            </button>
                                            </div>
                                        </td>
                                        <td class="vendor" title="<%= po.vendor %>">
                                            <%= po.vendor %>
                                        </td>
                                        <td class="line-items-count-cell">
                                            <% if (po.lineItems && po.lineItems.length> 0) { %>
                                                <div class="line-items-count-display">
                                                    <button class="line-items-count-btn" data-index="<%= index %>"
                                                        data-id="<%= po._id %>"
                                                        title="View line items: <%= po.lineItems.filter(item => item.received).length %> received / <%= po.lineItems.length %> total">
                                                        📦 <span class="count-number">
                                                            <% const totalItems=po.lineItems.length; const
                                                                receivedItems=po.lineItems.filter(item=>
                                                                item.received).length;
                                                                %>
                                                                <%= receivedItems %>/<%= totalItems %>
                                                        </span>
                                                    </button>
                                                    <button class="update-netsuite-btn" data-po-id="<%= po._id %>"
                                                        data-po-number="<%= po.poNumber %>"
                                                        title="Update line items for PO <%= po.poNumber %>">
                                                        🔄
                                                    </button>
                                                </div>
                                                <% } else { %>
                                                    <div class="no-line-items-display">
                                                        <button class="import-netsuite-btn" data-po-id="<%= po._id %>"
                                                            data-po-number="<%= po.poNumber %>"
                                                            title="Import NetSuite line items for PO <%= po.poNumber %>">
                                                            📥
                                                        </button>
                                                    </div>
                                                    <% } %>
                                        </td>
                                        <td class="ns-status-cell">
                                            <span class="ns-status-display">
                                                <%= po.nsStatus %>
                                            </span>
                                        </td>
                                        <td class="status-cell">
                                            <select class="status-select <%= po.status ? 'has-status' : '' %>"
                                                data-id="<%= po._id %>" data-po="<%= po.poNumber %>"
                                                title="Custom Status for PO <%= po.poNumber %>">
                                                <option value="">Select Status...</option>
                                                <% statusOptions.forEach(option=> { %>
                                                    <option value="<%= option %>" <%=po.status===option ? 'selected'
                                                        : '' %>>
                                                        <%= option %>
                                                    </option>
                                                    <% }); %>
                                            </select>
                                        </td>
                                        <td class="shipping-tracking-cell">
                                            <div class="tracking-container">
                                                <div class="tracking-input-row">
                                                    <select class="shipping-carrier-select form-control-sm"
                                                        data-po-id="<%= po._id %>"
                                                        style="font-size: 12px; border: 1px solid #ddd; padding: 4px 8px; width: 80px; margin-right: 4px;">
                                                        <option value="FedEx" <%=(po.shippingCarrier || 'FedEx'
                                                            )==='FedEx' ? 'selected' : '' %>>FedEx</option>
                                                        <option value="UPS" <%=(po.shippingCarrier || 'FedEx' )==='UPS'
                                                            ? 'selected' : '' %>>UPS</option>
                                                        <option value="USPS" <%=(po.shippingCarrier || 'FedEx'
                                                            )==='USPS' ? 'selected' : '' %>>USPS</option>
                                                        <option value="DHL" <%=(po.shippingCarrier || 'FedEx' )==='DHL'
                                                            ? 'selected' : '' %>>DHL</option>
                                                        <option value="Amazon" <%=(po.shippingCarrier || 'FedEx'
                                                            )==='Amazon' ? 'selected' : '' %>>Amazon</option>
                                                        <option value="OnTrac" <%=(po.shippingCarrier || 'FedEx'
                                                            )==='OnTrac' ? 'selected' : '' %>>OnTrac</option>
                                                        <option value="LaserShip" <%=(po.shippingCarrier || 'FedEx'
                                                            )==='LaserShip' ? 'selected' : '' %>>LaserShip</option>
                                                        <option value="Canada Post" <%=(po.shippingCarrier || 'FedEx'
                                                            )==='Canada Post' ? 'selected' : '' %>>Canada Post</option>
                                                        <option value="Other" <%=(po.shippingCarrier || 'FedEx'
                                                            )==='Other' ? 'selected' : '' %>>Other</option>
                                                    </select>
                                                    <input type="text" class="shipping-tracking-input form-control-sm"
                                                        placeholder="Enter tracking #"
                                                        value="<%= po.shippingTracking || '' %>"
                                                        data-po-id="<%= po._id %>"
                                                        style="font-size: 12px; border: 1px solid #ddd; padding: 4px 8px; flex: 1;">
                                                </div>
                                                <% if (po.shippingTracking) { %>
                                                    <div class="tracking-actions">
                                                        <button class="btn btn-sm btn-outline-primary tracking-info-btn"
                                                            data-tracking="<%= po.shippingTracking %>"
                                                            data-carrier="<%= po.shippingCarrier || 'FedEx' %>"
                                                            data-po-id="<%= po._id %>" title="Get tracking info">
                                                            🔍
                                                        </button>
                                                        <button
                                                            class="btn btn-sm btn-outline-success tracking-update-btn"
                                                            data-po-id="<%= po._id %>"
                                                            title="Update tracking from 17track">
                                                            🔄
                                                        </button>
                                                    </div>
                                                    <div class="tracking-status" data-po-id="<%= po._id %>">
                                                        <small class="text-muted">Click 🔍 to check status</small>
                                                    </div>
                                                    <% } %>
                                            </div>
                                        </td>
                                        <td class="next-update-cell">
                                            <input type="date"
                                                class="date-input <%= po.nextUpdateDate ? 'has-date' : '' %> <%= po.nextUpdateDate && new Date(po.nextUpdateDate) < new Date() ? 'overdue' : '' %>"
                                                value="<%= po.nextUpdateDate ? new Date(po.nextUpdateDate).toISOString().split('T')[0] : '' %>"
                                                data-id="<%= po._id %>" data-po="<%= po.poNumber %>"
                                                title="Set next update date for PO <%= po.poNumber %>">
                                        </td>
                                        <td class="notes-toggle-cell">
                                            <div style="display: flex; gap: 4px;">
                                                <button class="line-items-toggle" type="button"
                                                    data-index="<%= index %>" data-id="<%= po._id %>"
                                                    title="View line items for PO <%= po.poNumber %>">
                                                    📦
                                                </button>
                                                <button
                                                    class="notes-toggle <%= po.notes && po.notes.trim() ? 'has-notes' : '' %>"
                                                    type="button" data-index="<%= index %>"
                                                    title="<%= po.notes && po.notes.trim() ? 'View/Edit notes' : 'Add notes' %>">
                                                    <%= po.notes && po.notes.trim() ? '📝' : '➕' %>
                                                </button>
                                                <button class="notes-history-btn" type="button" data-id="<%= po._id %>"
                                                    data-po="<%= po.poNumber %>" title="View notes history">
                                                    📋
                                                </button>
                                            </div>
                                        </td>
                                    </tr>

                                    <!-- Expandable line items row -->
                                    <tr class="line-items-row" id="line-items-row-<%= index %>">
                                        <td colspan="9" class="line-items-cell-expanded">
                                            <div class="line-items-header">
                                                <div class="line-items-title">Line Items for PO <%= po.poNumber %>
                                                        <span class="line-items-status"
                                                            id="line-items-status-<%= index %>"></span>
                                                </div>
                                                <div class="line-items-actions">
                                                    <button class="show-received-toggle" id="show-received-<%= index %>"
                                                        onclick="toggleReceivedItems(<%= index %>)"
                                                        style="display: none;">
                                                        👁️ Show Received
                                                    </button>
                                                    <button class="line-items-close"
                                                        data-index="<%= index %>">Close</button>
                                                </div>
                                            </div>
                                            <div class="line-items-container" id="line-items-container-<%= index %>">
                                                <div class="loading-line-items">Loading line items...</div>
                                            </div>
                                        </td>
                                    </tr>

                                    <!-- Expandable notes row -->
                                    <tr class="notes-row" id="notes-row-<%= index %>">
                                        <td colspan="9" class="notes-cell-expanded">
                                            <div class="notes-header">
                                                <div class="notes-title">Notes for PO <%= po.poNumber %>
                                                </div>
                                                <div class="notes-actions">
                                                    <button class="notes-close" data-index="<%= index %>">Close</button>
                                                </div>
                                            </div>
                                            <div class="notes-container">
                                                <textarea
                                                    class="notes-input <%= po.notes && po.notes.trim() ? 'has-notes' : '' %>"
                                                    data-id="<%= po._id %>" data-po="<%= po.poNumber %>"
                                                    data-index="<%= index %>"
                                                    placeholder="Add detailed notes for <%= po.poNumber %>... (These notes persist across CSV uploads)"><%= po.notes %></textarea>
                                            </div>
                                        </td>
                                    </tr>
                                    <% }); %>
                            </tbody>
                        </table>

                        <div class="no-results" id="noResults" style="display: none;">
                            <h3>No Purchase Orders Match Your Filters</h3>
                            <p>Try adjusting your search criteria or clearing the filters.</p>
                        </div>
                        <% } %>
    </div>

    <!-- Status Management Modal -->
    <div id="statusModal" class="status-modal">
        <div class="status-modal-content">
            <div class="status-modal-header">
                <div class="status-modal-title">Manage Status Options</div>
                <button class="status-close" onclick="closeStatusModal()">&times;</button>
            </div>

            <div class="status-form">
                <input type="text" id="statusInput" class="status-input" placeholder="Enter new status option..."
                    maxlength="50">
                <button id="addStatusBtn" class="status-add-btn" onclick="addStatusOption()">Add</button>
            </div>

            <div id="statusList" class="status-list">
                <!-- Status options will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Line Item Status Management Modal -->
    <div id="lineItemStatusModal" class="status-modal">
        <div class="status-modal-content">
            <div class="status-modal-header">
                <div class="status-modal-title">Manage Line Item Status Options</div>
                <button class="status-close" onclick="closeLineItemStatusModal()">&times;</button>
            </div>

            <div class="status-form">
                <input type="text" id="lineItemStatusInput" class="status-input"
                    placeholder="Enter new line item status option..." maxlength="50">
                <button id="addLineItemStatusBtn" class="status-add-btn"
                    onclick="addLineItemStatusOption()">Add</button>
            </div>

            <div id="lineItemStatusList" class="status-list">
                <!-- Line item status options will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Carrier Management Modal -->
    <div id="carrierModal" class="status-modal">
        <div class="status-modal-content">
            <div class="status-modal-header">
                <div class="status-modal-title">Manage Carrier Options</div>
                <button class="status-close" onclick="closeCarrierModal()">&times;</button>
            </div>

            <div class="status-form">
                <input type="text" id="carrierInput" class="status-input" placeholder="Enter new carrier option..."
                    maxlength="50">
                <button id="addCarrierBtn" class="status-add-btn" onclick="addCarrierOption()">Add</button>
            </div>

            <div id="carrierList" class="status-list">
                <!-- Carrier options will be loaded here -->
            </div>
        </div>
    </div>

    <!-- URL Management Modal -->
    <div id="urlModal" class="url-modal">
        <div class="url-modal-content">
            <div class="url-modal-header">
                <div class="url-modal-title" id="urlModalTitle">Add URL for PO</div>
                <button class="url-close" onclick="closeUrlModal()">&times;</button>
            </div>

            <div class="url-form">
                <label for="urlInput">URL:</label>
                <input type="url" id="urlInput" class="url-input" placeholder="https://example.com" autocomplete="off">

                <div class="url-actions">
                    <button id="urlRemoveBtn" class="url-remove-btn" onclick="removeUrl()" style="display: none;">Remove
                        URL</button>
                    <button class="url-cancel-btn" onclick="closeUrlModal()">Cancel</button>
                    <button id="urlSaveBtn" class="url-save-btn" onclick="saveUrl()">Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Notes History Modal -->
    <div id="notesHistoryModal" class="status-modal">
        <div class="status-modal-content" style="max-width: 800px;">
            <div class="status-modal-header">
                <div class="status-modal-title" id="notesHistoryTitle">Notes History</div>
                <button class="status-close" onclick="closeNotesHistoryModal()">&times;</button>
            </div>

            <div id="notesHistoryContent" class="notes-history-content">
                <!-- Notes history will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Navigation Functions
        function toggleAccordion() {
            const content = document.getElementById('managersAccordion');
            const icon = document.querySelector('.accordion-icon');

            content.classList.toggle('show');
            icon.classList.toggle('rotated');
        }

        function toggleOptionsDropdown() {
            const content = document.getElementById('optionsDropdown');
            const icon = document.querySelector('.nav-options-btn .dropdown-icon');

            content.classList.toggle('show');
            icon.classList.toggle('rotated');

            // Close other dropdowns
            document.getElementById('importsDropdown').classList.remove('show');
            document.querySelector('.nav-imports-btn .dropdown-icon').classList.remove('rotated');
        }

        function toggleImportsDropdown() {
            const content = document.getElementById('importsDropdown');
            const icon = document.querySelector('.nav-imports-btn .dropdown-icon');

            content.classList.toggle('show');
            icon.classList.toggle('rotated');

            // Close other dropdowns
            document.getElementById('optionsDropdown').classList.remove('show');
            document.querySelector('.nav-options-btn .dropdown-icon').classList.remove('rotated');
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function (event) {
            const managersSection = document.querySelector('.nav-section:first-child');
            const optionsSection = document.querySelector('.nav-section:nth-child(2)');
            const importsSection = document.querySelector('.nav-section:nth-child(3)');

            if (!managersSection.contains(event.target)) {
                document.getElementById('managersAccordion').classList.remove('show');
                document.querySelector('.accordion-icon').classList.remove('rotated');
            }

            if (!optionsSection.contains(event.target)) {
                document.getElementById('optionsDropdown').classList.remove('show');
                document.querySelector('.nav-options-btn .dropdown-icon').classList.remove('rotated');
            }

            if (!importsSection.contains(event.target)) {
                document.getElementById('importsDropdown').classList.remove('show');
                document.querySelector('.nav-imports-btn .dropdown-icon').classList.remove('rotated');
            }
        });

        // NetSuite Import Functions
        function openNetSuiteImportModal(isUpdate = false, poNumber = '') {
            const modal = document.getElementById('netsuiteImportModal');
            const modalTitle = modal.querySelector('.modal-header h3');
            const modalDescription = modal.querySelector('.modal-body p');
            const importButton = modal.querySelector('.btn-primary');

            if (isUpdate && poNumber) {
                modalTitle.textContent = `Update Line Items for PO ${poNumber}`;
                modalDescription.textContent = 'Paste your updated NetSuite PO form data below. This will update the existing line items for this purchase order.';
                importButton.textContent = 'Update Line Items';
            } else if (poNumber) {
                modalTitle.textContent = `Import Line Items for PO ${poNumber}`;
                modalDescription.textContent = 'Paste your NetSuite PO form data below. The system will automatically parse the line items and associate them with this purchase order.';
                importButton.textContent = 'Import Line Items';
            } else {
                modalTitle.textContent = 'Import NetSuite PO Form Data';
                modalDescription.textContent = 'Paste your NetSuite PO form data below. The system will automatically parse the line items and associate them with the corresponding purchase order.';
                importButton.textContent = 'Import Line Items';
            }

            modal.style.display = 'block';

            // Close imports dropdown if it's open
            const importsDropdown = document.getElementById('importsDropdown');
            const dropdownIcon = document.querySelector('.nav-imports-btn .dropdown-icon');
            if (importsDropdown) {
                importsDropdown.classList.remove('show');
            }
            if (dropdownIcon) {
                dropdownIcon.classList.remove('rotated');
            }
        }

        function closeNetSuiteImportModal() {
            document.getElementById('netsuiteImportModal').style.display = 'none';
            document.getElementById('netsuiteData').value = '';
            document.getElementById('targetPO').value = '';
            document.getElementById('addToExisting').checked = false;
        }

        async function processNetSuiteImport() {
            const netsuiteData = document.getElementById('netsuiteData').value.trim();
            const targetPOId = document.getElementById('targetPO').value;
            const addToExisting = document.getElementById('addToExisting').checked;

            if (!netsuiteData) {
                alert('Please paste the NetSuite PO form data');
                return;
            }

            try {
                const response = await fetch('/api/import-netsuite', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        data: netsuiteData,
                        targetPOId: targetPOId,
                        addToExisting: addToExisting
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    alert(`Successfully imported ${result.imported} line items`);
                    closeNetSuiteImportModal();
                    location.reload(); // Refresh to show updated data
                } else {
                    alert(`Import failed: ${result.error}`);
                }
            } catch (error) {
                console.error('Import error:', error);
                alert('Import failed: Network error');
            }
        }

        // Line Items Count Button Click Handler
        document.addEventListener('click', function (event) {
            if (event.target.closest('.line-items-count-btn')) {
                const btn = event.target.closest('.line-items-count-btn');
                const index = btn.dataset.index;

                // Trigger the line items view
                const lineItemsToggle = document.querySelector(`[data-index="${index}"][title*="View line items"]`);
                if (lineItemsToggle) {
                    lineItemsToggle.click();
                }
            }

            if (event.target.closest('.import-netsuite-btn')) {
                const btn = event.target.closest('.import-netsuite-btn');
                const poId = btn.dataset.poId;
                const poNumber = btn.dataset.poNumber;

                // Set the target PO and open modal for importing
                document.getElementById('targetPO').value = poId;
                openNetSuiteImportModal(false, poNumber); // false = import mode
            }

            if (event.target.closest('.update-netsuite-btn')) {
                const btn = event.target.closest('.update-netsuite-btn');
                const poId = btn.dataset.poId;
                const poNumber = btn.dataset.poNumber;

                // Set the target PO and open modal for updating
                document.getElementById('targetPO').value = poId;
                openNetSuiteImportModal(true, poNumber); // true = update mode
            }

            // Handle URL button clicks using event delegation
            if (event.target.closest('.url-btn')) {
                console.log('🔗 URL button clicked via event delegation!');
                const btn = event.target.closest('.url-btn');

                console.log('📋 Button data:', {
                    id: btn.getAttribute('data-id'),
                    po: btn.getAttribute('data-po'),
                    url: btn.getAttribute('data-url'),
                    className: btn.className
                });

                try {
                    currentUrlData = {
                        id: btn.getAttribute('data-id'),
                        poNumber: btn.getAttribute('data-po'),
                        url: btn.getAttribute('data-url') || ''
                    };
                    console.log('📝 Opening URL modal with data:', currentUrlData);
                    openUrlModal();
                    console.log('✅ URL modal opened successfully');
                } catch (error) {
                    console.error('❌ Error in URL button handler:', error);
                }
            }
        });

        let currentSort = { column: null, direction: null };

        // Enhanced Notes functionality - notes appear below each row

        // Handle notes toggle buttons
        document.querySelectorAll('.notes-toggle').forEach(toggleBtn => {
            toggleBtn.addEventListener('click', function () {
                const index = this.dataset.index;
                const notesRow = document.getElementById(`notes-row-${index}`);
                const isExpanded = notesRow.classList.contains('expanded');

                if (isExpanded) {
                    // Collapse
                    notesRow.classList.remove('expanded');
                } else {
                    // Expand
                    notesRow.classList.add('expanded');
                    // Focus on the textarea
                    const textarea = notesRow.querySelector('.notes-input');
                    setTimeout(() => textarea.focus(), 100);
                }
            });
        });

        // Handle line items toggle buttons
        document.querySelectorAll('.line-items-toggle').forEach(toggleBtn => {
            toggleBtn.addEventListener('click', async function () {
                const index = this.dataset.index;
                const poId = this.dataset.id;
                const lineItemsRow = document.getElementById(`line-items-row-${index}`);
                const isExpanded = lineItemsRow.classList.contains('expanded');

                if (isExpanded) {
                    // Collapse
                    lineItemsRow.classList.remove('expanded');
                } else {
                    // Expand and load line items
                    lineItemsRow.classList.add('expanded');
                    await loadLineItems(index, poId);
                }
            });
        });

        // Handle line items close buttons
        document.querySelectorAll('.line-items-close').forEach(closeBtn => {
            closeBtn.addEventListener('click', function () {
                const index = this.dataset.index;
                const lineItemsRow = document.getElementById(`line-items-row-${index}`);
                lineItemsRow.classList.remove('expanded');
            });
        });

        // Handle close buttons
        document.querySelectorAll('.notes-close').forEach(closeBtn => {
            closeBtn.addEventListener('click', function () {
                const index = this.dataset.index;
                const notesRow = document.getElementById(`notes-row-${index}`);
                notesRow.classList.remove('expanded');
            });
        });

        // Handle notes input with auto-save
        document.querySelectorAll('.notes-input').forEach(input => {
            let timeout;

            input.addEventListener('input', function () {
                const hasContent = this.value.trim().length > 0;
                const index = this.dataset.index;
                const toggleBtn = document.querySelector(`.notes-toggle[data-index="${index}"]`);

                // Update visual state
                if (hasContent) {
                    this.classList.add('has-notes');
                    toggleBtn.classList.add('has-notes');
                    toggleBtn.innerHTML = '📝';
                    toggleBtn.title = 'View/Edit notes';
                } else {
                    this.classList.remove('has-notes');
                    toggleBtn.classList.remove('has-notes');
                    toggleBtn.innerHTML = '➕';
                    toggleBtn.title = 'Add notes';
                }

                clearTimeout(timeout);

                // Show saving state
                this.classList.add('saving');

                timeout = setTimeout(() => {
                    const id = this.dataset.id;
                    const poNumber = this.dataset.po;
                    const notes = this.value;

                    fetch(`/purchase-orders/${id}/notes`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ notes })
                    })
                        .then(response => response.json())
                        .then(data => {
                            // Remove saving state
                            this.classList.remove('saving');

                            // Update stats after note change
                            updateStats();

                            console.log(`Notes saved for PO ${poNumber}`);
                        })
                        .catch(error => {
                            this.classList.remove('saving');
                            console.error('Error saving notes:', error);
                        });
                }, 1000);
            });
        });

        // Auto-save Status when changed
        document.querySelectorAll('.status-select').forEach(select => {
            select.addEventListener('change', function () {
                const id = this.dataset.id;
                const poNumber = this.dataset.po;
                const status = this.value;

                // Show saving state
                this.classList.add('saving');

                fetch(`/purchase-orders/${id}/status`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Remove saving state and update appearance
                        this.classList.remove('saving');

                        if (status) {
                            this.classList.add('has-status');
                        } else {
                            this.classList.remove('has-status');
                        }

                        // Update the data attribute for filtering
                        const row = this.closest('tr');
                        const poData = JSON.parse(row.dataset.po);
                        poData.status = status;
                        row.dataset.po = JSON.stringify(poData);

                        console.log(`Status saved for PO ${poNumber}: "${status}"`);
                    })
                    .catch(error => {
                        this.classList.remove('saving');
                        console.error('Error saving Status:', error);
                    });
            });
        });

        // Auto-save Next Update Date when changed
        document.querySelectorAll('.date-input').forEach(dateInput => {
            dateInput.addEventListener('change', function () {
                const id = this.dataset.id;
                const poNumber = this.dataset.po;
                const nextUpdateDate = this.value;

                // Show saving state
                this.classList.add('saving');

                fetch(`/purchase-orders/${id}/next-update-date`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ nextUpdateDate })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Remove saving state and update appearance
                        this.classList.remove('saving');

                        if (nextUpdateDate) {
                            this.classList.add('has-date');

                            // Check if date is overdue
                            const updateDate = new Date(nextUpdateDate);
                            const today = new Date();
                            today.setHours(0, 0, 0, 0); // Reset time for date comparison

                            if (updateDate < today) {
                                this.classList.add('overdue');
                            } else {
                                this.classList.remove('overdue');
                            }
                        } else {
                            this.classList.remove('has-date', 'overdue');
                        }

                        console.log(`Next update date saved for PO ${poNumber}: ${nextUpdateDate || 'cleared'}`);
                    })
                    .catch(error => {
                        this.classList.remove('saving');
                        console.error('Error saving next update date:', error);
                    });
            });
        });

        // Auto-save Shipping Tracking when changed with 17track integration
        document.querySelectorAll('.shipping-tracking-input').forEach(trackingInput => {
            trackingInput.addEventListener('blur', function () {
                const id = this.dataset.poId;
                const shippingTracking = this.value.trim();
                const oldValue = this.getAttribute('data-old-value') || '';

                // Get carrier from the carrier select in the same tracking container
                const carrierSelect = this.closest('.tracking-container').querySelector('.shipping-carrier-select');
                const shippingCarrier = carrierSelect ? carrierSelect.value : 'FedEx';

                // Show saving state
                this.style.backgroundColor = '#e3f2fd';

                fetch(`/purchase-orders/${id}/shipping-tracking`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ shippingTracking, shippingCarrier })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Remove saving state
                        this.style.backgroundColor = '';

                        // Update appearance based on content
                        if (shippingTracking) {
                            this.classList.add('has-tracking');
                            this.style.borderColor = '#007bff';

                            // Show tracking actions and status if not already visible
                            console.log(`🔧 Setting up tracking UI for PO ${id} with tracking: ${shippingTracking} (${shippingCarrier})`);
                            updateTrackingUI(id, shippingTracking, shippingCarrier);

                            // Auto-register with 17track if it's a new tracking number
                            if (shippingTracking !== oldValue && shippingTracking) {
                                registerTrackingNumber(shippingTracking, shippingCarrier);
                            }
                        } else {
                            this.classList.remove('has-tracking');
                            this.style.borderColor = '#ddd';
                            console.log(`🔧 Hiding tracking UI for PO ${id}`);
                            hideTrackingUI(id);
                        }

                        // Update old value for comparison
                        this.setAttribute('data-old-value', shippingTracking);
                        console.log(`Shipping tracking saved: ${shippingTracking || 'cleared'} (${shippingCarrier})`);
                    })
                    .catch(error => {
                        this.style.backgroundColor = '';
                        console.error('Error saving shipping tracking:', error);
                    });
            });

            // Store initial value for comparison
            trackingInput.setAttribute('data-old-value', trackingInput.value);

            // Initialize tracking UI for inputs that already have values
            if (trackingInput.value.trim()) {
                const poId = trackingInput.dataset.poId;
                const trackingNumber = trackingInput.value.trim();
                console.log(`🚀 Initializing tracking UI for PO ${poId} with tracking: ${trackingNumber}`);
                updateTrackingUI(poId, trackingNumber);
            }

            // Also save on Enter key
            trackingInput.addEventListener('keydown', function (e) {
                if (e.key === 'Enter') {
                    this.blur(); // Trigger the blur event
                }
            });
        });

        // Auto-save Shipping Carrier when changed
        document.querySelectorAll('.shipping-carrier-select').forEach(carrierSelect => {
            carrierSelect.addEventListener('change', function () {
                const id = this.dataset.poId;
                const shippingCarrier = this.value;

                // Get tracking number from the tracking input in the same container
                const trackingInput = this.closest('.tracking-container').querySelector('.shipping-tracking-input');
                const shippingTracking = trackingInput ? trackingInput.value.trim() : '';

                // Show saving state
                this.style.backgroundColor = '#e3f2fd';

                fetch(`/purchase-orders/${id}/shipping-tracking`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ shippingTracking, shippingCarrier })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Remove saving state
                        this.style.backgroundColor = '';

                        // Update tracking actions with new carrier
                        const trackingInfoBtn = this.closest('.tracking-container').querySelector('.tracking-info-btn');
                        if (trackingInfoBtn) {
                            trackingInfoBtn.setAttribute('data-carrier', shippingCarrier);
                        }

                        console.log(`Shipping carrier saved: ${shippingCarrier} for tracking: ${shippingTracking}`);
                    })
                    .catch(error => {
                        this.style.backgroundColor = '';
                        console.error('Error saving shipping carrier:', error);
                    });
            });
        });

        // Initialize existing tracking buttons on page load
        function initializeExistingTrackingButtons() {
            document.querySelectorAll('.tracking-info-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const trackingNumber = this.dataset.tracking;
                    const poId = this.dataset.poId;
                    getTrackingInfo(trackingNumber, poId);
                });
            });

            document.querySelectorAll('.tracking-update-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const poId = this.dataset.poId;
                    updatePOTracking(poId);
                });
            });
        }

        // Call initialization after a short delay to ensure DOM is ready
        setTimeout(initializeExistingTrackingButtons, 100);

        // Also handle clicks via event delegation for dynamically created buttons
        document.addEventListener('click', function (e) {
            if (e.target.classList.contains('tracking-info-btn')) {
                const trackingNumber = e.target.dataset.tracking;
                const poId = e.target.dataset.poId;
                getTrackingInfo(trackingNumber, poId);
            }

            if (e.target.classList.contains('tracking-update-btn')) {
                const poId = e.target.dataset.poId;
                updatePOTracking(poId);
            }
        });

        // Function to update tracking UI
        function updateTrackingUI(poId, trackingNumber, carrier = 'FedEx') {
            const input = document.querySelector(`[data-po-id="${poId}"].shipping-tracking-input`);
            if (!input) return;

            const container = input.closest('.tracking-container');

            // Check if actions already exist
            if (!container.querySelector('.tracking-actions')) {
                // Create tracking actions
                const actionsDiv = document.createElement('div');
                actionsDiv.className = 'tracking-actions';
                actionsDiv.innerHTML = `
                    <button class="btn btn-sm btn-outline-primary tracking-info-btn" 
                            data-tracking="${trackingNumber}"
                            data-carrier="${carrier}"
                            data-po-id="${poId}"
                            title="Get tracking info">
                        🔍
                    </button>
                    <button class="btn btn-sm btn-outline-success tracking-update-btn" 
                            data-po-id="${poId}"
                            title="Update tracking from 17track">
                        🔄
                    </button>
                `;

                // Create status div
                const statusDiv = document.createElement('div');
                statusDiv.className = 'tracking-status';
                statusDiv.setAttribute('data-po-id', poId);
                statusDiv.innerHTML = '<small class="text-muted">Click 🔍 to check status</small>';

                container.appendChild(actionsDiv);
                container.appendChild(statusDiv);

                // Add event listeners to the new buttons
                const infoBtn = actionsDiv.querySelector('.tracking-info-btn');
                const updateBtn = actionsDiv.querySelector('.tracking-update-btn');

                infoBtn.addEventListener('click', function () {
                    getTrackingInfo(this.dataset.tracking, this.dataset.poId);
                });

                updateBtn.addEventListener('click', function () {
                    updatePOTracking(this.dataset.poId);
                });

            } else {
                // Update existing tracking number in buttons
                const infoBtn = container.querySelector('.tracking-info-btn');
                if (infoBtn) {
                    infoBtn.dataset.tracking = trackingNumber;
                }
            }
        }

        // Function to hide tracking UI
        function hideTrackingUI(poId) {
            const input = document.querySelector(`[data-po-id="${poId}"].shipping-tracking-input`);
            if (!input) return;

            const container = input.closest('.tracking-container');
            if (!container) return;

            const actions = container.querySelector('.tracking-actions');
            const status = container.querySelector('.tracking-status');

            if (actions) actions.remove();
            if (status) status.remove();
        }

        // Function to register tracking number with 17track
        async function registerTrackingNumber(trackingNumber, carrier = 'FedEx') {
            try {
                console.log('🚀 Registering tracking number with 17track:', trackingNumber, `(${carrier})`);

                const response = await fetch('/purchase-orders/tracking/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        trackingNumbers: [{ number: trackingNumber, carrier: carrier }]
                    })
                });

                const result = await response.json();
                if (result.success) {
                    console.log('✅ Tracking number registered with 17track');
                    showTrackingToast(`📦 ${trackingNumber} (${carrier}) registered with 17track`, 'success');
                } else {
                    console.warn('⚠️ Failed to register tracking number:', result.error);
                    showTrackingToast('Failed to register tracking number', 'warning');
                }
            } catch (error) {
                console.error('❌ Error registering tracking number:', error);
            }
        }

        // Function to get tracking info
        async function getTrackingInfo(trackingNumber, poId) {
            const statusDiv = document.querySelector(`.tracking-status[data-po-id="${poId}"]`);
            const infoBtn = document.querySelector(`.tracking-info-btn[data-po-id="${poId}"]`);

            // Show loading state
            if (statusDiv) {
                statusDiv.innerHTML = '<small class="text-muted">🔄 Checking...</small>';
            }
            if (infoBtn) {
                infoBtn.disabled = true;
            }

            try {
                const response = await fetch(`/purchase-orders/tracking/${trackingNumber}`);
                const result = await response.json();

                if (result.success && result.trackingInfo) {
                    const info = result.trackingInfo;
                    const statusClass = getTrackingStatusClass(info.status);

                    if (statusDiv) {
                        statusDiv.className = `tracking-status ${statusClass}`;
                        statusDiv.innerHTML = `
                            <div>${info.statusDescription}</div>
                            ${info.lastUpdate ? `<div>Updated: ${new Date(info.lastUpdate).toLocaleDateString()}</div>` : ''}
                            ${info.lastLocation ? `<div>Location: ${info.lastLocation}</div>` : ''}
                        `;
                    }
                } else {
                    if (statusDiv) {
                        statusDiv.innerHTML = '<small class="text-warning">No tracking info found</small>';
                    }
                }
            } catch (error) {
                console.error('Error getting tracking info:', error);
                if (statusDiv) {
                    statusDiv.innerHTML = '<small class="text-danger">Error checking status</small>';
                }
            } finally {
                if (infoBtn) {
                    infoBtn.disabled = false;
                }
            }
        }

        // Function to update PO tracking
        async function updatePOTracking(poId) {
            const updateBtn = document.querySelector(`.tracking-update-btn[data-po-id="${poId}"]`);
            const statusDiv = document.querySelector(`.tracking-status[data-po-id="${poId}"]`);

            // Show loading state
            if (updateBtn) {
                updateBtn.disabled = true;
                updateBtn.innerHTML = '⏳';
            }

            try {
                const response = await fetch(`/purchase-orders/${poId}/tracking/update`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    if (statusDiv) {
                        statusDiv.innerHTML = '<small class="text-success">✅ Tracking updated!</small>';
                    }
                    showTrackingToast(`🔄 ${result.message}`, 'success');
                    // Refresh tracking info after a moment
                    setTimeout(() => {
                        const trackingNumber = document.querySelector(`.tracking-info-btn[data-po-id="${poId}"]`)?.dataset.tracking;
                        if (trackingNumber) {
                            getTrackingInfo(trackingNumber, poId);
                        }
                    }, 1000);
                } else {
                    if (statusDiv) {
                        statusDiv.innerHTML = '<small class="text-warning">No tracking numbers to update</small>';
                    }
                    showTrackingToast('No tracking numbers to update', 'warning');
                }
            } catch (error) {
                console.error('Error updating tracking:', error);
                if (statusDiv) {
                    statusDiv.innerHTML = '<small class="text-danger">Error updating tracking</small>';
                }
            } finally {
                if (updateBtn) {
                    updateBtn.disabled = false;
                    updateBtn.innerHTML = '🔄';
                }
            }
        }

        // Function to get CSS class for tracking status
        function getTrackingStatusClass(status) {
            switch (status) {
                case '40': return 'status-delivered';
                case '10': return 'status-transit';
                case '20': return 'status-expired';
                case '35': return 'status-undelivered';
                case '50': return 'status-alert';
                default: return '';
            }
        }

        // Toast notification system
        function showTrackingToast(message, type = 'success') {
            // Remove existing toast if any
            const existingToast = document.querySelector('.tracking-toast');
            if (existingToast) {
                existingToast.remove();
            }

            const toast = document.createElement('div');
            toast.className = `tracking-toast ${type}`;
            toast.textContent = message;

            document.body.appendChild(toast);

            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);

            // Hide toast after 3 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Bulk tracking update function
        async function updateAllTracking() {
            const btn = document.getElementById('bulkTrackingBtn');
            const originalText = btn.innerHTML;

            // Show loading state
            btn.disabled = true;
            btn.innerHTML = '⏳ Updating...';

            try {
                showTrackingToast('🚀 Starting bulk tracking update...', 'success');

                const response = await fetch('/purchase-orders/tracking/update-all', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    showTrackingToast(`✅ ${result.message}`, 'success');

                    // Refresh tracking status for visible POs after a short delay
                    setTimeout(() => {
                        document.querySelectorAll('.tracking-info-btn').forEach(btn => {
                            const trackingNumber = btn.dataset.tracking;
                            const poId = btn.dataset.poId;
                            if (trackingNumber && poId) {
                                getTrackingInfo(trackingNumber, poId);
                            }
                        });
                    }, 2000);
                } else {
                    showTrackingToast('No tracking numbers to update', 'warning');
                }
            } catch (error) {
                console.error('Error updating all tracking:', error);
                showTrackingToast('Error updating tracking', 'error');
            } finally {
                btn.disabled = false;
                btn.innerHTML = originalText;
            }
        }

        // URL Management functionality
        let currentUrlData = { id: '', poNumber: '', url: '' };

        // Initialize URL button handlers when DOM is ready
        function initUrlButtons() {
            console.log('🔧 Initializing URL buttons...');
            const urlButtons = document.querySelectorAll('.url-btn');
            console.log(`📊 Found ${urlButtons.length} URL buttons`);

            if (urlButtons.length === 0) {
                console.warn('⚠️ No URL buttons found - checking DOM structure');
                const allButtons = document.querySelectorAll('button');
                console.log(`📊 Found ${allButtons.length} total buttons`);
                const tableRows = document.querySelectorAll('tbody tr');
                console.log(`📊 Found ${tableRows.length} table rows`);

                // Let's also check if buttons with the link emoji exist
                const linkButtons = document.querySelectorAll('button:contains("🔗")');
                console.log(`🔍 Found ${linkButtons.length} buttons with 🔗`);

                // Check for buttons in the po-container
                const poContainers = document.querySelectorAll('.po-container');
                console.log(`📦 Found ${poContainers.length} po-containers`);
                poContainers.forEach((container, i) => {
                    const buttonsInContainer = container.querySelectorAll('button');
                    console.log(`Container ${i + 1} has ${buttonsInContainer.length} buttons`);
                });
            }

            urlButtons.forEach((btn, index) => {
                console.log(`🔗 Setting up button ${index + 1}:`, {
                    element: btn,
                    id: btn.getAttribute('data-id'),
                    po: btn.getAttribute('data-po'),
                    url: btn.getAttribute('data-url'),
                    classes: btn.className
                });

                btn.addEventListener('click', function (event) {
                    event.preventDefault();
                    event.stopPropagation();

                    console.log('�️ URL button clicked!');
                    console.log('Button attributes:', {
                        id: this.getAttribute('data-id'),
                        po: this.getAttribute('data-po'),
                        url: this.getAttribute('data-url')
                    });

                    try {
                        currentUrlData = {
                            id: this.getAttribute('data-id'),
                            poNumber: this.getAttribute('data-po'),
                            url: this.getAttribute('data-url') || ''
                        };
                        console.log('📝 Opening URL modal with data:', currentUrlData);
                        openUrlModal();
                    } catch (error) {
                        console.error('❌ Error in URL button click handler:', error);
                    }
                });
            });

            console.log('✅ URL button initialization complete');
        }

        // Test function to verify URL button functionality
        function testUrlButtons() {
            console.log('🧪 Testing URL button functionality...');
            const urlButtons = document.querySelectorAll('.url-btn');
            console.log(`Found ${urlButtons.length} URL buttons for testing`);

            urlButtons.forEach((btn, index) => {
                console.log(`Button ${index + 1}:`, {
                    hasClickListener: btn.onclick !== null,
                    hasEventListeners: getEventListeners ? getEventListeners(btn) : 'DevTools required',
                    attributes: {
                        id: btn.getAttribute('data-id'),
                        po: btn.getAttribute('data-po'),
                        url: btn.getAttribute('data-url')
                    },
                    isVisible: btn.offsetParent !== null,
                    className: btn.className
                });
            });

            // Test clicking the first button programmatically
            if (urlButtons.length > 0) {
                console.log('🖱️ Testing programmatic click on first URL button...');
                const firstButton = urlButtons[0];
                console.log('About to trigger click event on:', firstButton);
                firstButton.click();
            }
        }

        function openUrlModal() {
            console.log('🎯 Opening URL modal...');
            const modal = document.getElementById('urlModal');
            const title = document.getElementById('urlModalTitle');
            const input = document.getElementById('urlInput');
            const removeBtn = document.getElementById('urlRemoveBtn');

            if (!modal) {
                console.error('❌ URL modal not found!');
                return;
            }

            title.textContent = `${currentUrlData.url ? 'Edit' : 'Add'} URL for PO ${currentUrlData.poNumber}`;
            input.value = currentUrlData.url;

            if (currentUrlData.url) {
                removeBtn.style.display = 'inline-block';
            } else {
                removeBtn.style.display = 'none';
            }

            modal.style.display = 'block';
            console.log('✅ Modal display set to block');
            setTimeout(() => input.focus(), 100);
        }

        function closeUrlModal() {
            document.getElementById('urlModal').style.display = 'none';
            document.getElementById('urlInput').value = '';
            currentUrlData = { id: '', poNumber: '', url: '' };
        }

        async function saveUrl() {
            const input = document.getElementById('urlInput');
            const saveBtn = document.getElementById('urlSaveBtn');
            const url = input.value.trim();

            // Basic URL validation
            if (url && !isValidUrl(url)) {
                alert('Please enter a valid URL (e.g., https://example.com)');
                return;
            }

            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const response = await fetch(`/purchase-orders/${currentUrlData.id}/url`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url })
                });

                const result = await response.json();

                if (response.ok) {
                    closeUrlModal();
                    // Refresh the page to update the UI
                    setTimeout(() => window.location.reload(), 300);
                } else {
                    alert(result.error || 'Error saving URL');
                }
            } catch (error) {
                console.error('Error saving URL:', error);
                alert('Error saving URL');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save';
            }
        }

        async function removeUrl() {
            if (!confirm(`Remove URL for PO ${currentUrlData.poNumber}?`)) {
                return;
            }

            const removeBtn = document.getElementById('urlRemoveBtn');
            removeBtn.disabled = true;
            removeBtn.textContent = 'Removing...';

            try {
                const response = await fetch(`/purchase-orders/${currentUrlData.id}/url`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url: '' })
                });

                const result = await response.json();

                if (response.ok) {
                    closeUrlModal();
                    // Refresh the page to update the UI
                    setTimeout(() => window.location.reload(), 300);
                } else {
                    alert(result.error || 'Error removing URL');
                }
            } catch (error) {
                console.error('Error removing URL:', error);
                alert('Error removing URL');
            } finally {
                removeBtn.disabled = false;
                removeBtn.textContent = 'Remove URL';
            }
        }

        function isValidUrl(string) {
            try {
                new URL(string);
                return true;
            } catch (_) {
                return false;
            }
        }

        // Function to initialize URL input event listeners
        function initUrlInputListeners() {
            const urlInput = document.getElementById('urlInput');
            if (urlInput) {
                urlInput.addEventListener('keypress', function (e) {
                    if (e.key === 'Enter') {
                        saveUrl();
                    }
                });
                console.log('✅ URL input listeners initialized');
            } else {
                console.warn('⚠️ URL input element not found');
            }
        }

        // Close modal when clicking outside
        window.addEventListener('click', function (event) {
            const urlModal = document.getElementById('urlModal');
            const notesHistoryModal = document.getElementById('notesHistoryModal');
            if (event.target === urlModal) {
                closeUrlModal();
            }
            if (event.target === notesHistoryModal) {
                closeNotesHistoryModal();
            }
        });

        // Function to initialize notes history button listeners
        function initNotesHistoryButtons() {
            const notesHistoryButtons = document.querySelectorAll('.notes-history-btn');
            console.log(`🔧 Initializing ${notesHistoryButtons.length} notes history buttons`);

            notesHistoryButtons.forEach(btn => {
                btn.addEventListener('click', function () {
                    console.log('📋 Notes history button clicked for PO:', this.dataset.po);
                    const poId = this.dataset.id;
                    const poNumber = this.dataset.po;
                    openNotesHistoryModal(poId, poNumber);
                });
            });

            console.log('✅ Notes history buttons initialized');
        }

        async function openNotesHistoryModal(poId, poNumber) {
            const modal = document.getElementById('notesHistoryModal');
            const title = document.getElementById('notesHistoryTitle');
            const content = document.getElementById('notesHistoryContent');

            title.textContent = `Notes History - PO ${poNumber}`;
            content.innerHTML = '<div style="text-align: center; padding: 20px;">Loading...</div>';
            modal.style.display = 'block';

            try {
                const response = await fetch(`/purchase-orders/${poId}/notes-history`);
                const notes = await response.json();

                if (notes.length === 0) {
                    content.innerHTML = '<div class="no-notes">No notes found for this PO</div>';
                } else {
                    content.innerHTML = notes.map(note => `
                        <div class="note-item">
                            <div class="note-header">
                                <span class="note-date">${new Date(note.createdAt).toLocaleString()}</span>
                                <button class="note-delete-btn" onclick="deleteNote('${note._id}', '${poId}', '${poNumber}')">Delete</button>
                            </div>
                            <div class="note-content">${escapeHtml(note.content)}</div>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error loading notes history:', error);
                content.innerHTML = '<div class="no-notes">Error loading notes history</div>';
            }
        }

        function closeNotesHistoryModal() {
            document.getElementById('notesHistoryModal').style.display = 'none';
        }

        async function deleteNote(noteId, poId, poNumber) {
            if (!confirm('Are you sure you want to delete this note?')) {
                return;
            }

            try {
                const response = await fetch(`/purchase-orders/notes/${noteId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (response.ok) {
                    // Refresh the notes history
                    openNotesHistoryModal(poId, poNumber);
                    // Refresh the page to update the main table
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    alert(result.error || 'Error deleting note');
                }
            } catch (error) {
                console.error('Error deleting note:', error);
                alert('Error deleting note');
            }
        }

        // Global variable to store line item status options
        let globalLineItemStatusOptions = [];

        // Function to load line item status options for dropdowns
        async function loadGlobalLineItemStatusOptions() {
            try {
                const response = await fetch('/purchase-orders/line-items/status-options');
                globalLineItemStatusOptions = await response.json();
            } catch (error) {
                console.error('Error loading line item status options:', error);
                globalLineItemStatusOptions = ['', 'In Stock', 'Backordered', 'Find Different Vendor', 'Substitute Product', 'Discontinued', 'Delivery Delay', 'On Order', 'Cancelled', 'Special Order'];
            }
        }

        // Function to generate status dropdown options
        function generateStatusOptions(currentStatus) {
            return globalLineItemStatusOptions.map(status =>
                `<option value="${status}" ${currentStatus === status ? 'selected' : ''}>${status || 'Select Status'}</option>`
            ).join('');
        }

        // Function to generate carrier dropdown options
        function generateCarrierOptions(currentCarrier) {
            // Set FedEx as default if no carrier is selected
            const selectedCarrier = currentCarrier || 'FedEx';

            return currentCarrierOptions.map(carrier =>
                `<option value="${carrier}" ${selectedCarrier === carrier ? 'selected' : ''}>${carrier}</option>`
            ).join('');
        }

        async function loadLineItems(index, poId) {
            const container = document.getElementById(`line-items-container-${index}`);
            const statusElement = document.getElementById(`line-items-status-${index}`);
            const toggleButton = document.getElementById(`show-received-${index}`);

            try {
                container.innerHTML = '<div class="loading-line-items">Loading line items...</div>';

                const response = await fetch(`/purchase-orders/${poId}/line-items`);
                const lineItems = await response.json();

                if (lineItems.length === 0) {
                    container.innerHTML = '<div class="no-line-items">No line items found for this purchase order.</div>';
                    statusElement.textContent = '';
                    toggleButton.style.display = 'none';
                } else {
                    const receivedCount = lineItems.filter(item => item.received).length;
                    const totalCount = lineItems.length;
                    const allReceived = receivedCount === totalCount;

                    // Generate the HTML for line items
                    const lineItemsHtml = lineItems.map(item => `
                        <div class="line-item ${item.received ? 'received hidden' : ''}" data-item-id="${item._id}">
                            <div class="line-item-header">
                                <div class="line-item-date">${item.date ? new Date(item.date).toLocaleDateString() : 'No date'}</div>
                                <div class="line-item-status">
                                    <button class="received-toggle ${item.received ? 'received' : ''}" 
                                            onclick="toggleReceived('${item._id}', ${!item.received}, ${index}, '${poId}')">
                                        ${item.received ? '✅ Received' : '📦 Mark Received'}
                                    </button>
                                </div>
                            </div>
                            <div class="line-item-memo">${escapeHtml(item.memo)}</div>
                            <div class="line-item-tracking ${!item.trackingNumber ? 'no-tracking' : ''}">
                                <div class="line-item-tracking-header">
                                    <span class="line-item-tracking-number">
                                        ${item.trackingNumber ? `📦 ${item.trackingNumber}` : '📦 No tracking assigned'}
                                    </span>
                                    <button class="line-item-tracking-update-btn" 
                                            onclick="updateLineItemTracking('${item._id}', ${index}, '${poId}')"
                                            data-item-id="${item._id}"
                                            ${!item.trackingNumber ? 'disabled' : ''}>
                                        🔄 Update
                                    </button>
                                </div>
                                ${item.trackingNumber ? `
                                    <div class="line-item-tracking-status">
                                        <span class="status-badge ${getTrackingStatusClass(item.trackingStatus)}">
                                            ${item.trackingStatus || 'Pending'}
                                        </span>
                                        ${item.trackingStatusDescription ? item.trackingStatusDescription : ''}
                                    </div>
                                    ${item.trackingLastUpdate ?
                                `<div class="line-item-tracking-info">
                                            Last updated: ${new Date(item.trackingLastUpdate).toLocaleDateString()}
                                            ${item.trackingLocation ? ` • ${item.trackingLocation}` : ''}
                                        </div>` : ''}
                                ` : `
                                    <div class="line-item-tracking-status">
                                        <span class="status-badge status-pending">No Tracking</span>
                                        Enter tracking number below to enable tracking updates
                                    </div>
                                `}
                            </div>
                            <div class="line-item-details">
                                <div class="line-item-sku">
                                    <label>SKU:</label>
                                    <input type="text" class="sku-input" placeholder="Enter SKU"
                                           value="${escapeHtml(item.sku || '')}"
                                           onchange="updateSKU('${item._id}', this.value, ${index}, '${poId}')">
                                </div>
                                <div class="line-item-status-dropdown">
                                    <label>Item Status:</label>
                                    <select class="item-status-select" 
                                            onchange="updateItemStatus('${item._id}', this.value, ${index}, '${poId}')">
                                        ${generateStatusOptions(item.itemStatus)}
                                    </select>
                                </div>
                                <div class="line-item-tracking-input">
                                    <label>Tracking Number:</label>
                                    <input type="text" class="tracking-input" placeholder="Enter tracking number"
                                           value="${escapeHtml(item.trackingNumber || '')}"
                                           onchange="updateLineItemTrackingNumber('${item._id}', this.value, ${index}, '${poId}')">
                                </div>
                                <div class="line-item-tracking-carrier">
                                    <label>Carrier:</label>
                                    <select class="carrier-select" 
                                            onchange="updateLineItemTrackingCarrier('${item._id}', this.value, ${index}, '${poId}')">
                                        ${generateCarrierOptions(item.trackingCarrier)}
                                    </select>
                                </div>
                            </div>
                            ${item.notes ? `<div class="line-item-notes">
                                <strong>Notes:</strong> ${escapeHtml(item.notes)}
                            </div>` : ''}
                            <div class="line-item-footer">
                                <div class="line-item-eta">
                                    <label>ETA:</label>
                                    <input type="date" class="eta-input" 
                                           value="${item.eta ? new Date(item.eta).toISOString().split('T')[0] : ''}"
                                           onchange="updateETA('${item._id}', this.value, ${index}, '${poId}')">
                                </div>
                                <div class="line-item-notes-input">
                                    <label>Notes:</label>
                                    <input type="text" class="notes-input" placeholder="Add notes..."
                                           value="${escapeHtml(item.notes || '')}"
                                           onchange="updateItemNotes('${item._id}', this.value, ${index}, '${poId}')">
                                </div>
                                ${item.received && item.receivedDate ?
                            `<div class="received-date">Received: ${new Date(item.receivedDate).toLocaleDateString()}</div>` : ''}
                            </div>
                        </div>
                    `).join('');

                    // Show completion message if all items received and none visible
                    if (allReceived) {
                        container.innerHTML = `
                            <div class="all-received-message">
                                🎉 All ${totalCount} items have been received! 
                                <br><small>Use "Show Received" to view completed items.</small>
                            </div>
                        ` + lineItemsHtml;
                        statusElement.textContent = `(${receivedCount}/${totalCount} received)`;
                    } else {
                        container.innerHTML = lineItemsHtml;
                        statusElement.textContent = `(${receivedCount}/${totalCount} received)`;
                    }

                    // Show toggle button if there are received items
                    if (receivedCount > 0) {
                        toggleButton.style.display = 'inline-block';
                        toggleButton.textContent = '👁️ Show Received';
                        toggleButton.classList.remove('active');
                    } else {
                        toggleButton.style.display = 'none';
                    }
                }
            } catch (error) {
                console.error('Error loading line items:', error);
                container.innerHTML = '<div class="no-line-items">Error loading line items.</div>';
                statusElement.textContent = '';
                toggleButton.style.display = 'none';
            }
        }

        function toggleReceivedItems(index) {
            const container = document.getElementById(`line-items-container-${index}`);
            const toggleButton = document.getElementById(`show-received-${index}`);
            const receivedItems = container.querySelectorAll('.line-item.received');

            if (toggleButton.classList.contains('active')) {
                // Hide received items
                receivedItems.forEach(item => item.classList.add('hidden'));
                toggleButton.textContent = '👁️ Show Received';
                toggleButton.classList.remove('active');
            } else {
                // Show received items
                receivedItems.forEach(item => item.classList.remove('hidden'));
                toggleButton.textContent = '🙈 Hide Received';
                toggleButton.classList.add('active');
            }
        }

        async function toggleReceived(lineItemId, received, index, poId) {
            try {
                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/received`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ received })
                });

                if (response.ok) {
                    // Reload line items to show updated status
                    await loadLineItems(index, poId);
                } else {
                    const error = await response.json();
                    alert('Error updating received status: ' + error.error);
                }
            } catch (error) {
                console.error('Error toggling received status:', error);
                alert('Error updating received status');
            }
        }

        async function updateETA(lineItemId, eta, index, poId) {
            try {
                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/eta`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ eta: eta || null })
                });

                if (response.ok) {
                    console.log('ETA updated successfully');
                } else {
                    const error = await response.json();
                    alert('Error updating ETA: ' + error.error);
                    // Reload line items to revert the input
                    await loadLineItems(index, poId);
                }
            } catch (error) {
                console.error('Error updating ETA:', error);
                alert('Error updating ETA');
                // Reload line items to revert the input
                await loadLineItems(index, poId);
            }
        }

        async function updateSKU(lineItemId, sku, index, poId) {
            try {
                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/sku`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ sku: sku || '' })
                });

                if (response.ok) {
                    console.log('SKU updated successfully');
                } else {
                    const error = await response.json();
                    alert('Error updating SKU: ' + error.error);
                    await loadLineItems(index, poId);
                }
            } catch (error) {
                console.error('Error updating SKU:', error);
                alert('Error updating SKU');
                await loadLineItems(index, poId);
            }
        }

        async function updateItemStatus(lineItemId, itemStatus, index, poId) {
            try {
                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/item-status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ itemStatus: itemStatus || '' })
                });

                if (response.ok) {
                    console.log('Item status updated successfully');
                } else {
                    const error = await response.json();
                    alert('Error updating item status: ' + error.error);
                    await loadLineItems(index, poId);
                }
            } catch (error) {
                console.error('Error updating item status:', error);
                alert('Error updating item status');
                await loadLineItems(index, poId);
            }
        }

        async function updateItemNotes(lineItemId, notes, index, poId) {
            try {
                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/notes`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ notes: notes || '' })
                });

                if (response.ok) {
                    console.log('Item notes updated successfully');
                    // Refresh the line items to show the updated notes
                    await loadLineItems(index, poId);
                } else {
                    const error = await response.json();
                    alert('Error updating item notes: ' + error.error);
                    await loadLineItems(index, poId);
                }
            } catch (error) {
                console.error('Error updating item notes:', error);
                alert('Error updating item notes');
                await loadLineItems(index, poId);
            }
        }

        // Function to get CSS class for tracking status
        function getTrackingStatusClass(status) {
            if (!status) return 'status-pending';

            const normalizedStatus = status.toLowerCase();
            if (normalizedStatus.includes('delivered') || normalizedStatus.includes('delivered to recipient')) {
                return 'status-delivered';
            } else if (normalizedStatus.includes('transit') || normalizedStatus.includes('shipping') || normalizedStatus.includes('out for delivery')) {
                return 'status-transit';
            } else if (normalizedStatus.includes('alert') || normalizedStatus.includes('exception') || normalizedStatus.includes('failed')) {
                return 'status-alert';
            } else {
                return 'status-pending';
            }
        }

        // Function to update tracking for a single line item
        async function updateLineItemTracking(lineItemId, index, poId) {
            const button = document.querySelector(`[data-item-id="${lineItemId}"]`);

            // Check if tracking number exists before attempting update
            const lineItemElement = button?.closest('.line-item');
            const trackingInput = lineItemElement?.querySelector('.tracking-input');
            const trackingNumber = trackingInput?.value?.trim();

            if (!trackingNumber) {
                alert('Please enter a tracking number first');
                return;
            }

            if (button) {
                button.disabled = true;
                button.textContent = 'Updating...';
            }

            try {
                console.log(`🔄 Updating tracking for line item: ${lineItemId} with tracking: ${trackingNumber}`);

                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/tracking/update`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        console.log('✅ Line item tracking updated successfully');
                        // Refresh the line items to show updated tracking info
                        await loadLineItems(index, poId);
                    } else {
                        alert('No tracking information found for this item. Make sure the tracking number and carrier are correct.');
                        if (button) {
                            button.disabled = false;
                            button.textContent = '🔄 Update';
                        }
                    }
                } else {
                    const error = await response.json();
                    alert('Error updating tracking: ' + error.error);
                    if (button) {
                        button.disabled = false;
                        button.textContent = '🔄 Update';
                    }
                }
            } catch (error) {
                console.error('Error updating line item tracking:', error);
                alert('Error updating tracking information');
                if (button) {
                    button.disabled = false;
                    button.textContent = '🔄 Update';
                }
            }
        }

        // Function to update tracking number for a line item
        async function updateLineItemTrackingNumber(lineItemId, trackingNumber, index, poId) {
            try {
                // Get the current carrier, default to FedEx if empty
                const lineItemElement = document.querySelector(`[data-item-id="${lineItemId}"]`)?.closest('.line-item');
                const carrierSelect = lineItemElement?.querySelector('.carrier-select');
                let currentCarrier = carrierSelect ? carrierSelect.value : 'FedEx';

                // If no carrier selected, default to FedEx
                if (!currentCarrier || currentCarrier === '') {
                    currentCarrier = 'FedEx';
                }

                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/tracking`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        trackingNumber: trackingNumber || '',
                        carrier: currentCarrier
                    })
                });

                if (response.ok) {
                    console.log('Line item tracking number updated successfully');
                    // Refresh the line items to show updated tracking info
                    await loadLineItems(index, poId);
                } else {
                    const error = await response.json();
                    alert('Error updating tracking number: ' + error.error);
                    await loadLineItems(index, poId);
                }
            } catch (error) {
                console.error('Error updating line item tracking number:', error);
                alert('Error updating tracking number');
                await loadLineItems(index, poId);
            }
        }

        // Function to update tracking carrier for a line item
        async function updateLineItemTrackingCarrier(lineItemId, carrier, index, poId) {
            try {
                // Get the current tracking number first
                const lineItems = document.querySelector(`[data-item-id="${lineItemId}"]`)?.closest('.line-item');
                const trackingInput = lineItems?.querySelector('.tracking-input');
                const currentTrackingNumber = trackingInput ? trackingInput.value : '';

                const response = await fetch(`/purchase-orders/line-items/${lineItemId}/tracking`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        trackingNumber: currentTrackingNumber,
                        carrier: carrier || ''
                    })
                });

                if (response.ok) {
                    console.log('Line item tracking carrier updated successfully');
                } else {
                    const error = await response.json();
                    alert('Error updating tracking carrier: ' + error.error);
                    await loadLineItems(index, poId);
                }
            } catch (error) {
                console.error('Error updating line item tracking carrier:', error);
                alert('Error updating tracking carrier');
                await loadLineItems(index, poId);
            }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Filtering functionality
        function applyFilters() {
            const searchTerm = document.getElementById('searchFilter').value.toLowerCase();
            const nsStatusFilter = document.getElementById('nsStatusFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const notesFilter = document.getElementById('notesFilter').value;
            const showNotMyConcernCheckbox = document.getElementById('showNotMyConcern');
            const showNotMyConcern = showNotMyConcernCheckbox ? showNotMyConcernCheckbox.checked : false;
            const showPendingBillCheckbox = document.getElementById('showPendingBill');
            const showPendingBill = showPendingBillCheckbox ? showPendingBillCheckbox.checked : false;

            const rows = document.querySelectorAll('#purchaseOrdersTable tbody tr[data-po]'); // Only main rows
            let visibleCount = 0;
            let hiddenNotMyConcernCount = 0;
            let hiddenPendingBillCount = 0;

            rows.forEach(row => {
                const poData = JSON.parse(row.dataset.po);
                const vendor = poData.vendor.toLowerCase();
                const poNumber = poData.poNumber.toLowerCase();
                const nsStatus = poData.nsStatus || '';
                const status = poData.status || '';
                const notes = poData.notes || '';
                const index = row.dataset.index;

                // Search filter
                const matchesSearch = vendor.includes(searchTerm) || poNumber.includes(searchTerm);

                // NS Status filter
                const matchesNSStatus = nsStatusFilter === 'all' || nsStatus === nsStatusFilter;

                // Status filter
                const matchesStatus = statusFilter === 'all' || status === statusFilter;

                // "Not my concern" filter - hide by default unless checkbox is checked
                const isNotMyConcern = status === 'Not my concern';
                const shouldShowNotMyConcern = !isNotMyConcern || showNotMyConcern;

                // "Pending Bill" NS Status filter - hide by default unless checkbox is checked
                const isPendingBill = nsStatus === 'Pending Bill';
                const shouldShowPendingBill = !isPendingBill || showPendingBill;

                if (isNotMyConcern && !showNotMyConcern) {
                    hiddenNotMyConcernCount++;
                }

                if (isPendingBill && !showPendingBill) {
                    hiddenPendingBillCount++;
                }

                // Notes filter
                let matchesNotes = true;
                if (notesFilter === 'with-notes') {
                    matchesNotes = notes.trim().length > 0;
                } else if (notesFilter === 'without-notes') {
                    matchesNotes = notes.trim().length === 0;
                }

                if (matchesSearch && matchesNSStatus && matchesStatus && matchesNotes && shouldShowNotMyConcern && shouldShowPendingBill) {
                    row.classList.remove('hidden');
                    // Also show the corresponding notes row if it's expanded
                    const notesRow = document.getElementById(`notes-row-${index}`);
                    if (notesRow && notesRow.classList.contains('expanded')) {
                        notesRow.classList.remove('hidden');
                    }
                    visibleCount++;
                } else {
                    row.classList.add('hidden');
                    // Also hide the corresponding notes row
                    const notesRow = document.getElementById(`notes-row-${index}`);
                    if (notesRow) {
                        notesRow.classList.add('hidden');
                    }
                }
            });

            console.log(`🔍 Filter results: ${visibleCount} visible, ${hiddenNotMyConcernCount} "Not my concern" hidden, ${hiddenPendingBillCount} "Pending Bill" hidden`);

            // Update results info
            const totalCount = rows.length;
            const resultsInfo = document.getElementById('resultsInfo');
            const noResults = document.getElementById('noResults');

            if (visibleCount === 0) {
                resultsInfo.style.display = 'none';
                noResults.style.display = 'block';
                document.getElementById('purchaseOrdersTable').style.display = 'none';
            } else {
                resultsInfo.style.display = 'block';
                noResults.style.display = 'none';
                document.getElementById('purchaseOrdersTable').style.display = 'table';

                if (visibleCount === totalCount) {
                    resultsInfo.textContent = `Showing all ${totalCount} purchase orders`;
                } else {
                    resultsInfo.textContent = `Showing ${visibleCount} of ${totalCount} purchase orders`;
                }
            }

            updateStats();
        }

        // Update statistics based on visible rows
        function updateStats() {
            const visibleRows = document.querySelectorAll('#purchaseOrdersTable tbody tr[data-po]:not(.hidden)');
            let notesCount = 0;

            visibleRows.forEach(row => {
                const poData = JSON.parse(row.dataset.po);
                if (poData.notes && poData.notes.trim()) {
                    notesCount++;
                }
            });

            document.getElementById('visibleCount').textContent = visibleRows.length;
            document.getElementById('notesCount').textContent = notesCount;
        }

        // Sorting functionality
        function sortTable(column) {
            const tbody = document.querySelector('#purchaseOrdersTable tbody');
            const mainRows = Array.from(tbody.querySelectorAll('tr[data-po]'));

            // Determine sort direction
            let direction = 'asc';
            if (currentSort.column === column && currentSort.direction === 'asc') {
                direction = 'desc';
            }

            // Update UI
            document.querySelectorAll('th').forEach(th => {
                th.classList.remove('sort-asc', 'sort-desc');
            });
            const headerElement = document.querySelector(`th[data-column="${column}"]`);
            headerElement.classList.add(direction === 'asc' ? 'sort-asc' : 'sort-desc');

            // Sort main rows with their data
            mainRows.sort((a, b) => {
                const aData = JSON.parse(a.dataset.po);
                const bData = JSON.parse(b.dataset.po);

                let aValue, bValue;

                switch (column) {
                    case 'date':
                        aValue = new Date(aData.date);
                        bValue = new Date(bData.date);
                        break;
                    case 'vendor':
                        aValue = aData.vendor.toLowerCase();
                        bValue = bData.vendor.toLowerCase();
                        break;
                    case 'poNumber':
                        aValue = aData.poNumber.toLowerCase();
                        bValue = bData.poNumber.toLowerCase();
                        break;
                    case 'lineItemsCount':
                        aValue = aData.lineItems ? aData.lineItems.length : 0;
                        bValue = bData.lineItems ? bData.lineItems.length : 0;
                        break;
                    case 'nsStatus':
                        aValue = (aData.nsStatus || '').toLowerCase();
                        bValue = (bData.nsStatus || '').toLowerCase();
                        break;
                    case 'status':
                        aValue = (aData.status || '').toLowerCase();
                        bValue = (bData.status || '').toLowerCase();
                        break;
                    case 'shippingTracking':
                        aValue = (aData.shippingTracking || '').toLowerCase();
                        bValue = (bData.shippingTracking || '').toLowerCase();
                        break;
                    case 'nextUpdateDate':
                        aValue = aData.nextUpdateDate ? new Date(aData.nextUpdateDate) : new Date(0);
                        bValue = bData.nextUpdateDate ? new Date(bData.nextUpdateDate) : new Date(0);
                        break;
                    case 'updatedAt':
                        aValue = new Date(aData.updatedAt || 0);
                        bValue = new Date(bData.updatedAt || 0);
                        break;
                }

                if (aValue < bValue) return direction === 'asc' ? -1 : 1;
                if (aValue > bValue) return direction === 'asc' ? 1 : -1;
                return 0;
            });

            // Reappend sorted rows in groups (main row + line items row + notes row)
            mainRows.forEach(mainRow => {
                const index = mainRow.dataset.index;
                const lineItemsRow = document.getElementById(`line-items-row-${index}`);
                const notesRow = document.getElementById(`notes-row-${index}`);

                // Append the main row first
                tbody.appendChild(mainRow);

                // Then append its associated expandable rows
                if (lineItemsRow) {
                    tbody.appendChild(lineItemsRow);
                }
                if (notesRow) {
                    tbody.appendChild(notesRow);
                }
            });

            currentSort = { column, direction };
        }

        // Clear all filters
        function clearAllFilters() {
            document.getElementById('searchFilter').value = '';
            document.getElementById('nsStatusFilter').value = 'all';
            document.getElementById('statusFilter').value = 'all';
            document.getElementById('notesFilter').value = 'all';
            document.getElementById('showNotMyConcern').checked = false;
            document.getElementById('showPendingBill').checked = false;
            applyFilters();
        }

        // Event listeners for filters
        document.getElementById('searchFilter').addEventListener('input', applyFilters);
        document.getElementById('nsStatusFilter').addEventListener('change', applyFilters);
        document.getElementById('statusFilter').addEventListener('change', applyFilters);
        document.getElementById('notesFilter').addEventListener('change', applyFilters);
        document.getElementById('showNotMyConcern').addEventListener('change', applyFilters);
        document.getElementById('showPendingBill').addEventListener('change', applyFilters);

        // Event listeners for sorting
        document.querySelectorAll('th.sortable').forEach(header => {
            header.addEventListener('click', () => {
                sortTable(header.dataset.column);
            });
        });

        // Status Management Functions
        let currentStatusOptions = [];

        function openStatusModal() {
            document.getElementById('statusModal').style.display = 'block';
            loadStatusOptions();
        }

        function closeStatusModal() {
            document.getElementById('statusModal').style.display = 'none';
            document.getElementById('statusInput').value = '';
        }

        // Close modal when clicking outside
        window.onclick = function (event) {
            const statusModal = document.getElementById('statusModal');
            const lineItemStatusModal = document.getElementById('lineItemStatusModal');
            if (event.target === statusModal) {
                closeStatusModal();
            }
            if (event.target === lineItemStatusModal) {
                closeLineItemStatusModal();
            }
        }

        // Load status options from server
        async function loadStatusOptions() {
            try {
                const response = await fetch('/purchase-orders/status-options');
                const statusOptions = await response.json();
                currentStatusOptions = statusOptions;
                renderStatusList();
            } catch (error) {
                console.error('Error loading status options:', error);
                alert('Error loading status options');
            }
        }

        // Render the status options list
        function renderStatusList() {
            const statusList = document.getElementById('statusList');
            statusList.innerHTML = '';

            currentStatusOptions.forEach(option => {
                const statusItem = document.createElement('div');
                statusItem.className = `status-item ${option.isDefault ? 'default' : ''}`;

                statusItem.innerHTML = `
                    <span class="status-item-name">${option.name}</span>
                    <button class="status-delete-btn" onclick="deleteStatusOption('${option._id}')" 
                            ${option.isDefault ? 'disabled title="Cannot delete default status"' : ''}>
                        Delete
                    </button>
                `;

                statusList.appendChild(statusItem);
            });
        }

        // Add new status option
        async function addStatusOption() {
            const input = document.getElementById('statusInput');
            const addBtn = document.getElementById('addStatusBtn');
            const name = input.value.trim();

            if (!name) {
                alert('Please enter a status name');
                return;
            }

            addBtn.disabled = true;
            addBtn.textContent = 'Adding...';

            try {
                const response = await fetch('/purchase-orders/status-options', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name })
                });

                const result = await response.json();

                if (response.ok) {
                    input.value = '';
                    await loadStatusOptions();
                    // Refresh the page to update all dropdowns
                    setTimeout(() => window.location.reload(), 500);
                } else {
                    alert(result.error || 'Error adding status option');
                }
            } catch (error) {
                console.error('Error adding status option:', error);
                alert('Error adding status option');
            } finally {
                addBtn.disabled = false;
                addBtn.textContent = 'Add';
            }
        }

        // Delete status option
        async function deleteStatusOption(id) {
            const option = currentStatusOptions.find(opt => opt._id === id);
            if (!option) return;

            if (!confirm(`Are you sure you want to delete "${option.name}"?`)) {
                return;
            }

            try {
                const response = await fetch(`/purchase-orders/status-options/${id}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (response.ok) {
                    await loadStatusOptions();
                    // Refresh the page to update all dropdowns
                    setTimeout(() => window.location.reload(), 500);
                } else {
                    alert(result.error || 'Error deleting status option');
                }
            } catch (error) {
                console.error('Error deleting status option:', error);
                alert('Error deleting status option');
            }
        }

        // Allow Enter key to add status
        document.getElementById('statusInput').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                addStatusOption();
            }
        });

        // Line Item Status Management Functions
        let currentLineItemStatusOptions = [];

        function openLineItemStatusModal() {
            document.getElementById('lineItemStatusModal').style.display = 'block';
            loadLineItemStatusOptions();
        }

        function closeLineItemStatusModal() {
            document.getElementById('lineItemStatusModal').style.display = 'none';
            document.getElementById('lineItemStatusInput').value = '';
        }

        // Load line item status options from server
        async function loadLineItemStatusOptions() {
            try {
                const response = await fetch('/purchase-orders/line-item-status-options');
                const statusOptions = await response.json();
                currentLineItemStatusOptions = statusOptions;
                renderLineItemStatusList();
            } catch (error) {
                console.error('Error loading line item status options:', error);
                alert('Error loading line item status options');
            }
        }

        // Render the line item status options list
        function renderLineItemStatusList() {
            const statusList = document.getElementById('lineItemStatusList');
            statusList.innerHTML = '';

            currentLineItemStatusOptions.forEach(option => {
                const statusItem = document.createElement('div');
                statusItem.className = `status-item ${option.isDefault ? 'default' : ''}`;

                statusItem.innerHTML = `
                    <span class="status-item-name">${option.name}</span>
                    <button class="status-delete-btn" onclick="deleteLineItemStatusOption('${option._id}')" 
                            ${option.isDefault ? 'disabled title="Cannot delete default status"' : ''}>
                        Delete
                    </button>
                `;

                statusList.appendChild(statusItem);
            });
        }

        // Add new line item status option
        async function addLineItemStatusOption() {
            const input = document.getElementById('lineItemStatusInput');
            const addBtn = document.getElementById('addLineItemStatusBtn');
            const name = input.value.trim();

            if (!name) {
                alert('Please enter a status name');
                return;
            }

            addBtn.disabled = true;
            addBtn.textContent = 'Adding...';

            try {
                const response = await fetch('/purchase-orders/line-item-status-options', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name })
                });

                const result = await response.json();

                if (response.ok) {
                    input.value = '';
                    await loadLineItemStatusOptions();
                    alert('Line item status option added successfully');
                } else {
                    alert(result.error || 'Error adding line item status option');
                }
            } catch (error) {
                console.error('Error adding line item status option:', error);
                alert('Error adding line item status option');
            } finally {
                addBtn.disabled = false;
                addBtn.textContent = 'Add';
            }
        }

        // Delete line item status option
        async function deleteLineItemStatusOption(id) {
            const option = currentLineItemStatusOptions.find(opt => opt._id === id);
            if (!option) return;

            if (!confirm(`Are you sure you want to delete "${option.name}"?`)) {
                return;
            }

            try {
                const response = await fetch(`/purchase-orders/line-item-status-options/${id}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (response.ok) {
                    await loadLineItemStatusOptions();
                    alert('Line item status option deleted successfully');
                } else {
                    alert(result.error || 'Error deleting line item status option');
                }
            } catch (error) {
                console.error('Error deleting line item status option:', error);
                alert('Error deleting line item status option');
            }
        }

        // Allow Enter key to add line item status
        document.getElementById('lineItemStatusInput').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                addLineItemStatusOption();
            }
        });

        // Carrier Management Functions
        let currentCarrierOptions = [
            'FedEx', 'UPS', 'USPS', 'DHL', 'Amazon', 'OnTrac', 'LaserShip', 'Canada Post', 'Other'
        ];

        function openCarrierModal() {
            document.getElementById('carrierModal').style.display = 'block';
            loadCarrierOptions();
        }

        function closeCarrierModal() {
            document.getElementById('carrierModal').style.display = 'none';
            document.getElementById('carrierInput').value = '';
        }

        // Load carrier options (for now using local array, could be expanded to use backend)
        async function loadCarrierOptions() {
            renderCarrierList();
        }

        // Render the carrier options list
        function renderCarrierList() {
            const carrierList = document.getElementById('carrierList');
            carrierList.innerHTML = '';

            currentCarrierOptions.forEach((carrier, index) => {
                const carrierItem = document.createElement('div');
                const isDefault = carrier === 'FedEx';
                carrierItem.className = `status-item ${isDefault ? 'default' : ''}`;

                carrierItem.innerHTML = `
                    <span class="status-item-name">${carrier} ${isDefault ? '(Default)' : ''}</span>
                    <button class="status-delete-btn" onclick="deleteCarrierOption('${carrier}')" 
                            ${isDefault ? 'disabled title="Cannot delete default carrier"' : ''}>
                        Delete
                    </button>
                `;

                carrierList.appendChild(carrierItem);
            });
        }

        // Add new carrier option
        function addCarrierOption() {
            const input = document.getElementById('carrierInput');
            const addBtn = document.getElementById('addCarrierBtn');
            const name = input.value.trim();

            if (!name) {
                alert('Please enter a carrier name');
                return;
            }

            if (currentCarrierOptions.includes(name)) {
                alert('Carrier already exists');
                return;
            }

            currentCarrierOptions.push(name);
            input.value = '';
            renderCarrierList();

            // Update the carrier options in any open line item forms
            updateAllCarrierDropdowns();
        }

        // Delete carrier option
        function deleteCarrierOption(carrier) {
            if (carrier === 'FedEx') {
                alert('Cannot delete default carrier');
                return;
            }

            if (!confirm(`Are you sure you want to delete "${carrier}"?`)) {
                return;
            }

            const index = currentCarrierOptions.indexOf(carrier);
            if (index > -1) {
                currentCarrierOptions.splice(index, 1);
                renderCarrierList();

                // Update the carrier options in any open line item forms
                updateAllCarrierDropdowns();
            }
        }

        // Update all carrier dropdowns on the page
        function updateAllCarrierDropdowns() {
            const carrierSelects = document.querySelectorAll('.carrier-select');
            carrierSelects.forEach(select => {
                const currentValue = select.value;
                select.innerHTML = currentCarrierOptions.map(carrier =>
                    `<option value="${carrier}" ${currentValue === carrier ? 'selected' : ''}>${carrier}</option>`
                ).join('');
            });
        }

        // Allow Enter key to add carrier
        document.addEventListener('DOMContentLoaded', function () {
            const carrierInput = document.getElementById('carrierInput');
            if (carrierInput) {
                carrierInput.addEventListener('keypress', function (e) {
                    if (e.key === 'Enter') {
                        addCarrierOption();
                    }
                });
            }
        });

        // Pre-Purchase Order Functions
        function addPrePurchaseOrder() {
            document.getElementById('prePurchaseOrderModalTitle').textContent = 'Add Pre-Purchase Order';
            document.getElementById('prePOId').value = '';
            document.getElementById('prePurchaseOrderForm').reset();
            openModal('prePurchaseOrderModal');
        }

        function editPrePurchaseOrder(id) {
            // Find the pre-purchase order data from the DOM
            const card = document.querySelector(`[data-id="${id}"]`);
            if (!card) {
                alert('Pre-purchase order not found');
                return;
            }

            // Get data from the card
            const titleElement = card.querySelector('.pre-po-title strong');
            const vendor = titleElement ? titleElement.textContent : '';
            const itemsElement = card.querySelector('.pre-po-items');
            const items = itemsElement ? itemsElement.textContent : '';
            const priority = card.dataset.priority || 'medium';
            const receiveDate = card.dataset.receiveDate || '';
            const status = card.dataset.status || 'Planning';

            document.getElementById('prePurchaseOrderModalTitle').textContent = 'Edit Pre-Purchase Order';
            document.getElementById('prePOId').value = id;
            document.getElementById('prePOVendor').value = vendor;
            document.getElementById('prePOItems').value = items;
            document.getElementById('prePOStatus').value = status;
            document.getElementById('prePOPriority').value = priority.charAt(0).toUpperCase() + priority.slice(1);

            if (receiveDate) {
                const date = new Date(receiveDate);
                if (!isNaN(date.getTime())) {
                    document.getElementById('prePOReceiveDate').value = date.toISOString().split('T')[0];
                }
            }

            openModal('prePurchaseOrderModal');
        }

        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Handle form submission
        document.getElementById('prePurchaseOrderForm').addEventListener('submit', function (e) {
            e.preventDefault();

            console.log('🔍 Form submitted!');

            const formData = new FormData(this);
            const data = {};
            for (let [key, value] of formData.entries()) {
                if (value) data[key] = value;
            }

            console.log('📝 Form data:', data);

            const isEdit = data.id;
            const url = isEdit ? `/purchase-orders/pre-purchase-orders/${data.id}` : '/purchase-orders/pre-purchase-orders';
            const method = isEdit ? 'PUT' : 'POST';

            console.log(`🔗 Making ${method} request to ${url}`);

            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    console.log('📡 Response received:', response.status);
                    return response.json();
                })
                .then(result => {
                    console.log('✅ Response data:', result);
                    if (result.success) {
                        alert('Pre-purchase order saved successfully!');
                        closeModal('prePurchaseOrderModal');
                        location.reload();
                    } else {
                        alert('Error saving pre-purchase order: ' + result.message);
                    }
                })
                .catch(error => {
                    console.error('❌ Error:', error);
                    alert('Error saving pre-purchase order: ' + error.message);
                });
        });

        // Close modal when clicking outside
        window.onclick = function (event) {
            const modal = document.getElementById('prePurchaseOrderModal');
            if (event.target === modal) {
                closeModal('prePurchaseOrderModal');
            }
        }

        function convertPrePurchaseOrder(id) {
            if (confirm('Are you sure you want to convert this pre-purchase order to an actual purchase order?')) {
                fetch(`/purchase-orders/pre-purchase-orders/${id}/convert`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Pre-purchase order converted successfully!');
                            location.reload();
                        } else {
                            alert('Error converting pre-purchase order: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error converting pre-purchase order');
                    });
            }
        }

        function deletePrePurchaseOrder(id) {
            if (confirm('Are you sure you want to delete this pre-purchase order? This action cannot be undone.')) {
                fetch(`/purchase-orders/pre-purchase-orders/${id}`, {
                    method: 'DELETE'
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Pre-purchase order deleted successfully!');
                            location.reload();
                        } else {
                            alert('Error deleting pre-purchase order: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error deleting pre-purchase order');
                    });
            }
        }

        // Initialize filters on page load
        console.log('DOM initialization starting, readyState:', document.readyState);
        if (document.readyState === 'loading') {
            console.log('DOM is loading, adding event listener');
            document.addEventListener('DOMContentLoaded', function () {
                console.log('DOMContentLoaded event fired');
                // Load line item status options for dropdowns
                loadGlobalLineItemStatusOptions();
                // Initialize URL buttons - now using event delegation instead
                // console.log('About to call initUrlButtons');
                // initUrlButtons();
                // console.log('initUrlButtons called');
                // Initialize URL input listeners
                initUrlInputListeners();
                // Initialize notes history buttons
                initNotesHistoryButtons();
                // Test URL buttons functionality - now using event delegation
                // setTimeout(() => testUrlButtons(), 1000);
                // Apply filters when DOM is loaded
                setTimeout(() => applyFilters(), 50);
            });
        } else {
            console.log('DOM already loaded, initializing immediately');
            // DOM is already loaded
            loadGlobalLineItemStatusOptions();
            // Initialize URL buttons - now using event delegation instead
            // console.log('About to call initUrlButtons (immediate)');
            // initUrlButtons();
            // console.log('initUrlButtons called (immediate)');
            // Initialize URL input listeners
            initUrlInputListeners();
            // Initialize notes history buttons
            initNotesHistoryButtons();
            setTimeout(() => applyFilters(), 50);
        }
    </script>

    <!-- Pre-Purchase Order Modals -->
    <div id="prePurchaseOrderModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close" onclick="closeModal('prePurchaseOrderModal')">&times;</span>
            <h3 id="prePurchaseOrderModalTitle">Add Pre-Purchase Order</h3>
            <form id="prePurchaseOrderForm">
                <input type="hidden" id="prePOId" name="id">

                <div class="form-group">
                    <label for="prePOVendor">Vendor: <span style="color: red;">*</span></label>
                    <input type="text" id="prePOVendor" name="vendor" required>
                </div>

                <div class="form-group">
                    <label for="prePOItems">Items:</label>
                    <textarea id="prePOItems" name="items" rows="4"
                        placeholder="Paste item information here (will be used for NetSuite CSV import)"></textarea>
                </div>

                <div class="form-group">
                    <label for="prePOStatus">Status:</label>
                    <select id="prePOStatus" name="status">
                        <option value="Planning" selected>Planning</option>
                        <% statusOptions.forEach(option=> { %>
                            <% if (option !=='Planning' ) { %>
                                <option value="<%= option %>">
                                    <%= option %>
                                </option>
                                <% } %>
                                    <% }); %>
                    </select>
                </div>

                <div class="form-group">
                    <label for="prePOPriority">Priority:</label>
                    <select id="prePOPriority" name="priority">
                        <option value="Low">Low</option>
                        <option value="Medium" selected>Medium</option>
                        <option value="High">High</option>
                        <option value="Urgent">Urgent</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="prePOReceiveDate">Receive Date:</label>
                    <input type="date" id="prePOReceiveDate" name="receiveDate">
                </div>

                <div class="form-actions">
                    <button type="button" onclick="closeModal('prePurchaseOrderModal')">Cancel</button>
                    <button type="submit" id="savePrePOBtn">Save</button>
                </div>
            </form>
        </div>
    </div>

    <style>
        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: none;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            position: relative;
        }

        .modal-content h3 {
            margin-top: 0;
            color: #333;
        }

        .close {
            position: absolute;
            right: 15px;
            top: 15px;
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: #000;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #333;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            box-sizing: border-box;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 60px;
        }

        .form-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }

        .form-actions button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .form-actions button[type="button"] {
            background: #6c757d;
            color: white;
        }

        .form-actions button[type="submit"] {
            background: #007bff;
            color: white;
        }

        .form-actions button:hover {
            opacity: 0.9;
        }
    </style>

    <!-- Final initialization script to ensure DOM is ready -->
    <script>
        // Ensure filters are applied after everything is loaded
        window.addEventListener('load', function () {
            console.log('🔄 Window loaded, applying final filter initialization...');

            const notMyConcernCheckbox = document.getElementById('showNotMyConcern');
            const pendingBillCheckbox = document.getElementById('showPendingBill');

            if (notMyConcernCheckbox && pendingBillCheckbox) {
                notMyConcernCheckbox.checked = false; // Ensure unchecked
                pendingBillCheckbox.checked = false; // Ensure unchecked
                console.log('✅ Final filter initialization complete, applying filters...');
                applyFilters();
            } else {
                console.log('❌ One or more checkboxes not found in final initialization');
            }
        });
    </script>
</body>

</html>