<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dropship Data Processor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
        }

        /* Navigation Styles */
        .container {
            max-width: 100%;
            margin: 0;
            padding: 0;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 20px;
            border-radius: 0;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 10px;
        }

        .header h1 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: 600;
            color: white;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .navigation-container {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }

        .nav-section {
            position: relative;
        }

        .nav-accordion-btn, .nav-imports-btn {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            white-space: nowrap;
        }

        .nav-accordion-btn:hover, .nav-imports-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.4);
            transform: translateY(-1px);
        }

        .accordion-icon, .dropdown-icon {
            transition: transform 0.3s ease;
            font-size: 12px;
        }

        .accordion-icon.rotated, .dropdown-icon.rotated {
            transform: rotate(180deg);
        }

        .nav-accordion-content, .nav-dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            min-width: 200px;
            max-height: 0;
            overflow: hidden;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .nav-accordion-content.show, .nav-dropdown-content.show {
            max-height: 400px;
            opacity: 1;
            transform: translateY(0);
        }

        .nav-accordion-item, .nav-dropdown-item {
            display: block;
            padding: 10px 15px;
            color: #333;
            text-decoration: none;
            font-size: 13px;
            transition: all 0.2s ease;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
        }

        .nav-accordion-item:hover, .nav-dropdown-item:hover {
            background: #f8f9fa;
            color: #007bff;
        }

        .nav-accordion-divider {
            height: 1px;
            background: #eee;
            margin: 5px 0;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
            position: relative;
        }

        .user-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 14px;
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            position: relative;
        }

        .user-status-indicator {
            position: absolute;
            bottom: -2px;
            right: -2px;
            width: 12px;
            height: 12px;
            background: #28a745;
            border: 2px solid white;
            border-radius: 50%;
        }

        .dropdown-user-info {
            padding: 15px;
            border-bottom: 1px solid #eee;
            background: #f8f9fa;
        }

        .dropdown-user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #007bff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: white;
            margin-bottom: 8px;
        }

        .dropdown-user-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 2px;
        }

        .dropdown-user-role {
            font-size: 12px;
            color: #6c757d;
            text-transform: uppercase;
            margin-bottom: 2px;
        }

        .dropdown-user-status {
            font-size: 11px;
            color: #28a745;
            font-weight: 500;
        }

        .auth-status {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
        }

        /* Content Styles */
        .content-container {
            max-width: 1200px; 
            margin: 20px auto; 
            background: white; 
            padding: 20px; 
            border-radius: 8px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
        }

        .navigation-links {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 15px;
        }
        .nav-link {
            background: #007bff;
            color: white;
            padding: 8px 15px;
            text-decoration: none;
            border-radius: 5px;
            font-size: 14px;
            transition: background 0.3s ease;
        }
        .nav-link:hover {
            background: #0056b3;
        }
        .description {
            text-align: center;
            color: #666;
            margin-bottom: 20px;
        }
        .upload-section { 
            border: 2px dashed #ccc; 
            padding: 30px; 
            text-align: center; 
            margin-bottom: 30px; 
            border-radius: 8px; 
            background-color: #fafafa; 
        }
        .upload-section.dragover { 
            border-color: #007bff; 
            background-color: #e7f3ff; 
        }
        .file-input { 
            margin: 20px 0; 
        }
        .upload-btn { 
            background: #007bff; 
            color: white; 
            padding: 12px 30px; 
            border: none; 
            border-radius: 5px; 
            cursor: pointer; 
            font-size: 16px; 
        }
        .upload-btn:hover { 
            background: #0056b3; 
        }
        .upload-btn:disabled { 
            background: #ccc; 
            cursor: not-allowed; 
        }
        .files-section { 
            margin-top: 30px; 
        }
        .files-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); 
            gap: 20px; 
            margin-top: 20px; 
        }
        .file-card { 
            border: 1px solid #ddd; 
            padding: 15px; 
            border-radius: 8px; 
            background: #fafafa; 
        }
        .file-name { 
            font-weight: bold; 
            color: #333; 
            margin-bottom: 5px; 
        }
        .file-details { 
            font-size: 12px; 
            color: #666; 
            margin-bottom: 10px; 
        }
        .file-actions { 
            display: flex; 
            gap: 10px; 
        }
        .btn { 
            padding: 5px 15px; 
            border: none; 
            border-radius: 3px; 
            cursor: pointer; 
            font-size: 12px; 
        }
        .btn-analyze { 
            background: #28a745; 
            color: white; 
        }
        .btn-delete { 
            background: #dc3545; 
            color: white; 
        }
        .btn-archive { 
            background: #6c757d; 
            color: white; 
        }
        .btn:hover { 
            opacity: 0.8; 
        }
        .process-section { 
            margin-top: 30px; 
            padding: 20px; 
            background: #e9f7ef; 
            border-radius: 8px; 
            text-align: center; 
        }
        .process-btn { 
            background: #28a745; 
            color: white; 
            padding: 15px 40px; 
            border: none; 
            border-radius: 5px; 
            cursor: pointer; 
            font-size: 18px; 
            margin-top: 10px; 
        }
        .process-btn:hover { 
            background: #218838; 
        }
        .message { 
            padding: 10px; 
            margin: 10px 0; 
            border-radius: 5px; 
        }
        .success { 
            background: #d4edda; 
            color: #155724; 
            border: 1px solid #c3e6cb; 
        }
        .error { 
            background: #f8d7da; 
            color: #721c24; 
            border: 1px solid #f5c6cb; 
        }
        .progress-bar { 
            width: 100%; 
            height: 20px; 
            background: #f0f0f0; 
            border-radius: 10px; 
            overflow: hidden; 
            margin: 10px 0; 
        }
        .progress-fill { 
            height: 100%; 
            background: #007bff; 
            width: 0%; 
            transition: width 0.3s ease; 
        }
        .output-file-item {
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin: 10px 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .file-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .file-icon {
            font-size: 24px;
        }
        .file-details h5 {
            margin: 0;
            color: #333;
        }
        .file-details p {
            margin: 0;
            color: #666;
            font-size: 14px;
        }
        .file-actions {
            display: flex;
            gap: 10px;
        }
        .action-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            font-size: 14px;
            transition: background 0.3s ease;
        }
        .download-btn {
            background: #007bff;
            color: white;
        }
        .download-btn:hover {
            background: #0056b3;
        }
        .preview-btn {
            background: #28a745;
            color: white;
        }
        .preview-btn:hover {
            background: #218838;
        }
        .delete-btn {
            background: #dc3545;
            color: white;
        }
        .delete-btn:hover {
            background: #c82333;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-height: 80%;
            overflow: auto;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: black;
        }
        .preview-content {
            max-height: 500px;
            overflow: auto;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-ship"></i> Dropship Data Processor</h1>
            
            <div class="d-flex align-items-center justify-content-between flex-grow-1">
                <!-- Navigation Container -->
                <div class="navigation-container">
                    <!-- Dashboards Accordion -->
                    <div class="nav-section">
                        <button class="nav-accordion-btn" onclick="toggleAccordion('managersAccordion')">
                            📊 Dashboards <span class="accordion-icon">▼</span>
                        </button>
                        <div id="managersAccordion" class="nav-accordion-content">
                            <a href="/" class="nav-accordion-item">🏠 PO Dashboard</a>
                            <a href="/receiving" class="nav-accordion-item">🚚 Receiving Dashboard</a>
                            <a href="/tasks" class="nav-accordion-item">📋 Tasks Dashboard</a>
                            <div class="nav-accordion-divider"></div>
                            <a href="/purchase-orders/line-items-manager" class="nav-accordion-item">📦 Line Items Manager</a>
                            <a href="/purchase-orders/tracking-dashboard" class="nav-accordion-item">🚚 17Track Dashboard</a>
                            <a href="/purchase-orders/notes-manager" class="nav-accordion-item">📝 Notes Manager</a>
                        </div>
                    </div>

                    <!-- Combined Options Button -->
                    <div class="nav-section">
                        <button class="nav-accordion-btn" onclick="toggleAccordion('optionsAccordion')">
                            ⚙️ Options <span class="accordion-icon">▼</span>
                        </button>
                        <div id="optionsAccordion" class="nav-accordion-content">
                            <a href="/upload" class="nav-accordion-item">📤 Upload CSV</a>
                            <a href="/organic-vendors" class="nav-accordion-item">🌱 Organic Vendors</a>
                            <a href="/purchase-orders/trouble-seed" class="nav-accordion-item">⚠️ Trouble Seed</a>
                            <a href="/purchase-orders/orphaned-line-items" class="nav-accordion-item">🧹 Orphaned Items</a>
                            
                            <!-- Admin Options (only for admin/manager users) -->
                            <% if (typeof user !== 'undefined' && user && (user.role === 'admin' || user.role === 'manager')) { %>
                            <div class="nav-accordion-divider"></div>
                            <a href="/auth/admin/users" class="nav-accordion-item">👥 User Management</a>
                            <a href="/auth/admin/audit-logs" class="nav-accordion-item">📊 Audit Logs</a>
                            <% if (user.role === 'admin' || user.role === 'manager') { %>
                            <a href="/auth/admin/test-email" class="nav-accordion-item">📧 Test Email</a>
                            <% } %>
                            <% } %>
                        </div>
                    </div>

                    <!-- Import Section -->
                    <div class="nav-section">
                        <button class="nav-imports-btn" onclick="toggleImportsDropdown()">
                            📁 Import <span class="dropdown-icon">▼</span>
                        </button>
                        <div id="importsDropdown" class="nav-dropdown-content">
                            <a href="/upload" class="nav-dropdown-item">📄 Purchase Orders CSV</a>
                            <a href="/upload" class="nav-dropdown-item">📦 Line Items CSV</a>
                            <button class="nav-dropdown-item" onclick="openNetSuiteImportModal()">🏢 NetSuite PO
                                Form</button>
                        </div>
                    </div>
                </div>
                
                <!-- User Info -->
                <% if (typeof user !== 'undefined' && user) { %>
                <div class="user-info" title="<%= user.firstName %> <%= user.lastName %> (<%= user.role %>) - Online">
                    <div class="user-avatar">
                        <%= user.firstName ? user.firstName.charAt(0).toUpperCase() : 'U' %><%= user.lastName ? user.lastName.charAt(0).toUpperCase() : '' %>
                        <div class="user-status-indicator" title="Online"></div>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-user"></i>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <!-- User Info Header -->
                            <li class="dropdown-user-info">
                                <div class="dropdown-user-avatar">
                                    <%= user.firstName ? user.firstName.charAt(0).toUpperCase() : 'U' %><%= user.lastName ? user.lastName.charAt(0).toUpperCase() : '' %>
                                </div>
                                <div class="dropdown-user-details">
                                    <div class="dropdown-user-name"><%= user.firstName %> <%= user.lastName %></div>
                                    <div class="dropdown-user-role"><%= user.role %></div>
                                    <div class="dropdown-user-status">Online</div>
                                </div>
                            </li>
                            <li><hr class="dropdown-divider" style="margin: 0;"></li>
                            
                            <% if (user.permissions && user.permissions.manageUsers) { %>
                            <li><a class="dropdown-item" href="/auth/admin/users">
                                <i class="fas fa-users me-2"></i>User Management
                            </a></li>
                            <li><a class="dropdown-item" href="/auth/admin/audit-logs">
                                <i class="fas fa-history me-2"></i>Audit Logs
                            </a></li>
                            <% } %>
                            <% if (user.role === 'admin' || user.role === 'manager') { %>
                            <li><a class="dropdown-item" href="/auth/admin/test-email">
                                <i class="fas fa-envelope me-2"></i>Test Email
                            </a></li>
                            <% } %>
                            <% if ((user.permissions && user.permissions.manageUsers) || user.role === 'admin' || user.role === 'manager') { %>
                            <li><hr class="dropdown-divider"></li>
                            <% } %>
                            <li>
                                <form action="/auth/logout" method="POST" style="margin: 0;">
                                    <button type="submit" class="dropdown-item" style="border: none; background: none; width: 100%; text-align: left;">
                                        <i class="fas fa-sign-out-alt me-2"></i>Logout
                                    </button>
                                </form>
                            </li>
                        </ul>
                    </div>
                </div>
                <% } else { %>
                <div class="user-info">
                    <span class="auth-status bg-warning text-dark">Not Authenticated</span>
                    <a href="/auth/login" class="btn btn-primary btn-sm">Login</a>
                </div>
                <% } %>
            </div>
        </div>
    </div>

    <div class="content-container">        
        <div class="description">
            <p>Upload your 4 data files to compile them into CSV and PDF reports</p>
        </div>

        <!-- Upload Section -->
        <div class="upload-section" id="uploadArea">
            <h3>📁 Upload Files</h3>
            <p>Drag and drop files here or click to select</p>
            <p><small>Supported formats: CSV, Excel (.xlsx, .xls), PDF, TXT</small></p>
            
            <input type="file" id="fileInput" multiple accept=".csv,.xlsx,.xls,.pdf,.txt" class="file-input" style="display: none;">
            <button type="button" class="upload-btn" onclick="document.getElementById('fileInput').click()">
                Select Files
            </button>
            <button type="button" class="upload-btn" id="uploadBtn" style="display: none;" onclick="uploadFiles()">
                Upload Selected Files
            </button>
            
            <div id="uploadProgress" style="display: none;">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <p id="progressText">Uploading...</p>
            </div>
        </div>

        <!-- Messages -->
        <div id="messages"></div>

        <!-- Uploaded Files Section -->
        <div class="files-section">
            <h3>📋 Uploaded Files (<span id="fileCount"><%= uploadedFiles.length %></span>)</h3>
            
            <% if (uploadedFiles.length === 0) { %>
                <p style="text-align: center; color: #666; font-style: italic;">
                    No files uploaded yet. Upload your 4 data files to get started.
                </p>
            <% } else { %>
                <div class="files-grid" id="filesGrid">
                    <% uploadedFiles.forEach(file => { %>
                        <div class="file-card" data-filename="<%= file.filename %>">
                            <div class="file-name"><%= file.originalName %></div>
                            <div class="file-details">
                                Size: <%= file.size %> | Uploaded: <%= file.uploadDate %>
                            </div>
                            <div class="file-actions">
                                <button class="btn btn-analyze" onclick="analyzeFile('<%= file.filename %>')">
                                    🔍 Analyze
                                </button>
                                <button class="btn btn-archive" onclick="archiveFile('<%= file.filename %>')">
                                    📦 Archive
                                </button>
                                <button class="btn btn-delete" onclick="deleteFile('<%= file.filename %>')">
                                    🗑️ Delete
                                </button>
                            </div>
                        </div>
                    <% }) %>
                </div>
            <% } %>
        </div>

        <!-- Processing Section -->
        <% if (uploadedFiles.length > 0) { %>
            <div class="process-section">
                <h3>⚙️ Data Analysis & Processing</h3>
                
                <!-- Analysis Section -->
                <div style="margin-bottom: 20px;">
                    <button class="btn btn-analyze" onclick="analyzeAllFiles()" style="margin-right: 10px;">
                        🔍 Analyze All Files & Relationships
                    </button>
                    <button class="process-btn" onclick="processFiles()">
                        🚀 Process All Files Into Output Format
                    </button>
                </div>
                
                <!-- Analysis Results Area -->
                <div id="analysisResults" style="display: none; margin-top: 20px;">
                    <h4>📊 Analysis Results</h4>
                    <div id="analysisContent" style="background: #f8f9fa; padding: 15px; border-radius: 5px; max-height: 400px; overflow-y: auto;"></div>
                </div>

                <!-- Output Files Section -->
                <div id="outputFilesSection" style="display: none; margin-top: 20px;">
                    <h4>📁 Generated Output Files</h4>
                    <div id="outputFilesList" style="background: #f8f9fa; padding: 15px; border-radius: 5px;"></div>
                </div>

                <!-- Existing Processed Files Section -->
                <% if (processedFiles && processedFiles.length > 0) { %>
                <div id="existingFilesSection" style="margin-top: 20px;">
                    <h4>📂 Previously Generated Files</h4>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 5px;">
                        <% processedFiles.forEach(file => { %>
                            <div class="output-file-item">
                                <div class="file-info">
                                    <span class="file-icon">
                                        <% if (file.extension === '.csv') { %>📊
                                        <% } else if (file.extension === '.xlsx') { %>📈
                                        <% } else { %>📄<% } %>
                                    </span>
                                    <div class="file-details">
                                        <h5><%= file.filename %></h5>
                                        <p><%= file.size %> • <%= file.extension.toUpperCase().substring(1) %> file • Modified: <%= file.modified %></p>
                                    </div>
                                </div>
                                <div class="file-actions">
                                    <button class="action-btn preview-btn" onclick="previewFile('<%= file.filename %>')">
                                        👁️ Preview
                                    </button>
                                    <a href="/dropship/download/<%= encodeURIComponent(file.filename) %>" 
                                       class="action-btn download-btn" download>
                                        ⬇️ Download
                                    </a>
                                    <button class="action-btn delete-btn" onclick="deleteProcessedFile('<%= file.filename %>')">
                                        🗑️ Delete
                                    </button>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
                <% } %>
            </div>
        <% } %>
    </div>

    <script>
        // File input handling
        const fileInput = document.getElementById('fileInput');
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadArea = document.getElementById('uploadArea');

        fileInput.addEventListener('change', function() {
            if (this.files.length > 0) {
                uploadBtn.style.display = 'inline-block';
                uploadBtn.textContent = `Upload ${this.files.length} File(s)`;
            } else {
                uploadBtn.style.display = 'none';
            }
        });

        // Drag and drop handling
        uploadArea.addEventListener('dragover', function(e) {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', function(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', function(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            
            const files = e.dataTransfer.files;
            fileInput.files = files;
            
            if (files.length > 0) {
                uploadBtn.style.display = 'inline-block';
                uploadBtn.textContent = `Upload ${files.length} File(s)`;
            }
        });

        // Upload files function
        function uploadFiles() {
            const files = fileInput.files;
            if (files.length === 0) return;

            const formData = new FormData();
            for (let i = 0; i < files.length; i++) {
                formData.append('files', files[i]);
            }

            // Show progress
            document.getElementById('uploadProgress').style.display = 'block';
            uploadBtn.disabled = true;
            uploadBtn.textContent = 'Uploading...';

            fetch('/dropship/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage(data.message, 'success');
                    setTimeout(() => {
                        location.reload(); // Refresh to show new files
                    }, 1000);
                } else {
                    showMessage(data.error || 'Upload failed', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Upload failed: ' + error.message, 'error');
            })
            .finally(() => {
                document.getElementById('uploadProgress').style.display = 'none';
                uploadBtn.disabled = false;
                uploadBtn.textContent = 'Upload Files';
                uploadBtn.style.display = 'none';
                fileInput.value = '';
            });
        }

        // Analyze file function
        function analyzeFile(filename) {
            fetch(`/dropship/analyze/${filename}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const analysis = data.analysis;
                    let message = `File Analysis: ${analysis.filename}\n\n`;
                    message += `Type: ${analysis.data?.type || 'Unknown'}\n`;
                    message += `Size: ${(analysis.size / 1024).toFixed(2)} KB\n`;
                    
                    if (analysis.data?.headers) {
                        message += `Headers: ${analysis.data.headers.join(', ')}\n`;
                    }
                    
                    if (analysis.data?.rowCount) {
                        message += `Rows: ${analysis.data.rowCount}\n`;
                    }
                    
                    if (data.isOutputFile) {
                        message += `\n📋 This is an OUTPUT/RESULTS file`;
                    } else {
                        message += `\n📁 This is an INPUT file`;
                    }
                    
                    alert(message);
                } else {
                    showMessage(data.error || 'Analysis failed', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Analysis failed: ' + error.message, 'error');
            });
        }

        // Analyze all files function
        function analyzeAllFiles() {
            document.getElementById('analysisResults').style.display = 'block';
            document.getElementById('analysisContent').innerHTML = 'Analyzing files and relationships...';
            
            fetch('/dropship/analyze-all')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayAnalysisResults(data.analysis, data.processingPlan);
                    showMessage('Analysis completed successfully!', 'success');
                } else {
                    showMessage(data.error || 'Analysis failed', 'error');
                    document.getElementById('analysisResults').style.display = 'none';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Analysis failed: ' + error.message, 'error');
                document.getElementById('analysisResults').style.display = 'none';
            });
        }

        // Display analysis results
        function displayAnalysisResults(analysis, plan) {
            let html = '<h5>📂 File Summary</h5>';
            html += `<p><strong>Input Files:</strong> ${analysis.inputFiles.length} | <strong>Output Files:</strong> ${analysis.outputFiles.length}</p>`;
            
            html += '<h5>📥 Input Files Structure</h5>';
            analysis.inputFiles.forEach(file => {
                html += `<div style="margin: 10px 0; padding: 10px; background: #e3f2fd; border-radius: 3px;">`;
                html += `<strong>${file.filename}</strong><br>`;
                html += `Type: ${file.data?.type || 'Unknown'}`;
                
                if (file.data?.type === 'Excel') {
                    html += ` (Sheets: ${Object.keys(file.data.sheets).join(', ')})`;
                }
                
                if (file.data?.headers) {
                    html += `<br>Headers: ${file.data.headers.slice(0, 5).join(', ')}${file.data.headers.length > 5 ? '...' : ''}`;
                }
                
                if (file.data?.rowCount !== undefined) {
                    html += `<br>Rows: ${file.data.rowCount}`;
                }
                
                html += '</div>';
            });
            
            html += '<h5>📤 Target Output Files</h5>';
            analysis.outputFiles.forEach(file => {
                html += `<div style="margin: 10px 0; padding: 10px; background: #e8f5e8; border-radius: 3px;">`;
                html += `<strong>${file.filename}</strong><br>`;
                html += `Type: ${file.data?.type || 'Unknown'}`;
                
                if (file.data?.headers) {
                    html += `<br>Expected Headers: ${file.data.headers.join(', ')}`;
                }
                
                html += '</div>';
            });
            
            html += '<h5>🔗 Processing Plan</h5>';
            plan.steps.forEach(step => {
                html += `<div style="margin: 10px 0; padding: 10px; background: #fff3cd; border-radius: 3px;">`;
                html += `<strong>Generate:</strong> ${step.outputFile}<br>`;
                html += `<strong>Method:</strong> ${step.processingMethod}<br>`;
                html += `<strong>Input Sources:</strong> ${step.inputSources.length} file(s)<br>`;
                html += `<strong>Transformations:</strong> ${step.requiredTransformations.join(', ')}`;
                html += '</div>';
            });
            
            document.getElementById('analysisContent').innerHTML = html;
        }

        // Delete file function
        function deleteFile(filename) {
            if (!confirm('Are you sure you want to delete this file?')) return;

            fetch(`/dropship/delete/${filename}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage(data.message, 'success');
                    // Remove the file card from the grid
                    const fileCard = document.querySelector(`[data-filename="${filename}"]`);
                    if (fileCard) {
                        fileCard.remove();
                    }
                    // Update file count
                    const fileCount = document.getElementById('fileCount');
                    fileCount.textContent = parseInt(fileCount.textContent) - 1;
                } else {
                    showMessage(data.error || 'Delete failed', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Delete failed: ' + error.message, 'error');
            });
        }

        // Process files function
        function processFiles() {
            if (!confirm('Process all uploaded files and generate output files in the same format as your uploaded results?')) return;

            showMessage('Processing files... This may take a moment.', 'success');
            
            fetch('/dropship/process', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    let message = 'Processing completed successfully!\n\n';
                    if (data.results) {
                        data.results.forEach(result => {
                            if (result.success) {
                                message += `✅ ${result.outputFile}: ${result.recordCount || 0} records\n`;
                            } else {
                                message += `❌ ${result.outputFile}: ${result.error}\n`;
                            }
                        });
                    }
                    showMessage(message, 'success');
                    
                    // Show detailed results if available
                    if (data.analysis && data.processingPlan) {
                        document.getElementById('analysisResults').style.display = 'block';
                        displayAnalysisResults(data.analysis, data.processingPlan);
                    }

                    // Show output files
                    if (data.results && data.results.length > 0) {
                        displayOutputFiles(data.results);
                    }
                } else {
                    showMessage('Processing failed: ' + (data.error || 'Unknown error'), 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Processing failed: ' + error.message, 'error');
            });
        }

        // Show message function
        function showMessage(message, type) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            messageDiv.textContent = message;
            messagesDiv.appendChild(messageDiv);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                messageDiv.remove();
            }, 5000);
        }

        // Display output files with download and preview options
        function displayOutputFiles(results) {
            const outputSection = document.getElementById('outputFilesSection');
            const outputList = document.getElementById('outputFilesList');
            
            outputSection.style.display = 'block';
            
            let html = '';
            results.forEach(result => {
                if (result.success && result.outputFile) {
                    const fileExt = result.outputFile.split('.').pop().toLowerCase();
                    const icon = fileExt === 'csv' ? '📊' : fileExt === 'xlsx' ? '📈' : '📄';
                    
                    html += `
                        <div class="output-file-item">
                            <div class="file-info">
                                <span class="file-icon">${icon}</span>
                                <div class="file-details">
                                    <h5>${result.outputFile}</h5>
                                    <p>${result.recordCount || 0} records • ${fileExt.toUpperCase()} file</p>
                                </div>
                            </div>
                            <div class="file-actions">
                                <button class="action-btn preview-btn" onclick="previewFile('${result.outputFile}')">
                                    👁️ Preview
                                </button>
                                <a href="/dropship/download/${encodeURIComponent(result.outputFile)}" 
                                   class="action-btn download-btn" download>
                                    ⬇️ Download
                                </a>
                            </div>
                        </div>
                    `;
                }
            });
            
            outputList.innerHTML = html;
        }

        // Preview file content
        function previewFile(filename) {
            const fileExt = filename.split('.').pop().toLowerCase();
            
            if (fileExt === 'pdf') {
                // For PDF files, open in new window/tab for native browser PDF viewer
                window.open(`/dropship/preview/${encodeURIComponent(filename)}`, '_blank');
            } else {
                // For other files, show in modal
                fetch(`/dropship/preview/${encodeURIComponent(filename)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showFilePreview(filename, data.content, data.fileType);
                    } else {
                        showMessage('Failed to preview file: ' + (data.error || 'Unknown error'), 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Preview failed: ' + error.message, 'error');
                });
            }
        }

        // Show file preview in modal
        function showFilePreview(filename, content, fileType) {
            // Create modal if it doesn't exist
            let modal = document.getElementById('previewModal');
            if (!modal) {
                modal = document.createElement('div');
                modal.id = 'previewModal';
                modal.className = 'modal';
                modal.innerHTML = `
                    <div class="modal-content">
                        <span class="close" onclick="closePreview()">&times;</span>
                        <h3 id="previewTitle"></h3>
                        <div id="previewContent" class="preview-content"></div>
                    </div>
                `;
                document.body.appendChild(modal);
            }
            
            document.getElementById('previewTitle').textContent = `Preview: ${filename}`;
            
            if (fileType === 'csv') {
                // Format CSV as table
                const lines = content.split('\n').filter(line => line.trim());
                if (lines.length > 0) {
                    const headers = lines[0].split(',');
                    let tableHtml = '<table border="1" style="border-collapse: collapse; width: 100%;">';
                    tableHtml += '<tr>' + headers.map(h => `<th style="padding: 8px; background: #f0f0f0;">${h.trim()}</th>`).join('') + '</tr>';
                    
                    // Show first 50 rows
                    for (let i = 1; i < Math.min(lines.length, 51); i++) {
                        const cells = lines[i].split(',');
                        tableHtml += '<tr>' + cells.map(c => `<td style="padding: 8px;">${c.trim()}</td>`).join('') + '</tr>';
                    }
                    
                    if (lines.length > 51) {
                        tableHtml += `<tr><td colspan="${headers.length}" style="padding: 8px; font-style: italic; text-align: center;">... and ${lines.length - 51} more rows</td></tr>`;
                    }
                    
                    tableHtml += '</table>';
                    document.getElementById('previewContent').innerHTML = tableHtml;
                }
            } else {
                // Show raw content for other file types
                document.getElementById('previewContent').textContent = content;
            }
            
            modal.style.display = 'block';
        }

        // Delete uploaded file
        function deleteFile(filename) {
            if (confirm(`Are you sure you want to delete "${filename}"?`)) {
                fetch(`/dropship/file/${encodeURIComponent(filename)}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showMessage('File deleted successfully', 'success');
                        // Remove file card from UI
                        const fileCard = document.querySelector(`[data-filename="${filename}"]`);
                        if (fileCard) {
                            fileCard.remove();
                        }
                    } else {
                        showMessage('Failed to delete file: ' + (data.error || 'Unknown error'), 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Delete failed: ' + error.message, 'error');
                });
            }
        }

        // Archive uploaded file
        function archiveFile(filename) {
            if (confirm(`Archive "${filename}"? This will move it out of the active upload folder.`)) {
                fetch(`/dropship/file/${encodeURIComponent(filename)}/archive`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showMessage('File archived successfully', 'success');
                        // Remove file card from UI
                        const fileCard = document.querySelector(`[data-filename="${filename}"]`);
                        if (fileCard) {
                            fileCard.remove();
                        }
                    } else {
                        showMessage('Failed to archive file: ' + (data.error || 'Unknown error'), 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Archive failed: ' + error.message, 'error');
                });
            }
        }

        // Delete processed file
        function deleteProcessedFile(filename) {
            if (confirm(`Are you sure you want to delete the processed file "${filename}"?`)) {
                fetch(`/dropship/processed/${encodeURIComponent(filename)}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showMessage('Processed file deleted successfully', 'success');
                        location.reload(); // Refresh to update the processed files list
                    } else {
                        showMessage('Failed to delete processed file: ' + (data.error || 'Unknown error'), 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Delete failed: ' + error.message, 'error');
                });
            }
        }

        // Close preview modal
        function closePreview() {
            document.getElementById('previewModal').style.display = 'none';
        }

        // Close modal when clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('previewModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }

        // Navigation Functions
        function closeAllDropdowns() {
            // Close all accordion dropdowns
            const accordions = document.querySelectorAll('.nav-accordion-content');
            accordions.forEach(accordion => {
                accordion.classList.remove('show');
            });
            
            // Close imports dropdown
            const importsDropdown = document.getElementById('importsDropdown');
            if (importsDropdown) {
                importsDropdown.classList.remove('show');
            }
            
            // Reset all icons
            const accordionIcons = document.querySelectorAll('.accordion-icon');
            accordionIcons.forEach(icon => {
                icon.classList.remove('rotated');
            });
            const importsIcon = document.querySelector('.nav-imports-btn .dropdown-icon');
            if (importsIcon) {
                importsIcon.classList.remove('rotated');
            }
        }

        function toggleAccordion(accordionId) {
            // Close all other dropdowns first
            closeAllDropdowns();
            
            const content = document.getElementById(accordionId);
            const button = document.querySelector(`button[onclick="toggleAccordion('${accordionId}')"]`);
            const icon = button ? button.querySelector('.accordion-icon') : null;

            if (content) {
                content.classList.toggle('show');
            }
            if (icon) {
                icon.classList.toggle('rotated');
            }
        }

        function toggleImportsDropdown() {
            // Close all other dropdowns first
            closeAllDropdowns();
            
            const content = document.getElementById('importsDropdown');
            const icon = document.querySelector('.nav-imports-btn .dropdown-icon');

            content.classList.toggle('show');
            icon.classList.toggle('rotated');
        }

        function openNetSuiteImportModal() {
            alert('NetSuite Import Modal functionality would be implemented here for the Dropship Dashboard');
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function (event) {
            const navigationContainer = document.querySelector('.navigation-container');
            
            // If click is outside navigation container, close all dropdowns/accordions
            if (navigationContainer && !navigationContainer.contains(event.target)) {
                closeAllDropdowns();
            }
        });
    </script>

    <!-- Bootstrap JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
